"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object")
      throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    "use strict";
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign3(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/@smithy/types/dist-cjs/abort.js
var require_abort = __commonJS({
  "node_modules/@smithy/types/dist-cjs/abort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/auth.js
var require_auth = __commonJS({
  "node_modules/@smithy/types/dist-cjs/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation = exports.HttpAuthLocation || (exports.HttpAuthLocation = {}));
  }
});

// node_modules/@smithy/types/dist-cjs/checksum.js
var require_checksum = __commonJS({
  "node_modules/@smithy/types/dist-cjs/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/client.js
var require_client = __commonJS({
  "node_modules/@smithy/types/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/command.js
var require_command = __commonJS({
  "node_modules/@smithy/types/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/connection/config.js
var require_config = __commonJS({
  "node_modules/@smithy/types/dist-cjs/connection/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/connection/manager.js
var require_manager = __commonJS({
  "node_modules/@smithy/types/dist-cjs/connection/manager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/connection/pool.js
var require_pool = __commonJS({
  "node_modules/@smithy/types/dist-cjs/connection/pool.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/connection/index.js
var require_connection = __commonJS({
  "node_modules/@smithy/types/dist-cjs/connection/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_manager(), exports);
    tslib_1.__exportStar(require_pool(), exports);
  }
});

// node_modules/@smithy/types/dist-cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@smithy/types/dist-cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/encode.js
var require_encode = __commonJS({
  "node_modules/@smithy/types/dist-cjs/encode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports.EndpointURLScheme || (exports.EndpointURLScheme = {}));
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/EndpointRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/ErrorRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/RuleSetObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/shared.js
var require_shared = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/TreeRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/endpoints/index.js
var require_endpoints = __commonJS({
  "node_modules/@smithy/types/dist-cjs/endpoints/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointRuleObject(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports);
    tslib_1.__exportStar(require_RuleSetObject(), exports);
    tslib_1.__exportStar(require_shared(), exports);
    tslib_1.__exportStar(require_TreeRuleObject(), exports);
  }
});

// node_modules/@smithy/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  "node_modules/@smithy/types/dist-cjs/eventStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/http.js
var require_http = __commonJS({
  "node_modules/@smithy/types/dist-cjs/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FieldPosition = void 0;
    var FieldPosition;
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition = exports.FieldPosition || (exports.FieldPosition = {}));
  }
});

// node_modules/@smithy/types/dist-cjs/identity/awsCredentialIdentity.js
var require_awsCredentialIdentity = __commonJS({
  "node_modules/@smithy/types/dist-cjs/identity/awsCredentialIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/identity/identity.js
var require_identity = __commonJS({
  "node_modules/@smithy/types/dist-cjs/identity/identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/identity/index.js
var require_identity2 = __commonJS({
  "node_modules/@smithy/types/dist-cjs/identity/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_awsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_identity(), exports);
  }
});

// node_modules/@smithy/types/dist-cjs/logger.js
var require_logger = __commonJS({
  "node_modules/@smithy/types/dist-cjs/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "node_modules/@smithy/types/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  "node_modules/@smithy/types/dist-cjs/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/profile.js
var require_profile = __commonJS({
  "node_modules/@smithy/types/dist-cjs/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/response.js
var require_response = __commonJS({
  "node_modules/@smithy/types/dist-cjs/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/retry.js
var require_retry = __commonJS({
  "node_modules/@smithy/types/dist-cjs/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/serde.js
var require_serde = __commonJS({
  "node_modules/@smithy/types/dist-cjs/serde.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  "node_modules/@smithy/types/dist-cjs/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/signature.js
var require_signature = __commonJS({
  "node_modules/@smithy/types/dist-cjs/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/stream.js
var require_stream = __commonJS({
  "node_modules/@smithy/types/dist-cjs/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  "node_modules/@smithy/types/dist-cjs/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequestHandlerProtocol = void 0;
    var RequestHandlerProtocol;
    (function(RequestHandlerProtocol2) {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol = exports.RequestHandlerProtocol || (exports.RequestHandlerProtocol = {}));
  }
});

// node_modules/@smithy/types/dist-cjs/uri.js
var require_uri = __commonJS({
  "node_modules/@smithy/types/dist-cjs/uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/util.js
var require_util = __commonJS({
  "node_modules/@smithy/types/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "node_modules/@smithy/types/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/types/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@smithy/types/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports);
    tslib_1.__exportStar(require_auth(), exports);
    tslib_1.__exportStar(require_checksum(), exports);
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_connection(), exports);
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_encode(), exports);
    tslib_1.__exportStar(require_endpoint(), exports);
    tslib_1.__exportStar(require_endpoints(), exports);
    tslib_1.__exportStar(require_eventStream(), exports);
    tslib_1.__exportStar(require_http(), exports);
    tslib_1.__exportStar(require_identity2(), exports);
    tslib_1.__exportStar(require_logger(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    tslib_1.__exportStar(require_profile(), exports);
    tslib_1.__exportStar(require_response(), exports);
    tslib_1.__exportStar(require_retry(), exports);
    tslib_1.__exportStar(require_serde(), exports);
    tslib_1.__exportStar(require_shapes(), exports);
    tslib_1.__exportStar(require_signature(), exports);
    tslib_1.__exportStar(require_stream(), exports);
    tslib_1.__exportStar(require_transfer(), exports);
    tslib_1.__exportStar(require_uri(), exports);
    tslib_1.__exportStar(require_util(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/Field.js
var require_Field = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/Field.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Field = void 0;
    var types_1 = require_dist_cjs();
    var Field = class {
      constructor({ name, kind = types_1.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      get() {
        return this.values;
      }
    };
    exports.Field = Field;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/Fields.js
var require_Fields = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/Fields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    exports.Fields = Fields;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response2) {
        if (!response2)
          return false;
        const resp = response2;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports.HttpResponse = HttpResponse;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/types.js
var require_types = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/protocol-http/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@smithy/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Field(), exports);
    tslib_1.__exportStar(require_Fields(), exports);
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response2 = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response2.output;
        (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response2;
      } catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class _ProviderError extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, _ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class _CredentialsProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/TokenProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class _TokenProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
    };
    exports.TokenProviderError = TokenProviderError;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  }
});

// node_modules/@smithy/property-provider/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@smithy/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_TokenProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js
var tslib_es6_exports2 = {};
__export(tslib_es6_exports2, {
  __assign: () => __assign2,
  __asyncDelegator: () => __asyncDelegator2,
  __asyncGenerator: () => __asyncGenerator2,
  __asyncValues: () => __asyncValues2,
  __await: () => __await2,
  __awaiter: () => __awaiter2,
  __classPrivateFieldGet: () => __classPrivateFieldGet2,
  __classPrivateFieldSet: () => __classPrivateFieldSet2,
  __createBinding: () => __createBinding2,
  __decorate: () => __decorate2,
  __exportStar: () => __exportStar2,
  __extends: () => __extends2,
  __generator: () => __generator2,
  __importDefault: () => __importDefault2,
  __importStar: () => __importStar2,
  __makeTemplateObject: () => __makeTemplateObject2,
  __metadata: () => __metadata2,
  __param: () => __param2,
  __read: () => __read2,
  __rest: () => __rest2,
  __spread: () => __spread2,
  __spreadArrays: () => __spreadArrays2,
  __values: () => __values2
});
function __extends2(d, b) {
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate2(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param2(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata2(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding2(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
}
function __exportStar2(m, exports) {
  for (var p in m)
    if (p !== "default" && !exports.hasOwnProperty(p))
      exports[p] = m[p];
}
function __values2(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read2(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread2() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read2(arguments[i]));
  return ar;
}
function __spreadArrays2() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __await2(v) {
  return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator2(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues2(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject2(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar2(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault2(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet2(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet2(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics2, __assign2;
var init_tslib_es62 = __esm({
  "node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js"() {
    "use strict";
    extendStatics2 = function(d, b) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics2(d, b);
    };
    __assign2 = function() {
      __assign2 = Object.assign || function __assign3(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js
var require_pureJs = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var fromUtf8 = (input) => {
      const bytes = [];
      for (let i = 0, len = input.length; i < len; i++) {
        const value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => {
      let decoded = "";
      for (let i = 0, len = input.length; i < len; i++) {
        const byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          const nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          const surrogatePair = [byte, input[++i], input[++i], input[++i]];
          const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js
var require_whatwgEncodingApi = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    function fromUtf8(input) {
      return new TextEncoder().encode(input);
    }
    exports.fromUtf8 = fromUtf8;
    function toUtf8(input) {
      return new TextDecoder("utf-8").decode(input);
    }
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var pureJs_1 = require_pureJs();
    var whatwgEncodingApi_1 = require_whatwgEncodingApi();
    var fromUtf8 = (input) => typeof TextEncoder === "function" ? (0, whatwgEncodingApi_1.fromUtf8)(input) : (0, pureJs_1.fromUtf8)(input);
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => typeof TextDecoder === "function" ? (0, whatwgEncodingApi_1.toUtf8)(input) : (0, pureJs_1.toUtf8)(input);
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_browser_1 = require_dist_cjs7();
    var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "node_modules/@aws-crypto/util/build/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "node_modules/@aws-crypto/util/build/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// node_modules/@aws-crypto/util/build/index.js
var require_build = __commonJS({
  "node_modules/@aws-crypto/util/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// node_modules/@aws-crypto/crc32/build/aws_crc32.js
var require_aws_crc32 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/aws_crc32.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    var util_1 = require_build();
    var index_1 = require_build2();
    var AwsCrc32 = (
      /** @class */
      function() {
        function AwsCrc322() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc322.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc322.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc322.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc322;
      }()
    );
    exports.AwsCrc32 = AwsCrc32;
  }
});

// node_modules/@aws-crypto/crc32/build/index.js
var require_build2 = __commonJS({
  "node_modules/@aws-crypto/crc32/build/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    var util_1 = require_build();
    function crc32(data) {
      return new Crc32().update(data).digest();
    }
    exports.crc32 = crc32;
    var Crc32 = (
      /** @class */
      function() {
        function Crc322() {
          this.checksum = 4294967295;
        }
        Crc322.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc322.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc322;
      }()
    );
    exports.Crc32 = Crc32;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

// node_modules/@smithy/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@smithy/util-hex-encoding/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/Int64.js
var require_Int64 = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/Int64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Int64 = void 0;
    var util_hex_encoding_1 = require_dist_cjs8();
    var Int64 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, util_hex_encoding_1.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    exports.Int64 = Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/HeaderMarshaller.js
var require_HeaderMarshaller = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/HeaderMarshaller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HeaderMarshaller = void 0;
    var util_hex_encoding_1 = require_dist_cjs8();
    var Int64_1 = require_Int64();
    var HeaderMarshaller = class {
      constructor(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, util_hex_encoding_1.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(0, 4))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(4, 6))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(6, 8))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(8, 10))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    exports.HeaderMarshaller = HeaderMarshaller;
    var HEADER_VALUE_TYPE;
    (function(HEADER_VALUE_TYPE2) {
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/splitMessage.js
var require_splitMessage = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/splitMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitMessage = void 0;
    var crc32_1 = require_build2();
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage({ byteLength, byteOffset, buffer }) {
      if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
      }
      const view = new DataView(buffer, byteOffset, byteLength);
      const messageLength = view.getUint32(0, false);
      if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
      }
      const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
      const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
      const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
      const checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
      if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
      }
      checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
      if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
      }
      return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
      };
    }
    exports.splitMessage = splitMessage;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/EventStreamCodec.js
var require_EventStreamCodec = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/EventStreamCodec.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventStreamCodec = void 0;
    var crc32_1 = require_build2();
    var HeaderMarshaller_1 = require_HeaderMarshaller();
    var splitMessage_1 = require_splitMessage();
    var EventStreamCodec = class {
      constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new crc32_1.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      decode(message) {
        const { headers, body } = (0, splitMessage_1.splitMessage)(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
    exports.EventStreamCodec = EventStreamCodec;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/Message.js
var require_Message = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/Message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/MessageDecoderStream.js
var require_MessageDecoderStream = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/MessageDecoderStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessageDecoderStream = void 0;
    var MessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const bytes of this.options.inputStream) {
          const decoded = this.options.decoder.decode(bytes);
          yield decoded;
        }
      }
    };
    exports.MessageDecoderStream = MessageDecoderStream;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/MessageEncoderStream.js
var require_MessageEncoderStream = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/MessageEncoderStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessageEncoderStream = void 0;
    var MessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const msg of this.options.messageStream) {
          const encoded = this.options.encoder.encode(msg);
          yield encoded;
        }
        if (this.options.includeEndFrame) {
          yield new Uint8Array(0);
        }
      }
    };
    exports.MessageEncoderStream = MessageEncoderStream;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageDecoderStream.js
var require_SmithyMessageDecoderStream = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageDecoderStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SmithyMessageDecoderStream = void 0;
    var SmithyMessageDecoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const message of this.options.messageStream) {
          const deserialized = await this.options.deserializer(message);
          if (deserialized === void 0)
            continue;
          yield deserialized;
        }
      }
    };
    exports.SmithyMessageDecoderStream = SmithyMessageDecoderStream;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageEncoderStream.js
var require_SmithyMessageEncoderStream = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/SmithyMessageEncoderStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SmithyMessageEncoderStream = void 0;
    var SmithyMessageEncoderStream = class {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const chunk of this.options.inputStream) {
          const payloadBuf = this.options.serializer(chunk);
          yield payloadBuf;
        }
      }
    };
    exports.SmithyMessageEncoderStream = SmithyMessageEncoderStream;
  }
});

// node_modules/@smithy/eventstream-codec/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@smithy/eventstream-codec/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamCodec(), exports);
    tslib_1.__exportStar(require_HeaderMarshaller(), exports);
    tslib_1.__exportStar(require_Int64(), exports);
    tslib_1.__exportStar(require_Message(), exports);
    tslib_1.__exportStar(require_MessageDecoderStream(), exports);
    tslib_1.__exportStar(require_MessageEncoderStream(), exports);
    tslib_1.__exportStar(require_SmithyMessageDecoderStream(), exports);
    tslib_1.__exportStar(require_SmithyMessageEncoderStream(), exports);
  }
});

// node_modules/@smithy/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "node_modules/@smithy/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  }
});

// node_modules/@smithy/util-middleware/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@smithy/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs11();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/fromUtf8.js
var require_fromUtf8 = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/fromUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/toUint8Array.js
var require_toUint8Array = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/toUint8Array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
    exports.toUint8Array = toUint8Array;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/toUtf8.js
var require_toUtf8 = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/toUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports);
    tslib_1.__exportStar(require_toUint8Array(), exports);
    tslib_1.__exportStar(require_toUtf8(), exports);
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
    exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports.AUTH_HEADER = "authorization";
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = "date";
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = "x-amz-content-sha256";
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = "host";
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/credentialDerivation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs8();
    var util_utf8_1 = require_dist_cjs13();
    var constants_1 = require_constants();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "node_modules/@smithy/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports.escapeUriPath = escapeUriPath;
  }
});

// node_modules/@smithy/util-uri-escape/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@smithy/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/getCanonicalQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs14();
    var constants_1 = require_constants();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/getPayloadHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs11();
    var util_hex_encoding_1 = require_dist_cjs8();
    var util_utf8_1 = require_dist_cjs13();
    var constants_1 = require_constants();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/headerUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/cloneRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports.cloneQuery = cloneQuery;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/prepareRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/utilDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) => (0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/SignatureV4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureV4 = void 0;
    var eventstream_codec_1 = require_dist_cjs9();
    var util_hex_encoding_1 = require_dist_cjs8();
    var util_middleware_1 = require_dist_cjs10();
    var util_utf8_1 = require_dist_cjs13();
    var constants_1 = require_constants();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.headerMarshaller = new eventstream_codec_1.HeaderMarshaller(util_utf8_1.toUtf8, util_utf8_1.fromUtf8);
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
          headers: this.headerMarshaller.format(signableMessage.message.headers),
          payload: signableMessage.message.body
        }, {
          signingDate,
          signingRegion,
          signingService,
          priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// node_modules/@smithy/signature-v4/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@smithy/signature-v4/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthConfiguration.js
var require_awsAuthConfiguration = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthConfiguration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs6();
    var signature_v4_1 = require_dist_cjs15();
    var util_middleware_1 = require_dist_cjs10();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthMiddleware.js
var require_awsAuthMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/awsAuthMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response2) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response2) ? (_b = (_a = response2.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response2.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      }
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_awsAuthConfiguration(), exports);
    tslib_1.__exportStar(require_awsAuthMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports, module2) {
    module2.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {}
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPrefix = exports.useDefaultPartitionInfo = exports.setPartitionInfo = exports.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var selectedPartitionsInfo = partitions_json_1.default;
    var selectedUserAgentPrefix = "";
    var partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports.partition = partition;
    var setPartitionInfo = (partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    };
    exports.setPartitionInfo = setPartitionInfo;
    var useDefaultPartitionInfo = () => {
      (0, exports.setPartitionInfo)(partitions_json_1.default, "");
    };
    exports.useDefaultPartitionInfo = useDefaultPartitionInfo;
    var getUserAgentPrefix = () => selectedUserAgentPrefix;
    exports.getUserAgentPrefix = getUserAgentPrefix;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports.isIpAddress = isIpAddress;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debugId = void 0;
    exports.debugId = "endpoints";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports.toDebugString = toDebugString;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports);
    tslib_1.__exportStar(require_toDebugString(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports.EndpointError = EndpointError;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types2 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports);
    tslib_1.__exportStar(require_EndpointRuleObject2(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject2(), exports);
    tslib_1.__exportStar(require_RuleSetObject2(), exports);
    tslib_1.__exportStar(require_TreeRuleObject2(), exports);
    tslib_1.__exportStar(require_shared2(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports.isValidHostLabel = isValidHostLabel;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports.parseArn = parseArn;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports);
    tslib_1.__exportStar(require_parseArn(), exports);
    tslib_1.__exportStar(require_partition(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports.booleanEquals = booleanEquals;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttrPathList = void 0;
    var types_1 = require_types2();
    var getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports.getAttrPathList = getAttrPathList;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttr = void 0;
    var types_1 = require_types2();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports.getAttr = getAttr;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSet = void 0;
    var isSet = (value) => value != null;
    exports.isSet = isSet;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.not = void 0;
    var not = (value) => !value;
    exports.not = not;
  }
});

// node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpAuthLocation = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports, "HttpAuthLocation", { enumerable: true, get: function() {
      return types_1.HttpAuthLocation;
    } });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/blob/blob-types.js
var require_blob_types = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/blob/blob-types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/checksum.js
var require_checksum2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/connection.js
var require_connection2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/connection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/dns.js
var require_dns = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/dns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HostAddressType = void 0;
    var HostAddressType;
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType = exports.HostAddressType || (exports.HostAddressType = {}));
  }
});

// node_modules/@aws-sdk/types/dist-cjs/encode.js
var require_encode2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/encode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointURLScheme = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports, "EndpointURLScheme", { enumerable: true, get: function() {
      return types_1.EndpointURLScheme;
    } });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js
var require_AnonymousIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js
var require_AwsCredentialIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js
var require_Identity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js
var require_LoginIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js
var require_TokenIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/index.js
var require_identity3 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_Identity(), exports);
    tslib_1.__exportStar(require_LoginIdentity(), exports);
    tslib_1.__exportStar(require_TokenIdentity(), exports);
  }
});

// node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/request.js
var require_request = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/retry.js
var require_retry2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequestHandlerProtocol = void 0;
    var types_1 = require_dist_cjs();
    Object.defineProperty(exports, "RequestHandlerProtocol", { enumerable: true, get: function() {
      return types_1.RequestHandlerProtocol;
    } });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/uri.js
var require_uri2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort2(), exports);
    tslib_1.__exportStar(require_auth2(), exports);
    tslib_1.__exportStar(require_blob_types(), exports);
    tslib_1.__exportStar(require_checksum2(), exports);
    tslib_1.__exportStar(require_client2(), exports);
    tslib_1.__exportStar(require_command2(), exports);
    tslib_1.__exportStar(require_connection2(), exports);
    tslib_1.__exportStar(require_credentials(), exports);
    tslib_1.__exportStar(require_crypto2(), exports);
    tslib_1.__exportStar(require_dns(), exports);
    tslib_1.__exportStar(require_encode2(), exports);
    tslib_1.__exportStar(require_endpoint2(), exports);
    tslib_1.__exportStar(require_eventStream2(), exports);
    tslib_1.__exportStar(require_http2(), exports);
    tslib_1.__exportStar(require_identity3(), exports);
    tslib_1.__exportStar(require_logger2(), exports);
    tslib_1.__exportStar(require_middleware2(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    tslib_1.__exportStar(require_profile2(), exports);
    tslib_1.__exportStar(require_request(), exports);
    tslib_1.__exportStar(require_response2(), exports);
    tslib_1.__exportStar(require_retry2(), exports);
    tslib_1.__exportStar(require_serde2(), exports);
    tslib_1.__exportStar(require_shapes2(), exports);
    tslib_1.__exportStar(require_signature2(), exports);
    tslib_1.__exportStar(require_stream2(), exports);
    tslib_1.__exportStar(require_token(), exports);
    tslib_1.__exportStar(require_transfer2(), exports);
    tslib_1.__exportStar(require_uri2(), exports);
    tslib_1.__exportStar(require_util2(), exports);
    tslib_1.__exportStar(require_waiter2(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseURL = void 0;
    var types_1 = require_dist_cjs17();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports.parseURL = parseURL;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports.stringEquals = stringEquals;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports.substring = substring;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports.uriEncode = uriEncode;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports);
    tslib_1.__exportStar(require_getAttr(), exports);
    tslib_1.__exportStar(require_isSet(), exports);
    tslib_1.__exportStar(require_isValidHostLabel(), exports);
    tslib_1.__exportStar(require_not(), exports);
    tslib_1.__exportStar(require_parseURL(), exports);
    tslib_1.__exportStar(require_stringEquals(), exports);
    tslib_1.__exportStar(require_substring(), exports);
    tslib_1.__exportStar(require_uriEncode(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports.evaluateTemplate = evaluateTemplate;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports.getReferenceValue = getReferenceValue;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateExpression = void 0;
    var types_1 = require_types2();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports.evaluateExpression = evaluateExpression;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports.callFunction = callFunction;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types2();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports.evaluateCondition = evaluateCondition;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports.evaluateConditions = evaluateConditions;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointHeaders = void 0;
    var types_1 = require_types2();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports.getEndpointHeaders = getEndpointHeaders;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperty = void 0;
    var types_1 = require_types2();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports.getEndpointProperty = getEndpointProperty;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports.getEndpointProperties = getEndpointProperties;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointUrl = void 0;
    var types_1 = require_types2();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports.getEndpointUrl = getEndpointUrl;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions)
      };
    };
    exports.evaluateEndpointRule = evaluateEndpointRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateErrorRule = void 0;
    var types_1 = require_types2();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports.evaluateErrorRule = evaluateErrorRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports.evaluateTreeRule = evaluateTreeRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateRules = void 0;
    var types_1 = require_types2();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports.evaluateRules = evaluateRules;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types2();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, `${debug_1.debugId} Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, `${debug_1.debugId} Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports.resolveEndpoint = resolveEndpoint;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports);
    tslib_1.__exportStar(require_isIpAddress(), exports);
    tslib_1.__exportStar(require_resolveEndpoint(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_CHAR = exports.UA_VALUE_ESCAPE_REGEX = exports.UA_NAME_ESCAPE_REGEX = exports.UA_NAME_SEPARATOR = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_NAME_SEPARATOR = "/";
    exports.UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    exports.UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    exports.UA_ESCAPE_CHAR = "-";
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var protocol_http_1 = require_dist_cjs2();
    var constants_1 = require_constants2();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const prefix = (0, util_endpoints_1.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = (userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(constants_1.UA_NAME_SEPARATOR).map((part) => part.replace(constants_1.UA_NAME_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR)).join(constants_1.UA_NAME_SEPARATOR);
      const version2 = (_a = userAgentPair[1]) === null || _a === void 0 ? void 0 : _a.replace(constants_1.UA_VALUE_ESCAPE_REGEX, constants_1.UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(constants_1.UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    };
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// node_modules/@smithy/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "node_modules/@smithy/util-config-provider/dist-cjs/booleanSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports.booleanSelector = booleanSelector;
  }
});

// node_modules/@smithy/util-config-provider/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@smithy/util-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports);
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs20();
    exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs20();
    exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs10();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs10();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/endpointsConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/config.js
var require_config2 = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports.getRealRegion = getRealRegion;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports.getResolvedPartition = getResolvedPartition;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports.getRegionInfo = getRegionInfo;
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/regionInfo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  }
});

// node_modules/@smithy/config-resolver/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@smithy/config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  }
});

// node_modules/@smithy/middleware-content-length/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@smithy/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports.DOT_PATTERN = /\./;
    exports.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports.isArnBucketName = isArnBucketName;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports);
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports.createConfigValueProvider = createConfigValueProvider;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveParams = exports.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports.resolveParams = resolveParams;
  }
});

// node_modules/@smithy/querystring-parser/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@smithy/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  }
});

// node_modules/@smithy/url-parser/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@smithy/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs23();
    var parseUrl = (url) => {
      if (typeof url === "string") {
        return (0, exports.parseUrl)(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports.parseUrl = parseUrl;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs24();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports.toEndpointV1 = toEndpointV1;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports);
    tslib_1.__exportStar(require_toEndpointV1(), exports);
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports.endpointMiddleware = endpointMiddleware;
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response: response2 } = await next(args);
      try {
        const parsed = await deserializer(response2, options);
        return {
          response: response2,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response2
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error.message += "\n  " + hint;
        }
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// node_modules/@smithy/middleware-serde/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@smithy/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs25();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports.endpointMiddlewareOptions);
      }
    });
    exports.getEndpointPlugin = getEndpointPlugin;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs10();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports.resolveEndpointConfig = resolveEndpointConfig;
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/types.js
var require_types3 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@smithy/middleware-endpoint/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports);
    tslib_1.__exportStar(require_endpointMiddleware(), exports);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports);
    tslib_1.__exportStar(require_types3(), exports);
  }
});

// node_modules/@smithy/util-retry/dist-cjs/config.js
var require_config3 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// node_modules/@smithy/service-error-classification/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "node_modules/@smithy/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isServerError = exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants3();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports.isServerError = isServerError;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs27();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response2) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response2)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// node_modules/@smithy/util-retry/dist-cjs/defaultRetryBackoffStrategy.js
var require_defaultRetryBackoffStrategy = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants4();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/defaultRetryToken.js
var require_defaultRetryToken = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/defaultRetryToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDefaultRetryToken = void 0;
    var constants_1 = require_constants4();
    var createDefaultRetryToken = ({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => Math.min(constants_1.MAXIMUM_RETRY_DELAY, retryDelay);
      const getRetryCost = () => retryCost;
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    };
    exports.createDefaultRetryToken = createDefaultRetryToken;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var config_1 = require_config3();
    var constants_1 = require_constants4();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.capacity = constants_1.INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return (0, defaultRetryToken_1.createDefaultRetryToken)({
          retryDelay: constants_1.DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE);
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return (0, defaultRetryToken_1.createDefaultRetryToken)({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        var _a;
        this.capacity = Math.max(constants_1.INITIAL_RETRY_TOKENS, this.capacity + ((_a = token.getRetryCost()) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT));
      }
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? constants_1.TIMEOUT_RETRY_COST : constants_1.RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config3();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/ConfiguredRetryStrategy.js
var require_ConfiguredRetryStrategy = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/ConfiguredRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConfiguredRetryStrategy = void 0;
    var constants_1 = require_constants4();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var ConfiguredRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttempts, computeNextBackoffDelay = constants_1.DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
          this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        } else {
          this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
      }
    };
    exports.ConfiguredRetryStrategy = ConfiguredRetryStrategy;
  }
});

// node_modules/@smithy/util-retry/dist-cjs/types.js
var require_types4 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/util-retry/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@smithy/util-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_ConfiguredRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config3(), exports);
    tslib_1.__exportStar(require_constants4(), exports);
    tslib_1.__exportStar(require_types4(), exports);
  }
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    "use strict";
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    "use strict";
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    "use strict";
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    "use strict";
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    "use strict";
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    "use strict";
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    "use strict";
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    "use strict";
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    "use strict";
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    "use strict";
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    "use strict";
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    "use strict";
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    "use strict";
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    "use strict";
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    "use strict";
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs28();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/delayDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs28();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/retryDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs27();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/util.js
var require_util3 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports.asSdkError = asSdkError;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy2 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var service_error_classification_1 = require_dist_cjs27();
    var util_retry_1 = require_dist_cjs28();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util3();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response: response2, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response2);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response: response2, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response2) => {
      if (!protocol_http_1.HttpResponse.isInstance(response2))
        return;
      const retryAfterHeaderName = Object.keys(response2.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response2.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy2 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs28();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response2) => {
            this.rateLimiter.updateClientSendingRate(response2);
          }
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs10();
    var util_retry_1 = require_dist_cjs28();
    exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports.CONFIG_RETRY_MODE = "retry_mode";
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var util_retry_1 = require_dist_cjs28();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/retryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRetryAfterHint = exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var service_error_classification_1 = require_dist_cjs27();
    var util_retry_1 = require_dist_cjs28();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util3();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response: response2, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response: response2, output };
          } catch (e) {
            const retryErrorInfo = getRetryErrorInfo(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    exports.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    var getRetryErrorInfo = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, service_error_classification_1.isTransientError)(error))
        return "TRANSIENT";
      if ((0, service_error_classification_1.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    exports.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      }
    });
    exports.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response2) => {
      if (!protocol_http_1.HttpResponse.isInstance(response2))
        return;
      const retryAfterHeaderName = Object.keys(response2.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response2.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports.getRetryAfterHint = getRetryAfterHint;
  }
});

// node_modules/@smithy/middleware-retry/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@smithy/middleware-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports);
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/NoOpLogger.js
var require_NoOpLogger = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/NoOpLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    exports.NoOpLogger = NoOpLogger;
  }
});

// node_modules/@smithy/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "node_modules/@smithy/middleware-stack/dist-cjs/MiddlewareStack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ": " + (mw.tags || []).join(",");
          });
        },
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler2 = middleware(handler2, context);
          }
          return handler2;
        }
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@smithy/middleware-stack/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@smithy/middleware-stack/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/client.js
var require_client3 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs30();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler2(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  }
});

// node_modules/@smithy/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/fromBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports.fromBase64 = fromBase64;
  }
});

// node_modules/@smithy/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/toBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports.toBase64 = toBase64;
  }
});

// node_modules/@smithy/util-base64/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@smithy/util-base64/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports);
    tslib_1.__exportStar(require_toBase64(), exports);
  }
});

// node_modules/@smithy/util-stream/dist-cjs/blob/transforms.js
var require_transforms = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/blob/transforms.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transformFromString = exports.transformToString = void 0;
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var Uint8ArrayBlobAdapter_1 = require_Uint8ArrayBlobAdapter();
    function transformToString(payload, encoding = "utf-8") {
      if (encoding === "base64") {
        return (0, util_base64_1.toBase64)(payload);
      }
      return (0, util_utf8_1.toUtf8)(payload);
    }
    exports.transformToString = transformToString;
    function transformFromString(str, encoding) {
      if (encoding === "base64") {
        return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_base64_1.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter_1.Uint8ArrayBlobAdapter.mutate((0, util_utf8_1.fromUtf8)(str));
    }
    exports.transformFromString = transformFromString;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/blob/Uint8ArrayBlobAdapter.js
var require_Uint8ArrayBlobAdapter = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/blob/Uint8ArrayBlobAdapter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Uint8ArrayBlobAdapter = void 0;
    var transforms_1 = require_transforms();
    var Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return (0, transforms_1.transformFromString)(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      transformToString(encoding = "utf-8") {
        return (0, transforms_1.transformToString)(this, encoding);
      }
    };
    exports.Uint8ArrayBlobAdapter = Uint8ArrayBlobAdapter;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js
var require_getAwsChunkedEncodingStream = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAwsChunkedEncodingStream = void 0;
    var stream_1 = require("stream");
    var getAwsChunkedEncodingStream = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream;
  }
});

// node_modules/@smithy/querystring-builder/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@smithy/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs14();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports.buildQueryString = buildQueryString;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      const timeoutId = setTimeout(() => {
        request.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
          name: "TimeoutError"
        }));
      }, timeoutInMs);
      request.on("socket", (socket) => {
        if (socket.connecting) {
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        } else {
          clearTimeout(timeoutId);
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/set-socket-keep-alive.js
var require_set_socket_keep_alive = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/set-socket-keep-alive.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketKeepAlive = void 0;
    var setSocketKeepAlive = (request, { keepAlive, keepAliveMsecs }) => {
      if (keepAlive !== true) {
        return;
      }
      request.on("socket", (socket) => {
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
      });
    };
    exports.setSocketKeepAlive = setSocketKeepAlive;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require("stream");
    var MIN_WAIT_TIME = 1e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      var _a;
      const headers = (_a = request.headers) !== null && _a !== void 0 ? _a : {};
      const expect = headers["Expect"] || headers["expect"];
      let timeoutId = -1;
      let hasError = false;
      if (expect === "100-continue") {
        await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on("continue", () => {
              clearTimeout(timeoutId);
              resolve();
            });
            httpRequest.on("error", () => {
              hasError = true;
              clearTimeout(timeoutId);
              resolve();
            });
          })
        ]);
      }
      if (!hasError) {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = exports.DEFAULT_REQUEST_TIMEOUT = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var querystring_builder_1 = require_dist_cjs32();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants5();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_keep_alive_1 = require_set_socket_keep_alive();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    exports.DEFAULT_REQUEST_TIMEOUT = 0;
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout !== null && requestTimeout !== void 0 ? requestTimeout : socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          var _a, _b;
          let writeRequestBodyPromise = void 0;
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          let auth = void 0;
          if (request.username != null || request.password != null) {
            const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
            const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
            auth = `${username}:${password}`;
          }
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
            auth
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.requestTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            (0, set_socket_keep_alive_1.setSocketKeepAlive)(req, {
              keepAlive: httpAgent.keepAlive,
              keepAliveMsecs: httpAgent.keepAliveMsecs
            });
          }
          writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, this.config.requestTimeout).catch(_reject);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-pool.js
var require_node_http2_connection_pool = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-pool.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2ConnectionPool = void 0;
    var NodeHttp2ConnectionPool = class {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions !== null && sessions !== void 0 ? sessions : [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    exports.NodeHttp2ConnectionPool = NodeHttp2ConnectionPool;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-manager.js
var require_node_http2_connection_manager = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/node-http2-connection-manager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2ConnectionManager = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var http2_1 = tslib_1.__importDefault(require("http2"));
    var node_http2_connection_pool_1 = require_node_http2_connection_pool();
    var NodeHttp2ConnectionManager = class {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrency must be greater than zero.");
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = http2_1.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
            if (err) {
              throw new Error("Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString());
            }
          });
        }
        session.unref();
        const destroySessionCb = () => {
          session.destroy();
          this.deleteSession(url, session);
        };
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new node_http2_connection_pool_1.NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) === null || _a === void 0 ? void 0 : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    exports.NodeHttp2ConnectionManager = NodeHttp2ConnectionManager;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var querystring_builder_1 = require_dist_cjs32();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var node_http2_connection_manager_1 = require_node_http2_connection_manager();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new node_http2_connection_manager_1.NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject) => {
          var _a, _b, _c;
          let fulfilled = false;
          let writeRequestBodyPromise = void 0;
          const resolve = async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const { hostname, method, port, protocol, query } = request;
          let auth = "";
          if (request.username != null || request.password != null) {
            const username = (_a = request.username) !== null && _a !== void 0 ? _a : "";
            const password = (_b = request.password) !== null && _b !== void 0 ? _b : "";
            auth = `${username}:${password}@`;
          }
          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout: (_c = this.config) === null || _c === void 0 ? void 0 : _c.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false
          });
          const rejectWithDestroy = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            reject(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              rejectWithDestroy(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              rejectWithDestroy(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", rejectWithDestroy);
          req.on("aborted", () => {
            rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          writeRequestBodyPromise = (0, write_request_body_1.writeRequestBody)(req, request, requestTimeout);
        });
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports.streamCollector = streamCollector;
  }
});

// node_modules/@smithy/node-http-handler/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@smithy/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js
var require_sdk_stream_mixin = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs33();
    var util_buffer_from_1 = require_dist_cjs12();
    var stream_1 = require("stream");
    var util_1 = require("util");
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new util_1.TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports.sdkStreamMixin = sdkStreamMixin;
  }
});

// node_modules/@smithy/util-stream/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@smithy/util-stream/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Uint8ArrayBlobAdapter(), exports);
    tslib_1.__exportStar(require_getAwsChunkedEncodingStream(), exports);
    tslib_1.__exportStar(require_sdk_stream_mixin(), exports);
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/collect-stream-body.js
var require_collect_stream_body = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/collect-stream-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.collectBody = void 0;
    var util_stream_1 = require_dist_cjs34();
    var collectBody = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return util_stream_1.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return util_stream_1.Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
    exports.collectBody = collectBody;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/command.js
var require_command3 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs30();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/create-aggregated-client.js
var require_create_aggregated_client = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/create-aggregated-client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAggregatedClient = void 0;
    var createAggregatedClient = (commands, Client) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
      }
    };
    exports.createAggregatedClient = createAggregatedClient;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/parse-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logger = exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    };
    exports.logger = {
      warn: console.warn
    };
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/date-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTimeWithOffset = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/exceptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/default-error-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withBaseException = exports.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response2 = new exceptionCtor({
        name: (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.code) || (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response2, parsedBody);
    };
    exports.throwDefaultError = throwDefaultError;
    var withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        (0, exports.throwDefaultError)({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    };
    exports.withBaseException = withBaseException;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/defaults-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/get-array-if-single-item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/get-value-from-text-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/lazy-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class _LazyJsonString extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof _LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new _LazyJsonString(object);
        }
        return new _LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/object-mapping.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.take = exports.convertMap = exports.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    exports.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports.convertMap = convertMap;
    var take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    exports.take = take;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
    var applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    var nonNullish = (_) => _ != null;
    var pass = (_) => _;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/resolve-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
    exports.resolvedPath = resolvedPath;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/ser-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/serde-json.js
var require_serde_json = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/serde-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._json = void 0;
    var _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = (0, exports._json)(obj[key]);
        }
        return target;
      }
      return obj;
    };
    exports._json = _json;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/split-every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  }
});

// node_modules/@smithy/smithy-client/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@smithy/smithy-client/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports);
    tslib_1.__exportStar(require_client3(), exports);
    tslib_1.__exportStar(require_collect_stream_body(), exports);
    tslib_1.__exportStar(require_command3(), exports);
    tslib_1.__exportStar(require_constants6(), exports);
    tslib_1.__exportStar(require_create_aggregated_client(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_default_error_handler(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_object_mapping(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_resolve_path(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_serde_json(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "chime"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-chime/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-chime/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-chime",
      description: "AWS SDK for JavaScript Chime Client for Node.js, Browser and React Native",
      version: "3.370.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo chime"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.370.0",
        "@aws-sdk/credential-provider-node": "3.370.0",
        "@aws-sdk/middleware-host-header": "3.370.0",
        "@aws-sdk/middleware-logger": "3.370.0",
        "@aws-sdk/middleware-recursion-detection": "3.370.0",
        "@aws-sdk/middleware-signing": "3.370.0",
        "@aws-sdk/middleware-user-agent": "3.370.0",
        "@aws-sdk/types": "3.370.0",
        "@aws-sdk/util-endpoints": "3.370.0",
        "@aws-sdk/util-user-agent-browser": "3.370.0",
        "@aws-sdk/util-user-agent-node": "3.370.0",
        "@smithy/config-resolver": "^1.0.1",
        "@smithy/fetch-http-handler": "^1.0.1",
        "@smithy/hash-node": "^1.0.1",
        "@smithy/invalid-dependency": "^1.0.1",
        "@smithy/middleware-content-length": "^1.0.1",
        "@smithy/middleware-endpoint": "^1.0.2",
        "@smithy/middleware-retry": "^1.0.3",
        "@smithy/middleware-serde": "^1.0.1",
        "@smithy/middleware-stack": "^1.0.1",
        "@smithy/node-config-provider": "^1.0.1",
        "@smithy/node-http-handler": "^1.0.2",
        "@smithy/protocol-http": "^1.1.0",
        "@smithy/smithy-client": "^1.0.3",
        "@smithy/types": "^1.1.0",
        "@smithy/url-parser": "^1.0.1",
        "@smithy/util-base64": "^1.0.1",
        "@smithy/util-body-length-browser": "^1.0.1",
        "@smithy/util-body-length-node": "^1.0.1",
        "@smithy/util-defaults-mode-browser": "^1.0.1",
        "@smithy/util-defaults-mode-node": "^1.0.1",
        "@smithy/util-retry": "^1.0.3",
        "@smithy/util-utf8": "^1.0.1",
        tslib: "^2.5.0",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^1.0.1",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-chime",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-chime"
      }
    };
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.370.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/credential-provider-node": "3.370.0",
        "@aws-sdk/middleware-host-header": "3.370.0",
        "@aws-sdk/middleware-logger": "3.370.0",
        "@aws-sdk/middleware-recursion-detection": "3.370.0",
        "@aws-sdk/middleware-sdk-sts": "3.370.0",
        "@aws-sdk/middleware-signing": "3.370.0",
        "@aws-sdk/middleware-user-agent": "3.370.0",
        "@aws-sdk/types": "3.370.0",
        "@aws-sdk/util-endpoints": "3.370.0",
        "@aws-sdk/util-user-agent-browser": "3.370.0",
        "@aws-sdk/util-user-agent-node": "3.370.0",
        "@smithy/config-resolver": "^1.0.1",
        "@smithy/fetch-http-handler": "^1.0.1",
        "@smithy/hash-node": "^1.0.1",
        "@smithy/invalid-dependency": "^1.0.1",
        "@smithy/middleware-content-length": "^1.0.1",
        "@smithy/middleware-endpoint": "^1.0.2",
        "@smithy/middleware-retry": "^1.0.3",
        "@smithy/middleware-serde": "^1.0.1",
        "@smithy/middleware-stack": "^1.0.1",
        "@smithy/node-config-provider": "^1.0.1",
        "@smithy/node-http-handler": "^1.0.2",
        "@smithy/protocol-http": "^1.1.0",
        "@smithy/smithy-client": "^1.0.3",
        "@smithy/types": "^1.1.0",
        "@smithy/url-parser": "^1.0.1",
        "@smithy/util-base64": "^1.0.1",
        "@smithy/util-body-length-browser": "^1.0.1",
        "@smithy/util-body-length-node": "^1.0.1",
        "@smithy/util-defaults-mode-browser": "^1.0.1",
        "@smithy/util-defaults-mode-node": "^1.0.1",
        "@smithy/util-retry": "^1.0.3",
        "@smithy/util-utf8": "^1.0.1",
        "fast-xml-parser": "4.2.5",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^1.0.1",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var STSServiceException = class _STSServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenResponseFilterSensitiveLog = exports.GetFederationTokenResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports.AssumeRoleResponseFilterSensitiveLog = exports.CredentialsFilterSensitiveLog = exports.InvalidAuthorizationMessageException = exports.IDPCommunicationErrorException = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class _ExpiredTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class _RegionDisabledException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException.prototype);
      }
    };
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
    });
    exports.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util4 = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util4();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    "use strict";
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module2) {
    "use strict";
    var util = require_util4();
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i)) {
              i += 7;
              [entityName, val, i] = readEntityExp(xmlData, i + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i))
              i += 8;
            else if (hasBody && isAttlist(xmlData, i))
              i += 8;
            else if (hasBody && isNotation(xmlData, i))
              i += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    function readEntityExp(xmlData, i) {
      let entityName2 = "";
      for (; i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
        entityName2 += xmlData[i];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i++];
      let val2 = "";
      for (; i < xmlData.length && xmlData[i] !== startChar; i++) {
        val2 += xmlData[i];
      }
      return [entityName2, val2, i];
    }
    function isComment(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module2.exports = readDocType;
  }
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "node_modules/strnum/strnum.js"(exports, module2) {
    "use strict";
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module2) {
    "use strict";
    var util = require_util4();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val2 == void 0)
                val2 = "";
              currentNode.add(this.options.textNodeName, val2);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports.prettify = prettify;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module2) {
    "use strict";
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module2) {
    "use strict";
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                listTagVal += this.j2x(item, level + 1).val;
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level);
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, "", level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "node_modules/fast-xml-parser/src/fxp.js"(exports, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.de_GetSessionTokenCommand = exports.de_GetFederationTokenCommand = exports.de_GetCallerIdentityCommand = exports.de_GetAccessKeyInfoCommand = exports.de_DecodeAuthorizationMessageCommand = exports.de_AssumeRoleWithWebIdentityCommand = exports.de_AssumeRoleWithSAMLCommand = exports.de_AssumeRoleCommand = exports.se_GetSessionTokenCommand = exports.se_GetFederationTokenCommand = exports.se_GetCallerIdentityCommand = exports.se_GetAccessKeyInfoCommand = exports.se_DecodeAuthorizationMessageCommand = exports.se_AssumeRoleWithWebIdentityCommand = exports.se_AssumeRoleWithSAMLCommand = exports.se_AssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_0();
    var STSServiceException_1 = require_STSServiceException();
    var se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_AssumeRoleCommand = se_AssumeRoleCommand;
    var se_AssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_AssumeRoleWithSAMLCommand = se_AssumeRoleWithSAMLCommand;
    var se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_AssumeRoleWithWebIdentityCommand = se_AssumeRoleWithWebIdentityCommand;
    var se_DecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DecodeAuthorizationMessageCommand = se_DecodeAuthorizationMessageCommand;
    var se_GetAccessKeyInfoCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetAccessKeyInfoCommand = se_GetAccessKeyInfoCommand;
    var se_GetCallerIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetCallerIdentityCommand = se_GetCallerIdentityCommand;
    var se_GetFederationTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetFederationTokenCommand = se_GetFederationTokenCommand;
    var se_GetSessionTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetSessionTokenCommand = se_GetSessionTokenCommand;
    var de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_AssumeRoleCommand = de_AssumeRoleCommand;
    var de_AssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_AssumeRoleWithSAMLCommand = de_AssumeRoleWithSAMLCommand;
    var de_AssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_AssumeRoleWithWebIdentityCommand = de_AssumeRoleWithWebIdentityCommand;
    var de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_DecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DecodeAuthorizationMessageCommand = de_DecodeAuthorizationMessageCommand;
    var de_DecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_GetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetAccessKeyInfoCommand = de_GetAccessKeyInfoCommand;
    var de_GetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_GetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetCallerIdentityCommand = de_GetCallerIdentityCommand;
    var de_GetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
    };
    var de_GetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetFederationTokenCommand = de_GetFederationTokenCommand;
    var de_GetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_GetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetSessionTokenCommand = de_GetSessionTokenCommand;
    var de_GetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);
        if (input.TransitiveTagKeys?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var se_AssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var se_DecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var se_GetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var se_GetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var se_GetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_GetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var se_Tag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_AssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var de_Credentials = (output, context) => {
      const contents = {};
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
      }
      return contents;
    };
    var de_DecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {};
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_FederatedUser = (output, context) => {
      const contents = {};
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_GetAccessKeyInfoResponse = (output, context) => {
      const contents = {};
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var de_GetCallerIdentityResponse = (output, context) => {
      const contents = {};
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var de_GetFederationTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = de_FederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var de_GetSessionTokenResponse = (output, context) => {
      const contents = {};
      if (output["Credentials"] !== void 0) {
        contents.Credentials = de_Credentials(output["Credentials"], context);
      }
      return contents;
    };
    var de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidAuthorizationMessageException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var throwDefaultError = (0, smithy_client_1.withBaseException)(STSServiceException_1.STSServiceException);
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class _AssumeRoleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithWebIdentityCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs6();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports.getConfigFilepath = getConfigFilepath;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports.getProfileData = getProfileData;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports.getSsoSessionData = getSsoSessionData;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports.loadSsoSessionData = loadSsoSessionData;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js
var require_mergeConfigFiles = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeConfigFiles = void 0;
    var mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
    exports.mergeConfigFiles = mergeConfigFiles;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var mergeConfigFiles_1 = require_mergeConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return (0, mergeConfigFiles_1.mergeConfigFiles)(parsedFiles.configFile, parsedFiles.credentialsFile);
    };
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/types.js
var require_types5 = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types5(), exports);
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs6();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry3 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs6();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry3();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs6();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports.loadConfig = loadConfig;
  }
});

// node_modules/@smithy/node-config-provider/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@smithy/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs39();
    var url_parser_1 = require_dist_cjs24();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs6();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry3();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/types.js
var require_types6 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@smithy/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types6(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs37();
    var credential_provider_imds_1 = require_dist_cjs40();
    var property_provider_1 = require_dist_cjs6();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs6();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports.fromProcess = fromProcess;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = exports.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs41();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports.isSsoProfile = isSsoProfile;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.370.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/middleware-host-header": "3.370.0",
        "@aws-sdk/middleware-logger": "3.370.0",
        "@aws-sdk/middleware-recursion-detection": "3.370.0",
        "@aws-sdk/middleware-user-agent": "3.370.0",
        "@aws-sdk/types": "3.370.0",
        "@aws-sdk/util-endpoints": "3.370.0",
        "@aws-sdk/util-user-agent-browser": "3.370.0",
        "@aws-sdk/util-user-agent-node": "3.370.0",
        "@smithy/config-resolver": "^1.0.1",
        "@smithy/fetch-http-handler": "^1.0.1",
        "@smithy/hash-node": "^1.0.1",
        "@smithy/invalid-dependency": "^1.0.1",
        "@smithy/middleware-content-length": "^1.0.1",
        "@smithy/middleware-endpoint": "^1.0.2",
        "@smithy/middleware-retry": "^1.0.3",
        "@smithy/middleware-serde": "^1.0.1",
        "@smithy/middleware-stack": "^1.0.1",
        "@smithy/node-config-provider": "^1.0.1",
        "@smithy/node-http-handler": "^1.0.2",
        "@smithy/protocol-http": "^1.1.0",
        "@smithy/smithy-client": "^1.0.3",
        "@smithy/types": "^1.1.0",
        "@smithy/url-parser": "^1.0.1",
        "@smithy/util-base64": "^1.0.1",
        "@smithy/util-body-length-browser": "^1.0.1",
        "@smithy/util-body-length-node": "^1.0.1",
        "@smithy/util-defaults-mode-browser": "^1.0.1",
        "@smithy/util-defaults-mode-node": "^1.0.1",
        "@smithy/util-retry": "^1.0.3",
        "@smithy/util-utf8": "^1.0.1",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^1.0.1",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs39();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.0"],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// node_modules/@smithy/hash-node/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@smithy/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs12();
    var util_utf8_1 = require_dist_cjs13();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// node_modules/@smithy/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "node_modules/@smithy/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// node_modules/@smithy/util-body-length-node/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@smithy/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs21();
    var credential_provider_imds_1 = require_dist_cjs40();
    var node_config_provider_1 = require_dist_cjs39();
    var property_provider_1 = require_dist_cjs6();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var SSOServiceException = class _SSOServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequestFilterSensitiveLog = exports.ListAccountsRequestFilterSensitiveLog = exports.ListAccountRolesRequestFilterSensitiveLog = exports.GetRoleCredentialsResponseFilterSensitiveLog = exports.RoleCredentialsFilterSensitiveLog = exports.GetRoleCredentialsRequestFilterSensitiveLog = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class _InvalidRequestException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class _UnauthorizedException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.de_LogoutCommand = exports.de_ListAccountsCommand = exports.de_ListAccountRolesCommand = exports.de_GetRoleCredentialsCommand = exports.se_LogoutCommand = exports.se_ListAccountsCommand = exports.se_ListAccountRolesCommand = exports.se_GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var models_0_1 = require_models_02();
    var SSOServiceException_1 = require_SSOServiceException();
    var se_GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = (0, smithy_client_1.map)({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_GetRoleCredentialsCommand = se_GetRoleCredentialsCommand;
    var se_ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAccountRolesCommand = se_ListAccountRolesCommand;
    var se_ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAccountsCommand = se_ListAccountsCommand;
    var se_LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_LogoutCommand = se_LogoutCommand;
    var de_GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoleCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        roleCredentials: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetRoleCredentialsCommand = de_GetRoleCredentialsCommand;
    var de_GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountRolesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        nextToken: smithy_client_1.expectString,
        roleList: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountRolesCommand = de_ListAccountRolesCommand;
    var de_ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        accountList: smithy_client_1._json,
        nextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountsCommand = de_ListAccountsCommand;
    var de_ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_LogoutCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_LogoutCommand = de_LogoutCommand;
    var de_LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(SSOServiceException_1.SSOServiceException);
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class _ListAccountRolesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class _ListAccountsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class _LogoutCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var commands = {
      GetRoleCredentialsCommand: GetRoleCredentialsCommand_1.GetRoleCredentialsCommand,
      ListAccountRolesCommand: ListAccountRolesCommand_1.ListAccountRolesCommand,
      ListAccountsCommand: ListAccountsCommand_1.ListAccountsCommand,
      LogoutCommand: LogoutCommand_1.LogoutCommand
    };
    var SSO = class extends SSOClient_1.SSOClient {
    };
    exports.SSO = SSO;
    (0, smithy_client_1.createAggregatedClient)(commands, SSO);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    tslib_1.__exportStar(require_models(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/constants.js
var require_constants8 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REFRESH_MESSAGE = exports.EXPIRE_WINDOW_MS = void 0;
    exports.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters4 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssooidc"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package4 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.370.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/middleware-host-header": "3.370.0",
        "@aws-sdk/middleware-logger": "3.370.0",
        "@aws-sdk/middleware-recursion-detection": "3.370.0",
        "@aws-sdk/middleware-user-agent": "3.370.0",
        "@aws-sdk/types": "3.370.0",
        "@aws-sdk/util-endpoints": "3.370.0",
        "@aws-sdk/util-user-agent-browser": "3.370.0",
        "@aws-sdk/util-user-agent-node": "3.370.0",
        "@smithy/config-resolver": "^1.0.1",
        "@smithy/fetch-http-handler": "^1.0.1",
        "@smithy/hash-node": "^1.0.1",
        "@smithy/invalid-dependency": "^1.0.1",
        "@smithy/middleware-content-length": "^1.0.1",
        "@smithy/middleware-endpoint": "^1.0.2",
        "@smithy/middleware-retry": "^1.0.3",
        "@smithy/middleware-serde": "^1.0.1",
        "@smithy/middleware-stack": "^1.0.1",
        "@smithy/node-config-provider": "^1.0.1",
        "@smithy/node-http-handler": "^1.0.2",
        "@smithy/protocol-http": "^1.1.0",
        "@smithy/smithy-client": "^1.0.3",
        "@smithy/types": "^1.1.0",
        "@smithy/url-parser": "^1.0.1",
        "@smithy/util-base64": "^1.0.1",
        "@smithy/util-body-length-browser": "^1.0.1",
        "@smithy/util-body-length-node": "^1.0.1",
        "@smithy/util-defaults-mode-browser": "^1.0.1",
        "@smithy/util-defaults-mode-node": "^1.0.1",
        "@smithy/util-retry": "^1.0.3",
        "@smithy/util-utf8": "^1.0.1",
        tslib: "^2.5.0"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^1.0.1",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO OIDC",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js
var require_SSOOIDCClient = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters4();
    var runtimeConfig_1 = require_runtimeConfig2();
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOOIDCClient = SSOOIDCClient;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js
var require_SSOOIDCServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var SSOOIDCServiceException = class _SSOOIDCServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
    exports.SSOOIDCServiceException = SSOOIDCServiceException;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidClientMetadataException = exports.UnsupportedGrantTypeException = exports.UnauthorizedClientException = exports.SlowDownException = exports.InvalidScopeException = exports.InvalidRequestException = exports.InvalidGrantException = exports.InvalidClientException = exports.InternalServerException = exports.ExpiredTokenException = exports.AuthorizationPendingException = exports.AccessDeniedException = void 0;
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class _InternalServerException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InternalServerException = InternalServerException;
    var InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidGrantException = InvalidGrantException;
    var InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class _SlowDownException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientMetadataException = InvalidClientMetadataException;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson12 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.de_StartDeviceAuthorizationCommand = exports.de_RegisterClientCommand = exports.de_CreateTokenCommand = exports.se_StartDeviceAuthorizationCommand = exports.se_RegisterClientCommand = exports.se_CreateTokenCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var models_0_1 = require_models_03();
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var se_CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateTokenCommand = se_CreateTokenCommand;
    var se_RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        clientName: [],
        clientType: [],
        scopes: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_RegisterClientCommand = se_RegisterClientCommand;
    var se_StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        clientId: [],
        clientSecret: [],
        startUrl: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_StartDeviceAuthorizationCommand = se_StartDeviceAuthorizationCommand;
    var de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateTokenCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        accessToken: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        idToken: smithy_client_1.expectString,
        refreshToken: smithy_client_1.expectString,
        tokenType: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateTokenCommand = de_CreateTokenCommand;
    var de_CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegisterClientCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        authorizationEndpoint: smithy_client_1.expectString,
        clientId: smithy_client_1.expectString,
        clientIdIssuedAt: smithy_client_1.expectLong,
        clientSecret: smithy_client_1.expectString,
        clientSecretExpiresAt: smithy_client_1.expectLong,
        tokenEndpoint: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_RegisterClientCommand = de_RegisterClientCommand;
    var de_RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        deviceCode: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        interval: smithy_client_1.expectInt32,
        userCode: smithy_client_1.expectString,
        verificationUri: smithy_client_1.expectString,
        verificationUriComplete: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_StartDeviceAuthorizationCommand = de_StartDeviceAuthorizationCommand;
    var de_StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(SSOOIDCServiceException_1.SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js
var require_CreateTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateTokenCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson12();
    var CreateTokenCommand = class _CreateTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateTokenCommand)(output, context);
      }
    };
    exports.CreateTokenCommand = CreateTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js
var require_RegisterClientCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterClientCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson12();
    var RegisterClientCommand = class _RegisterClientCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RegisterClientCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RegisterClientCommand)(output, context);
      }
    };
    exports.RegisterClientCommand = RegisterClientCommand;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js
var require_StartDeviceAuthorizationCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDeviceAuthorizationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson12();
    var StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_StartDeviceAuthorizationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_StartDeviceAuthorizationCommand)(output, context);
      }
    };
    exports.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js
var require_SSOOIDC = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDC = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var CreateTokenCommand_1 = require_CreateTokenCommand();
    var RegisterClientCommand_1 = require_RegisterClientCommand();
    var StartDeviceAuthorizationCommand_1 = require_StartDeviceAuthorizationCommand();
    var SSOOIDCClient_1 = require_SSOOIDCClient();
    var commands = {
      CreateTokenCommand: CreateTokenCommand_1.CreateTokenCommand,
      RegisterClientCommand: RegisterClientCommand_1.RegisterClientCommand,
      StartDeviceAuthorizationCommand: StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand
    };
    var SSOOIDC = class extends SSOOIDCClient_1.SSOOIDCClient {
    };
    exports.SSOOIDC = SSOOIDC;
    (0, smithy_client_1.createAggregatedClient)(commands, SSOOIDC);
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CreateTokenCommand(), exports);
    tslib_1.__exportStar(require_RegisterClientCommand(), exports);
    tslib_1.__exportStar(require_StartDeviceAuthorizationCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOOIDCClient(), exports);
    tslib_1.__exportStar(require_SSOOIDC(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    Object.defineProperty(exports, "SSOOIDCServiceException", { enumerable: true, get: function() {
      return SSOOIDCServiceException_1.SSOOIDCServiceException;
    } });
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js
var require_getSsoOidcClient = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoOidcClient = void 0;
    var client_sso_oidc_1 = require_dist_cjs47();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports.getSsoOidcClient = getSsoOidcClient;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js
var require_getNewSsoOidcToken = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNewSsoOidcToken = void 0;
    var client_sso_oidc_1 = require_dist_cjs47();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js
var require_validateTokenExpiry = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs6();
    var constants_1 = require_constants8();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenExpiry = validateTokenExpiry;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js
var require_validateTokenKey = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs6();
    var constants_1 = require_constants8();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenKey = validateTokenKey;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js
var require_writeSSOTokenToFile = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var fs_1 = require("fs");
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js
var require_fromSso = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSso = void 0;
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var constants_1 = require_constants8();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports.fromSso = fromSso;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js
var require_nodeProvider = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports.nodeProvider = nodeProvider;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSso(), exports);
    tslib_1.__exportStar(require_fromStatic3(), exports);
    tslib_1.__exportStar(require_nodeProvider(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs46();
    var token_providers_1 = require_dist_cjs48();
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs6();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports.fromSSO = fromSSO;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types7 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types7(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs49();
    var credential_provider_sso_2 = require_dist_cjs49();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs6();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
    exports.fromTokenFile = fromTokenFile;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs50();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs6();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports.resolveProfileData = resolveProfileData;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports.fromIni = fromIni;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs40();
    var property_provider_1 = require_dist_cjs6();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs37();
    var credential_provider_ini_1 = require_dist_cjs51();
    var credential_provider_process_1 = require_dist_cjs41();
    var credential_provider_sso_1 = require_dist_cjs49();
    var credential_provider_web_identity_1 = require_dist_cjs50();
    var property_provider_1 = require_dist_cjs6();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports.defaultProvider = defaultProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var F = "required";
    var G = "type";
    var H = "fn";
    var I = "argv";
    var J = "ref";
    var a = false;
    var b = true;
    var c = "booleanEquals";
    var d = "tree";
    var e = "stringEquals";
    var f = "sigv4";
    var g = "sts";
    var h = "us-east-1";
    var i = "endpoint";
    var j = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var k = "error";
    var l = "getAttr";
    var m = { [F]: false, [G]: "String" };
    var n = { [F]: true, "default": false, [G]: "Boolean" };
    var o = { [J]: "Endpoint" };
    var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    var q = { [J]: "Region" };
    var r = { [H]: "aws.partition", [I]: [q], "assign": "PartitionResult" };
    var s = { [J]: "UseFIPS" };
    var t = { [J]: "UseDualStack" };
    var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": f, "signingName": g, "signingRegion": h }] }, "headers": {} };
    var v = {};
    var w = { "conditions": [{ [H]: e, [I]: [q, "aws-global"] }], [i]: u, [G]: i };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: c, [I]: [true, { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] }] };
    var A = { [J]: "PartitionResult" };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
    var C = [{ [H]: "isSet", [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], [G]: d, rules: [{ conditions: [{ [H]: e, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: i }, w, { conditions: [{ [H]: e, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, h] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-east-2"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-west-1"] }], endpoint: u, [G]: i }, { conditions: [{ [H]: e, [I]: [q, "us-west-2"] }], endpoint: u, [G]: i }, { endpoint: { url: j, properties: { authSchemes: [{ name: f, signingName: g, signingRegion: "{Region}" }] }, headers: v }, [G]: i }] }, { conditions: C, [G]: d, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { [G]: d, rules: [{ conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: i }] }] }, { [G]: d, rules: [{ conditions: [p], [G]: d, rules: [{ conditions: [r], [G]: d, rules: [{ conditions: [x, y], [G]: d, rules: [{ conditions: [z, B], [G]: d, rules: [{ [G]: d, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }] }, { conditions: D, [G]: d, rules: [{ conditions: [z], [G]: d, rules: [{ [G]: d, rules: [{ conditions: [{ [H]: e, [I]: ["aws-us-gov", { [H]: l, [I]: [A, "name"] }] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: i }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }] }, { conditions: E, [G]: d, rules: [{ conditions: [B], [G]: d, rules: [{ [G]: d, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: i }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }] }, { [G]: d, rules: [w, { endpoint: { url: j, properties: v, headers: v }, [G]: i }] }] }] }, { error: "Invalid Configuration: Missing Region", [G]: k }] }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_sdk_sts_1 = require_dist_cjs36();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig3();
    var STSClient = class _STSClient extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: _STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithSAMLCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecodeAuthorizationMessageCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyInfoCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCallerIdentityCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class _GetCallerIdentityCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFederationTokenCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class _GetFederationTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenCommand = exports.$Command = void 0;
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class _GetSessionTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STS = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var commands = {
      AssumeRoleCommand: AssumeRoleCommand_1.AssumeRoleCommand,
      AssumeRoleWithSAMLCommand: AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand: AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand: DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand: GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand,
      GetCallerIdentityCommand: GetCallerIdentityCommand_1.GetCallerIdentityCommand,
      GetFederationTokenCommand: GetFederationTokenCommand_1.GetFederationTokenCommand,
      GetSessionTokenCommand: GetSessionTokenCommand_1.GetSessionTokenCommand
    };
    var STS = class extends STSClient_1.STSClient {
    };
    exports.STS = STS;
    (0, smithy_client_1.createAggregatedClient)(commands, STS);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var w = "required";
    var x = "fn";
    var y = "argv";
    var z = "ref";
    var a = false;
    var b = "isSet";
    var c = "tree";
    var d = "booleanEquals";
    var e = "error";
    var f = "endpoint";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [w]: false, "type": "String" };
    var j = { [w]: true, "default": false, "type": "Boolean" };
    var k = { [z]: "Endpoint" };
    var l = { [x]: d, [y]: [{ [z]: "UseFIPS" }, true] };
    var m = { [z]: "UseFIPS" };
    var n = { [x]: d, [y]: [{ [z]: "UseDualStack" }, true] };
    var o = { [z]: "UseDualStack" };
    var p = {};
    var q = { [z]: g };
    var r = { [x]: d, [y]: [true, { [x]: h, [y]: [q, "supportsFIPS"] }] };
    var s = { [x]: d, [y]: [true, { [x]: h, [y]: [q, "supportsDualStack"] }] };
    var t = [l];
    var u = [n];
    var v = [{ [z]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [x]: b, [y]: [k] }], type: c, rules: [{ conditions: t, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: e }, { type: c, rules: [{ conditions: u, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: e }, { endpoint: { url: k, properties: p, headers: p }, type: f }] }] }, { type: c, rules: [{ conditions: [{ [x]: b, [y]: v }], type: c, rules: [{ conditions: [{ [x]: "aws.partition", [y]: v, assign: g }], type: c, rules: [{ conditions: [{ [x]: "stringEquals", [y]: [{ [x]: h, [y]: [q, "name"] }, "aws"] }, { [x]: d, [y]: [m, a] }, { [x]: d, [y]: [o, a] }], endpoint: { url: "https://chime.us-east-1.amazonaws.com", properties: { authSchemes: [{ name: "sigv4", signingName: "chime", signingRegion: "us-east-1" }] }, headers: p }, type: f }, { conditions: [l, n], type: c, rules: [{ conditions: [r, s], type: c, rules: [{ type: c, rules: [{ endpoint: { url: "https://chime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: f }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: e }] }, { conditions: t, type: c, rules: [{ conditions: [r], type: c, rules: [{ type: c, rules: [{ endpoint: { url: "https://chime-fips.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: f }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: e }] }, { conditions: u, type: c, rules: [{ conditions: [s], type: c, rules: [{ type: c, rules: [{ endpoint: { url: "https://chime.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: f }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: e }] }, { type: c, rules: [{ endpoint: { url: "https://chime.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: f }] }] }] }, { error: "Invalid Configuration: Missing Region", type: e }] }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2018-05-01",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "Chime",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs53();
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/ChimeClient.js
var require_ChimeClient = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/ChimeClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig4();
    var ChimeClient6 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.ChimeClient = ChimeClient6;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/models/ChimeServiceException.js
var require_ChimeServiceException = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/models/ChimeServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var ChimeServiceException = class _ChimeServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _ChimeServiceException.prototype);
      }
    };
    exports.ChimeServiceException = ChimeServiceException;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/models/models_0.js
var require_models_04 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TranscribeMedicalType = exports.TranscribeMedicalSpecialty = exports.TranscribeMedicalRegion = exports.TranscribeMedicalLanguageCode = exports.TranscribeMedicalContentIdentificationType = exports.EmailStatus = exports.UnprocessableEntityException = exports.VoiceConnectorAwsRegion = exports.RegistrationStatus = exports.InviteStatus = exports.SipRuleTriggerType = exports.MemberType = exports.ProxySessionStatus = exports.NumberSelectionBehavior = exports.GeoMatchLevel = exports.PhoneNumberOrderStatus = exports.OrderedPhoneNumberStatus = exports.MediaPipelineStatus = exports.MediaPipelineSourceType = exports.MediaPipelineSinkType = exports.ConflictException = exports.ChannelMessageType = exports.ChannelMessagePersistenceType = exports.ChannelPrivacy = exports.ChannelMode = exports.Capability = exports.CallingNameStatus = exports.BotType = exports.UserType = exports.PhoneNumberProductType = exports.RoomMembershipRole = exports.ResourceLimitExceededException = exports.UnauthorizedClientException = exports.ThrottledClientException = exports.ServiceUnavailableException = exports.ServiceFailureException = exports.NotFoundException = exports.ForbiddenException = exports.BadRequestException = exports.VideoMuxType = exports.ArtifactsState = exports.ContentMuxType = exports.AudioMuxType = exports.ChannelMembershipType = exports.AppInstanceDataType = exports.License = exports.AccountType = exports.AccountStatus = exports.AccessDeniedException = exports.ErrorCode = void 0;
    exports.SourceConfigurationFilterSensitiveLog = exports.SelectedVideoStreamsFilterSensitiveLog = exports.ChannelModeratorSummaryFilterSensitiveLog = exports.ChannelModeratorFilterSensitiveLog = exports.ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog = exports.ChannelMessageSummaryFilterSensitiveLog = exports.ChannelMessageFilterSensitiveLog = exports.ChannelMembershipSummaryFilterSensitiveLog = exports.ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog = exports.ChannelSummaryFilterSensitiveLog = exports.ChannelMembershipFilterSensitiveLog = exports.ChannelBanSummaryFilterSensitiveLog = exports.ChannelBanFilterSensitiveLog = exports.ChannelFilterSensitiveLog = exports.CandidateAddressFilterSensitiveLog = exports.BotFilterSensitiveLog = exports.BatchUpdateUserRequestFilterSensitiveLog = exports.UpdateUserRequestItemFilterSensitiveLog = exports.BatchUpdatePhoneNumberRequestFilterSensitiveLog = exports.UpdatePhoneNumberRequestItemFilterSensitiveLog = exports.BatchCreateChannelMembershipResponseFilterSensitiveLog = exports.BatchCreateAttendeeResponseFilterSensitiveLog = exports.CreateAttendeeErrorFilterSensitiveLog = exports.BatchCreateAttendeeRequestFilterSensitiveLog = exports.CreateAttendeeRequestItemFilterSensitiveLog = exports.BatchChannelMembershipsFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.AttendeeFilterSensitiveLog = exports.AssociatePhoneNumberWithUserRequestFilterSensitiveLog = exports.AssociatePhoneNumbersWithVoiceConnectorGroupRequestFilterSensitiveLog = exports.AssociatePhoneNumbersWithVoiceConnectorRequestFilterSensitiveLog = exports.AppInstanceUserSummaryFilterSensitiveLog = exports.AppInstanceUserFilterSensitiveLog = exports.AppInstanceStreamingConfigurationFilterSensitiveLog = exports.AppInstanceSummaryFilterSensitiveLog = exports.AppInstanceAdminSummaryFilterSensitiveLog = exports.AppInstanceAdminFilterSensitiveLog = exports.IdentityFilterSensitiveLog = exports.AppInstanceFilterSensitiveLog = exports.AlexaForBusinessMetadataFilterSensitiveLog = exports.AddressFilterSensitiveLog = exports.PhoneNumberType = exports.PhoneNumberStatus = exports.PhoneNumberAssociationName = exports.TranscribeVocabularyFilterMethod = exports.TranscribeRegion = exports.TranscribePartialResultsStability = exports.TranscribeLanguageCode = exports.TranscribeContentRedactionType = exports.TranscribeContentIdentificationType = void 0;
    exports.DescribeChannelResponseFilterSensitiveLog = exports.DescribeAppInstanceUserResponseFilterSensitiveLog = exports.DescribeAppInstanceAdminResponseFilterSensitiveLog = exports.DescribeAppInstanceResponseFilterSensitiveLog = exports.DeleteVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog = exports.CredentialFilterSensitiveLog = exports.CreateUserResponseFilterSensitiveLog = exports.UserFilterSensitiveLog = exports.CreateUserRequestFilterSensitiveLog = exports.CreateSipMediaApplicationCallRequestFilterSensitiveLog = exports.CreateSipMediaApplicationResponseFilterSensitiveLog = exports.SipMediaApplicationFilterSensitiveLog = exports.CreateSipMediaApplicationRequestFilterSensitiveLog = exports.SipMediaApplicationEndpointFilterSensitiveLog = exports.CreateRoomMembershipResponseFilterSensitiveLog = exports.RoomMembershipFilterSensitiveLog = exports.MemberFilterSensitiveLog = exports.CreateRoomResponseFilterSensitiveLog = exports.RoomFilterSensitiveLog = exports.CreateRoomRequestFilterSensitiveLog = exports.CreateProxySessionResponseFilterSensitiveLog = exports.ProxySessionFilterSensitiveLog = exports.ParticipantFilterSensitiveLog = exports.CreateProxySessionRequestFilterSensitiveLog = exports.CreatePhoneNumberOrderResponseFilterSensitiveLog = exports.PhoneNumberOrderFilterSensitiveLog = exports.OrderedPhoneNumberFilterSensitiveLog = exports.CreatePhoneNumberOrderRequestFilterSensitiveLog = exports.CreateMeetingWithAttendeesResponseFilterSensitiveLog = exports.CreateMeetingWithAttendeesRequestFilterSensitiveLog = exports.CreateMeetingDialOutRequestFilterSensitiveLog = exports.CreateMeetingResponseFilterSensitiveLog = exports.MeetingFilterSensitiveLog = exports.CreateMeetingRequestFilterSensitiveLog = exports.MeetingNotificationConfigurationFilterSensitiveLog = exports.CreateMediaCapturePipelineResponseFilterSensitiveLog = exports.MediaCapturePipelineFilterSensitiveLog = exports.CreateMediaCapturePipelineRequestFilterSensitiveLog = exports.CreateChannelModeratorResponseFilterSensitiveLog = exports.CreateChannelMembershipResponseFilterSensitiveLog = exports.CreateChannelBanResponseFilterSensitiveLog = exports.CreateChannelRequestFilterSensitiveLog = exports.CreateBotResponseFilterSensitiveLog = exports.CreateBotRequestFilterSensitiveLog = exports.CreateAttendeeResponseFilterSensitiveLog = exports.CreateAttendeeRequestFilterSensitiveLog = exports.CreateAppInstanceUserRequestFilterSensitiveLog = exports.CreateAppInstanceAdminResponseFilterSensitiveLog = exports.CreateAppInstanceRequestFilterSensitiveLog = exports.ChimeSdkMeetingConfigurationFilterSensitiveLog = void 0;
    exports.GetProxySessionResponseFilterSensitiveLog = exports.GetPhoneNumberSettingsResponseFilterSensitiveLog = exports.GetPhoneNumberOrderResponseFilterSensitiveLog = exports.GetPhoneNumberResponseFilterSensitiveLog = exports.PhoneNumberFilterSensitiveLog = exports.GetMeetingResponseFilterSensitiveLog = exports.GetMediaCapturePipelineResponseFilterSensitiveLog = exports.GetEventsConfigurationResponseFilterSensitiveLog = exports.GetChannelMessageResponseFilterSensitiveLog = exports.GetBotResponseFilterSensitiveLog = exports.GetAttendeeResponseFilterSensitiveLog = exports.GetAppInstanceStreamingConfigurationsResponseFilterSensitiveLog = exports.EventsConfigurationFilterSensitiveLog = exports.EmergencyCallingConfigurationFilterSensitiveLog = exports.DNISEmergencyCallingConfigurationFilterSensitiveLog = exports.DisassociatePhoneNumbersFromVoiceConnectorGroupRequestFilterSensitiveLog = exports.DisassociatePhoneNumbersFromVoiceConnectorRequestFilterSensitiveLog = exports.DescribeChannelModeratorResponseFilterSensitiveLog = exports.DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog = exports.DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog = exports.DescribeChannelMembershipResponseFilterSensitiveLog = exports.DescribeChannelBanResponseFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var ChimeServiceException_1 = require_ChimeServiceException();
    exports.ErrorCode = {
      AccessDenied: "AccessDenied",
      BadRequest: "BadRequest",
      Conflict: "Conflict",
      Forbidden: "Forbidden",
      NotFound: "NotFound",
      PhoneNumberAssociationsExist: "PhoneNumberAssociationsExist",
      PreconditionFailed: "PreconditionFailed",
      ResourceLimitExceeded: "ResourceLimitExceeded",
      ServiceFailure: "ServiceFailure",
      ServiceUnavailable: "ServiceUnavailable",
      Throttled: "Throttled",
      Throttling: "Throttling",
      Unauthorized: "Unauthorized",
      Unprocessable: "Unprocessable",
      VoiceConnectorGroupAssociationsExist: "VoiceConnectorGroupAssociationsExist"
    };
    var AccessDeniedException = class _AccessDeniedException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.AccessDeniedException = AccessDeniedException;
    exports.AccountStatus = {
      Active: "Active",
      Suspended: "Suspended"
    };
    exports.AccountType = {
      EnterpriseDirectory: "EnterpriseDirectory",
      EnterpriseLWA: "EnterpriseLWA",
      EnterpriseOIDC: "EnterpriseOIDC",
      Team: "Team"
    };
    exports.License = {
      Basic: "Basic",
      Plus: "Plus",
      Pro: "Pro",
      ProTrial: "ProTrial"
    };
    exports.AppInstanceDataType = {
      Channel: "Channel",
      ChannelMessage: "ChannelMessage"
    };
    exports.ChannelMembershipType = {
      DEFAULT: "DEFAULT",
      HIDDEN: "HIDDEN"
    };
    exports.AudioMuxType = {
      AudioOnly: "AudioOnly",
      AudioWithActiveSpeakerVideo: "AudioWithActiveSpeakerVideo"
    };
    exports.ContentMuxType = {
      ContentOnly: "ContentOnly"
    };
    exports.ArtifactsState = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    exports.VideoMuxType = {
      VideoOnly: "VideoOnly"
    };
    var BadRequestException = class _BadRequestException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "BadRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BadRequestException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.BadRequestException = BadRequestException;
    var ForbiddenException = class _ForbiddenException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "ForbiddenException",
          $fault: "client",
          ...opts
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ForbiddenException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ForbiddenException = ForbiddenException;
    var NotFoundException = class _NotFoundException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "NotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotFoundException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.NotFoundException = NotFoundException;
    var ServiceFailureException = class _ServiceFailureException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "ServiceFailureException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceFailureException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ServiceFailureException = ServiceFailureException;
    var ServiceUnavailableException = class _ServiceUnavailableException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "ServiceUnavailableException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ServiceUnavailableException = ServiceUnavailableException;
    var ThrottledClientException = class _ThrottledClientException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "ThrottledClientException",
          $fault: "client",
          ...opts
        });
        this.name = "ThrottledClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ThrottledClientException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ThrottledClientException = ThrottledClientException;
    var UnauthorizedClientException = class _UnauthorizedClientException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var ResourceLimitExceededException = class _ResourceLimitExceededException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "ResourceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceLimitExceededException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ResourceLimitExceededException = ResourceLimitExceededException;
    exports.RoomMembershipRole = {
      Administrator: "Administrator",
      Member: "Member"
    };
    exports.PhoneNumberProductType = {
      BusinessCalling: "BusinessCalling",
      SipMediaApplicationDialIn: "SipMediaApplicationDialIn",
      VoiceConnector: "VoiceConnector"
    };
    exports.UserType = {
      PrivateUser: "PrivateUser",
      SharedDevice: "SharedDevice"
    };
    exports.BotType = {
      ChatBot: "ChatBot"
    };
    exports.CallingNameStatus = {
      Unassigned: "Unassigned",
      UpdateFailed: "UpdateFailed",
      UpdateInProgress: "UpdateInProgress",
      UpdateSucceeded: "UpdateSucceeded"
    };
    exports.Capability = {
      SMS: "SMS",
      Voice: "Voice"
    };
    exports.ChannelMode = {
      RESTRICTED: "RESTRICTED",
      UNRESTRICTED: "UNRESTRICTED"
    };
    exports.ChannelPrivacy = {
      PRIVATE: "PRIVATE",
      PUBLIC: "PUBLIC"
    };
    exports.ChannelMessagePersistenceType = {
      NON_PERSISTENT: "NON_PERSISTENT",
      PERSISTENT: "PERSISTENT"
    };
    exports.ChannelMessageType = {
      CONTROL: "CONTROL",
      STANDARD: "STANDARD"
    };
    var ConflictException = class _ConflictException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "ConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConflictException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ConflictException = ConflictException;
    exports.MediaPipelineSinkType = {
      S3Bucket: "S3Bucket"
    };
    exports.MediaPipelineSourceType = {
      ChimeSdkMeeting: "ChimeSdkMeeting"
    };
    exports.MediaPipelineStatus = {
      Failed: "Failed",
      InProgress: "InProgress",
      Initializing: "Initializing",
      Stopped: "Stopped",
      Stopping: "Stopping"
    };
    exports.OrderedPhoneNumberStatus = {
      Acquired: "Acquired",
      Failed: "Failed",
      Processing: "Processing"
    };
    exports.PhoneNumberOrderStatus = {
      Failed: "Failed",
      Partial: "Partial",
      Processing: "Processing",
      Successful: "Successful"
    };
    exports.GeoMatchLevel = {
      AreaCode: "AreaCode",
      Country: "Country"
    };
    exports.NumberSelectionBehavior = {
      AvoidSticky: "AvoidSticky",
      PreferSticky: "PreferSticky"
    };
    exports.ProxySessionStatus = {
      Closed: "Closed",
      InProgress: "InProgress",
      Open: "Open"
    };
    exports.MemberType = {
      Bot: "Bot",
      User: "User",
      Webhook: "Webhook"
    };
    exports.SipRuleTriggerType = {
      RequestUriHostname: "RequestUriHostname",
      ToPhoneNumber: "ToPhoneNumber"
    };
    exports.InviteStatus = {
      Accepted: "Accepted",
      Failed: "Failed",
      Pending: "Pending"
    };
    exports.RegistrationStatus = {
      Registered: "Registered",
      Suspended: "Suspended",
      Unregistered: "Unregistered"
    };
    exports.VoiceConnectorAwsRegion = {
      US_EAST_1: "us-east-1",
      US_WEST_2: "us-west-2"
    };
    var UnprocessableEntityException = class _UnprocessableEntityException extends ChimeServiceException_1.ChimeServiceException {
      constructor(opts) {
        super({
          name: "UnprocessableEntityException",
          $fault: "client",
          ...opts
        });
        this.name = "UnprocessableEntityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnprocessableEntityException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.UnprocessableEntityException = UnprocessableEntityException;
    exports.EmailStatus = {
      Failed: "Failed",
      NotSent: "NotSent",
      Sent: "Sent"
    };
    exports.TranscribeMedicalContentIdentificationType = {
      PHI: "PHI"
    };
    exports.TranscribeMedicalLanguageCode = {
      EN_US: "en-US"
    };
    exports.TranscribeMedicalRegion = {
      AP_SOUTHEAST_2: "ap-southeast-2",
      AUTO: "auto",
      CA_CENTRAL_1: "ca-central-1",
      EU_WEST_1: "eu-west-1",
      US_EAST_1: "us-east-1",
      US_EAST_2: "us-east-2",
      US_WEST_2: "us-west-2"
    };
    exports.TranscribeMedicalSpecialty = {
      Cardiology: "CARDIOLOGY",
      Neurology: "NEUROLOGY",
      Oncology: "ONCOLOGY",
      PrimaryCare: "PRIMARYCARE",
      Radiology: "RADIOLOGY",
      Urology: "UROLOGY"
    };
    exports.TranscribeMedicalType = {
      Conversation: "CONVERSATION",
      Dictation: "DICTATION"
    };
    exports.TranscribeContentIdentificationType = {
      PII: "PII"
    };
    exports.TranscribeContentRedactionType = {
      PII: "PII"
    };
    exports.TranscribeLanguageCode = {
      DE_DE: "de-DE",
      EN_AU: "en-AU",
      EN_GB: "en-GB",
      EN_US: "en-US",
      ES_US: "es-US",
      FR_CA: "fr-CA",
      FR_FR: "fr-FR",
      HI_IN: "hi-IN",
      IT_IT: "it-IT",
      JA_JP: "ja-JP",
      KO_KR: "ko-KR",
      PT_BR: "pt-BR",
      TH_TH: "th-TH",
      ZH_CN: "zh-CN"
    };
    exports.TranscribePartialResultsStability = {
      HIGH: "high",
      LOW: "low",
      MEDIUM: "medium"
    };
    exports.TranscribeRegion = {
      AP_NORTHEAST_1: "ap-northeast-1",
      AP_NORTHEAST_2: "ap-northeast-2",
      AP_SOUTHEAST_2: "ap-southeast-2",
      AUTO: "auto",
      CA_CENTRAL_1: "ca-central-1",
      EU_CENTRAL_1: "eu-central-1",
      EU_WEST_1: "eu-west-1",
      EU_WEST_2: "eu-west-2",
      SA_EAST_1: "sa-east-1",
      US_EAST_1: "us-east-1",
      US_EAST_2: "us-east-2",
      US_WEST_2: "us-west-2"
    };
    exports.TranscribeVocabularyFilterMethod = {
      Mask: "mask",
      Remove: "remove",
      Tag: "tag"
    };
    exports.PhoneNumberAssociationName = {
      AccountId: "AccountId",
      SipRuleId: "SipRuleId",
      UserId: "UserId",
      VoiceConnectorGroupId: "VoiceConnectorGroupId",
      VoiceConnectorId: "VoiceConnectorId"
    };
    exports.PhoneNumberStatus = {
      AcquireFailed: "AcquireFailed",
      AcquireInProgress: "AcquireInProgress",
      Assigned: "Assigned",
      DeleteFailed: "DeleteFailed",
      DeleteInProgress: "DeleteInProgress",
      ReleaseFailed: "ReleaseFailed",
      ReleaseInProgress: "ReleaseInProgress",
      Unassigned: "Unassigned"
    };
    exports.PhoneNumberType = {
      Local: "Local",
      TollFree: "TollFree"
    };
    var AddressFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.streetName && { streetName: smithy_client_1.SENSITIVE_STRING },
      ...obj.streetSuffix && { streetSuffix: smithy_client_1.SENSITIVE_STRING },
      ...obj.postDirectional && { postDirectional: smithy_client_1.SENSITIVE_STRING },
      ...obj.preDirectional && { preDirectional: smithy_client_1.SENSITIVE_STRING },
      ...obj.streetNumber && { streetNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.city && { city: smithy_client_1.SENSITIVE_STRING },
      ...obj.state && { state: smithy_client_1.SENSITIVE_STRING },
      ...obj.postalCode && { postalCode: smithy_client_1.SENSITIVE_STRING },
      ...obj.postalCodePlus4 && { postalCodePlus4: smithy_client_1.SENSITIVE_STRING },
      ...obj.country && { country: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AddressFilterSensitiveLog = AddressFilterSensitiveLog;
    var AlexaForBusinessMetadataFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AlexaForBusinessRoomArn && { AlexaForBusinessRoomArn: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AlexaForBusinessMetadataFilterSensitiveLog = AlexaForBusinessMetadataFilterSensitiveLog;
    var AppInstanceFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceFilterSensitiveLog = AppInstanceFilterSensitiveLog;
    var IdentityFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.IdentityFilterSensitiveLog = IdentityFilterSensitiveLog;
    var AppInstanceAdminFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Admin && { Admin: (0, exports.IdentityFilterSensitiveLog)(obj.Admin) }
    });
    exports.AppInstanceAdminFilterSensitiveLog = AppInstanceAdminFilterSensitiveLog;
    var AppInstanceAdminSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Admin && { Admin: (0, exports.IdentityFilterSensitiveLog)(obj.Admin) }
    });
    exports.AppInstanceAdminSummaryFilterSensitiveLog = AppInstanceAdminSummaryFilterSensitiveLog;
    var AppInstanceSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceSummaryFilterSensitiveLog = AppInstanceSummaryFilterSensitiveLog;
    var AppInstanceStreamingConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ResourceArn && { ResourceArn: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceStreamingConfigurationFilterSensitiveLog = AppInstanceStreamingConfigurationFilterSensitiveLog;
    var AppInstanceUserFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceUserFilterSensitiveLog = AppInstanceUserFilterSensitiveLog;
    var AppInstanceUserSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceUserSummaryFilterSensitiveLog = AppInstanceUserSummaryFilterSensitiveLog;
    var AssociatePhoneNumbersWithVoiceConnectorRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumbers && { E164PhoneNumbers: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssociatePhoneNumbersWithVoiceConnectorRequestFilterSensitiveLog = AssociatePhoneNumbersWithVoiceConnectorRequestFilterSensitiveLog;
    var AssociatePhoneNumbersWithVoiceConnectorGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumbers && { E164PhoneNumbers: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssociatePhoneNumbersWithVoiceConnectorGroupRequestFilterSensitiveLog = AssociatePhoneNumbersWithVoiceConnectorGroupRequestFilterSensitiveLog;
    var AssociatePhoneNumberWithUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumber && { E164PhoneNumber: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssociatePhoneNumberWithUserRequestFilterSensitiveLog = AssociatePhoneNumberWithUserRequestFilterSensitiveLog;
    var AttendeeFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ExternalUserId && { ExternalUserId: smithy_client_1.SENSITIVE_STRING },
      ...obj.JoinToken && { JoinToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AttendeeFilterSensitiveLog = AttendeeFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && { Key: smithy_client_1.SENSITIVE_STRING },
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var BatchChannelMembershipsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InvitedBy && { InvitedBy: (0, exports.IdentityFilterSensitiveLog)(obj.InvitedBy) },
      ...obj.Members && { Members: obj.Members.map((item) => (0, exports.IdentityFilterSensitiveLog)(item)) }
    });
    exports.BatchChannelMembershipsFilterSensitiveLog = BatchChannelMembershipsFilterSensitiveLog;
    var CreateAttendeeRequestItemFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ExternalUserId && { ExternalUserId: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.CreateAttendeeRequestItemFilterSensitiveLog = CreateAttendeeRequestItemFilterSensitiveLog;
    var BatchCreateAttendeeRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Attendees && { Attendees: obj.Attendees.map((item) => (0, exports.CreateAttendeeRequestItemFilterSensitiveLog)(item)) }
    });
    exports.BatchCreateAttendeeRequestFilterSensitiveLog = BatchCreateAttendeeRequestFilterSensitiveLog;
    var CreateAttendeeErrorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ExternalUserId && { ExternalUserId: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateAttendeeErrorFilterSensitiveLog = CreateAttendeeErrorFilterSensitiveLog;
    var BatchCreateAttendeeResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Attendees && { Attendees: obj.Attendees.map((item) => (0, exports.AttendeeFilterSensitiveLog)(item)) },
      ...obj.Errors && { Errors: obj.Errors.map((item) => (0, exports.CreateAttendeeErrorFilterSensitiveLog)(item)) }
    });
    exports.BatchCreateAttendeeResponseFilterSensitiveLog = BatchCreateAttendeeResponseFilterSensitiveLog;
    var BatchCreateChannelMembershipResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.BatchChannelMemberships && {
        BatchChannelMemberships: (0, exports.BatchChannelMembershipsFilterSensitiveLog)(obj.BatchChannelMemberships)
      }
    });
    exports.BatchCreateChannelMembershipResponseFilterSensitiveLog = BatchCreateChannelMembershipResponseFilterSensitiveLog;
    var UpdatePhoneNumberRequestItemFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.CallingName && { CallingName: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdatePhoneNumberRequestItemFilterSensitiveLog = UpdatePhoneNumberRequestItemFilterSensitiveLog;
    var BatchUpdatePhoneNumberRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.UpdatePhoneNumberRequestItems && {
        UpdatePhoneNumberRequestItems: obj.UpdatePhoneNumberRequestItems.map((item) => (0, exports.UpdatePhoneNumberRequestItemFilterSensitiveLog)(item))
      }
    });
    exports.BatchUpdatePhoneNumberRequestFilterSensitiveLog = BatchUpdatePhoneNumberRequestFilterSensitiveLog;
    var UpdateUserRequestItemFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AlexaForBusinessMetadata && {
        AlexaForBusinessMetadata: (0, exports.AlexaForBusinessMetadataFilterSensitiveLog)(obj.AlexaForBusinessMetadata)
      }
    });
    exports.UpdateUserRequestItemFilterSensitiveLog = UpdateUserRequestItemFilterSensitiveLog;
    var BatchUpdateUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.UpdateUserRequestItems && {
        UpdateUserRequestItems: obj.UpdateUserRequestItems.map((item) => (0, exports.UpdateUserRequestItemFilterSensitiveLog)(item))
      }
    });
    exports.BatchUpdateUserRequestFilterSensitiveLog = BatchUpdateUserRequestFilterSensitiveLog;
    var BotFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.DisplayName && { DisplayName: smithy_client_1.SENSITIVE_STRING },
      ...obj.BotEmail && { BotEmail: smithy_client_1.SENSITIVE_STRING },
      ...obj.SecurityToken && { SecurityToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.BotFilterSensitiveLog = BotFilterSensitiveLog;
    var CandidateAddressFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.streetInfo && { streetInfo: smithy_client_1.SENSITIVE_STRING },
      ...obj.streetNumber && { streetNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.city && { city: smithy_client_1.SENSITIVE_STRING },
      ...obj.state && { state: smithy_client_1.SENSITIVE_STRING },
      ...obj.postalCode && { postalCode: smithy_client_1.SENSITIVE_STRING },
      ...obj.postalCodePlus4 && { postalCodePlus4: smithy_client_1.SENSITIVE_STRING },
      ...obj.country && { country: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CandidateAddressFilterSensitiveLog = CandidateAddressFilterSensitiveLog;
    var ChannelFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.CreatedBy && { CreatedBy: (0, exports.IdentityFilterSensitiveLog)(obj.CreatedBy) }
    });
    exports.ChannelFilterSensitiveLog = ChannelFilterSensitiveLog;
    var ChannelBanFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) },
      ...obj.CreatedBy && { CreatedBy: (0, exports.IdentityFilterSensitiveLog)(obj.CreatedBy) }
    });
    exports.ChannelBanFilterSensitiveLog = ChannelBanFilterSensitiveLog;
    var ChannelBanSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.ChannelBanSummaryFilterSensitiveLog = ChannelBanSummaryFilterSensitiveLog;
    var ChannelMembershipFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InvitedBy && { InvitedBy: (0, exports.IdentityFilterSensitiveLog)(obj.InvitedBy) },
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.ChannelMembershipFilterSensitiveLog = ChannelMembershipFilterSensitiveLog;
    var ChannelSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ChannelSummaryFilterSensitiveLog = ChannelSummaryFilterSensitiveLog;
    var ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelSummary && { ChannelSummary: (0, exports.ChannelSummaryFilterSensitiveLog)(obj.ChannelSummary) }
    });
    exports.ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog = ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog;
    var ChannelMembershipSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.ChannelMembershipSummaryFilterSensitiveLog = ChannelMembershipSummaryFilterSensitiveLog;
    var ChannelMessageFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.Sender && { Sender: (0, exports.IdentityFilterSensitiveLog)(obj.Sender) }
    });
    exports.ChannelMessageFilterSensitiveLog = ChannelMessageFilterSensitiveLog;
    var ChannelMessageSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.Sender && { Sender: (0, exports.IdentityFilterSensitiveLog)(obj.Sender) }
    });
    exports.ChannelMessageSummaryFilterSensitiveLog = ChannelMessageSummaryFilterSensitiveLog;
    var ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelSummary && { ChannelSummary: (0, exports.ChannelSummaryFilterSensitiveLog)(obj.ChannelSummary) }
    });
    exports.ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog = ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog;
    var ChannelModeratorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Moderator && { Moderator: (0, exports.IdentityFilterSensitiveLog)(obj.Moderator) },
      ...obj.CreatedBy && { CreatedBy: (0, exports.IdentityFilterSensitiveLog)(obj.CreatedBy) }
    });
    exports.ChannelModeratorFilterSensitiveLog = ChannelModeratorFilterSensitiveLog;
    var ChannelModeratorSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Moderator && { Moderator: (0, exports.IdentityFilterSensitiveLog)(obj.Moderator) }
    });
    exports.ChannelModeratorSummaryFilterSensitiveLog = ChannelModeratorSummaryFilterSensitiveLog;
    var SelectedVideoStreamsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ExternalUserIds && { ExternalUserIds: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SelectedVideoStreamsFilterSensitiveLog = SelectedVideoStreamsFilterSensitiveLog;
    var SourceConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SelectedVideoStreams && {
        SelectedVideoStreams: (0, exports.SelectedVideoStreamsFilterSensitiveLog)(obj.SelectedVideoStreams)
      }
    });
    exports.SourceConfigurationFilterSensitiveLog = SourceConfigurationFilterSensitiveLog;
    var ChimeSdkMeetingConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SourceConfiguration && {
        SourceConfiguration: (0, exports.SourceConfigurationFilterSensitiveLog)(obj.SourceConfiguration)
      }
    });
    exports.ChimeSdkMeetingConfigurationFilterSensitiveLog = ChimeSdkMeetingConfigurationFilterSensitiveLog;
    var CreateAppInstanceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.CreateAppInstanceRequestFilterSensitiveLog = CreateAppInstanceRequestFilterSensitiveLog;
    var CreateAppInstanceAdminResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceAdmin && { AppInstanceAdmin: (0, exports.IdentityFilterSensitiveLog)(obj.AppInstanceAdmin) }
    });
    exports.CreateAppInstanceAdminResponseFilterSensitiveLog = CreateAppInstanceAdminResponseFilterSensitiveLog;
    var CreateAppInstanceUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUserId && { AppInstanceUserId: smithy_client_1.SENSITIVE_STRING },
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.CreateAppInstanceUserRequestFilterSensitiveLog = CreateAppInstanceUserRequestFilterSensitiveLog;
    var CreateAttendeeRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ExternalUserId && { ExternalUserId: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.CreateAttendeeRequestFilterSensitiveLog = CreateAttendeeRequestFilterSensitiveLog;
    var CreateAttendeeResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Attendee && { Attendee: (0, exports.AttendeeFilterSensitiveLog)(obj.Attendee) }
    });
    exports.CreateAttendeeResponseFilterSensitiveLog = CreateAttendeeResponseFilterSensitiveLog;
    var CreateBotRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.DisplayName && { DisplayName: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateBotRequestFilterSensitiveLog = CreateBotRequestFilterSensitiveLog;
    var CreateBotResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Bot && { Bot: (0, exports.BotFilterSensitiveLog)(obj.Bot) }
    });
    exports.CreateBotResponseFilterSensitiveLog = CreateBotResponseFilterSensitiveLog;
    var CreateChannelRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.CreateChannelRequestFilterSensitiveLog = CreateChannelRequestFilterSensitiveLog;
    var CreateChannelBanResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.CreateChannelBanResponseFilterSensitiveLog = CreateChannelBanResponseFilterSensitiveLog;
    var CreateChannelMembershipResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.CreateChannelMembershipResponseFilterSensitiveLog = CreateChannelMembershipResponseFilterSensitiveLog;
    var CreateChannelModeratorResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelModerator && { ChannelModerator: (0, exports.IdentityFilterSensitiveLog)(obj.ChannelModerator) }
    });
    exports.CreateChannelModeratorResponseFilterSensitiveLog = CreateChannelModeratorResponseFilterSensitiveLog;
    var CreateMediaCapturePipelineRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SourceArn && { SourceArn: smithy_client_1.SENSITIVE_STRING },
      ...obj.SinkArn && { SinkArn: smithy_client_1.SENSITIVE_STRING },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ChimeSdkMeetingConfiguration && {
        ChimeSdkMeetingConfiguration: (0, exports.ChimeSdkMeetingConfigurationFilterSensitiveLog)(obj.ChimeSdkMeetingConfiguration)
      }
    });
    exports.CreateMediaCapturePipelineRequestFilterSensitiveLog = CreateMediaCapturePipelineRequestFilterSensitiveLog;
    var MediaCapturePipelineFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SourceArn && { SourceArn: smithy_client_1.SENSITIVE_STRING },
      ...obj.SinkArn && { SinkArn: smithy_client_1.SENSITIVE_STRING },
      ...obj.ChimeSdkMeetingConfiguration && {
        ChimeSdkMeetingConfiguration: (0, exports.ChimeSdkMeetingConfigurationFilterSensitiveLog)(obj.ChimeSdkMeetingConfiguration)
      }
    });
    exports.MediaCapturePipelineFilterSensitiveLog = MediaCapturePipelineFilterSensitiveLog;
    var CreateMediaCapturePipelineResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MediaCapturePipeline && {
        MediaCapturePipeline: (0, exports.MediaCapturePipelineFilterSensitiveLog)(obj.MediaCapturePipeline)
      }
    });
    exports.CreateMediaCapturePipelineResponseFilterSensitiveLog = CreateMediaCapturePipelineResponseFilterSensitiveLog;
    var MeetingNotificationConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SnsTopicArn && { SnsTopicArn: smithy_client_1.SENSITIVE_STRING },
      ...obj.SqsQueueArn && { SqsQueueArn: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MeetingNotificationConfigurationFilterSensitiveLog = MeetingNotificationConfigurationFilterSensitiveLog;
    var CreateMeetingRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ExternalMeetingId && { ExternalMeetingId: smithy_client_1.SENSITIVE_STRING },
      ...obj.MeetingHostId && { MeetingHostId: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) },
      ...obj.NotificationsConfiguration && {
        NotificationsConfiguration: (0, exports.MeetingNotificationConfigurationFilterSensitiveLog)(obj.NotificationsConfiguration)
      }
    });
    exports.CreateMeetingRequestFilterSensitiveLog = CreateMeetingRequestFilterSensitiveLog;
    var MeetingFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ExternalMeetingId && { ExternalMeetingId: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MeetingFilterSensitiveLog = MeetingFilterSensitiveLog;
    var CreateMeetingResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Meeting && { Meeting: (0, exports.MeetingFilterSensitiveLog)(obj.Meeting) }
    });
    exports.CreateMeetingResponseFilterSensitiveLog = CreateMeetingResponseFilterSensitiveLog;
    var CreateMeetingDialOutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.FromPhoneNumber && { FromPhoneNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.ToPhoneNumber && { ToPhoneNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.JoinToken && { JoinToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateMeetingDialOutRequestFilterSensitiveLog = CreateMeetingDialOutRequestFilterSensitiveLog;
    var CreateMeetingWithAttendeesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ExternalMeetingId && { ExternalMeetingId: smithy_client_1.SENSITIVE_STRING },
      ...obj.MeetingHostId && { MeetingHostId: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) },
      ...obj.NotificationsConfiguration && {
        NotificationsConfiguration: (0, exports.MeetingNotificationConfigurationFilterSensitiveLog)(obj.NotificationsConfiguration)
      },
      ...obj.Attendees && { Attendees: obj.Attendees.map((item) => (0, exports.CreateAttendeeRequestItemFilterSensitiveLog)(item)) }
    });
    exports.CreateMeetingWithAttendeesRequestFilterSensitiveLog = CreateMeetingWithAttendeesRequestFilterSensitiveLog;
    var CreateMeetingWithAttendeesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Meeting && { Meeting: (0, exports.MeetingFilterSensitiveLog)(obj.Meeting) },
      ...obj.Attendees && { Attendees: obj.Attendees.map((item) => (0, exports.AttendeeFilterSensitiveLog)(item)) },
      ...obj.Errors && { Errors: obj.Errors.map((item) => (0, exports.CreateAttendeeErrorFilterSensitiveLog)(item)) }
    });
    exports.CreateMeetingWithAttendeesResponseFilterSensitiveLog = CreateMeetingWithAttendeesResponseFilterSensitiveLog;
    var CreatePhoneNumberOrderRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumbers && { E164PhoneNumbers: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreatePhoneNumberOrderRequestFilterSensitiveLog = CreatePhoneNumberOrderRequestFilterSensitiveLog;
    var OrderedPhoneNumberFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumber && { E164PhoneNumber: smithy_client_1.SENSITIVE_STRING }
    });
    exports.OrderedPhoneNumberFilterSensitiveLog = OrderedPhoneNumberFilterSensitiveLog;
    var PhoneNumberOrderFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OrderedPhoneNumbers && {
        OrderedPhoneNumbers: obj.OrderedPhoneNumbers.map((item) => (0, exports.OrderedPhoneNumberFilterSensitiveLog)(item))
      }
    });
    exports.PhoneNumberOrderFilterSensitiveLog = PhoneNumberOrderFilterSensitiveLog;
    var CreatePhoneNumberOrderResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PhoneNumberOrder && { PhoneNumberOrder: (0, exports.PhoneNumberOrderFilterSensitiveLog)(obj.PhoneNumberOrder) }
    });
    exports.CreatePhoneNumberOrderResponseFilterSensitiveLog = CreatePhoneNumberOrderResponseFilterSensitiveLog;
    var CreateProxySessionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ParticipantPhoneNumbers && { ParticipantPhoneNumbers: smithy_client_1.SENSITIVE_STRING },
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateProxySessionRequestFilterSensitiveLog = CreateProxySessionRequestFilterSensitiveLog;
    var ParticipantFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.ProxyPhoneNumber && { ProxyPhoneNumber: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ParticipantFilterSensitiveLog = ParticipantFilterSensitiveLog;
    var ProxySessionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Participants && { Participants: obj.Participants.map((item) => (0, exports.ParticipantFilterSensitiveLog)(item)) }
    });
    exports.ProxySessionFilterSensitiveLog = ProxySessionFilterSensitiveLog;
    var CreateProxySessionResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ProxySession && { ProxySession: (0, exports.ProxySessionFilterSensitiveLog)(obj.ProxySession) }
    });
    exports.CreateProxySessionResponseFilterSensitiveLog = CreateProxySessionResponseFilterSensitiveLog;
    var CreateRoomRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateRoomRequestFilterSensitiveLog = CreateRoomRequestFilterSensitiveLog;
    var RoomFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RoomFilterSensitiveLog = RoomFilterSensitiveLog;
    var CreateRoomResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Room && { Room: (0, exports.RoomFilterSensitiveLog)(obj.Room) }
    });
    exports.CreateRoomResponseFilterSensitiveLog = CreateRoomResponseFilterSensitiveLog;
    var MemberFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Email && { Email: smithy_client_1.SENSITIVE_STRING },
      ...obj.FullName && { FullName: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MemberFilterSensitiveLog = MemberFilterSensitiveLog;
    var RoomMembershipFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.MemberFilterSensitiveLog)(obj.Member) }
    });
    exports.RoomMembershipFilterSensitiveLog = RoomMembershipFilterSensitiveLog;
    var CreateRoomMembershipResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RoomMembership && { RoomMembership: (0, exports.RoomMembershipFilterSensitiveLog)(obj.RoomMembership) }
    });
    exports.CreateRoomMembershipResponseFilterSensitiveLog = CreateRoomMembershipResponseFilterSensitiveLog;
    var SipMediaApplicationEndpointFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.LambdaArn && { LambdaArn: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SipMediaApplicationEndpointFilterSensitiveLog = SipMediaApplicationEndpointFilterSensitiveLog;
    var CreateSipMediaApplicationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Endpoints && { Endpoints: obj.Endpoints.map((item) => (0, exports.SipMediaApplicationEndpointFilterSensitiveLog)(item)) }
    });
    exports.CreateSipMediaApplicationRequestFilterSensitiveLog = CreateSipMediaApplicationRequestFilterSensitiveLog;
    var SipMediaApplicationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Endpoints && { Endpoints: obj.Endpoints.map((item) => (0, exports.SipMediaApplicationEndpointFilterSensitiveLog)(item)) }
    });
    exports.SipMediaApplicationFilterSensitiveLog = SipMediaApplicationFilterSensitiveLog;
    var CreateSipMediaApplicationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SipMediaApplication && {
        SipMediaApplication: (0, exports.SipMediaApplicationFilterSensitiveLog)(obj.SipMediaApplication)
      }
    });
    exports.CreateSipMediaApplicationResponseFilterSensitiveLog = CreateSipMediaApplicationResponseFilterSensitiveLog;
    var CreateSipMediaApplicationCallRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.FromPhoneNumber && { FromPhoneNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.ToPhoneNumber && { ToPhoneNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.SipHeaders && { SipHeaders: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateSipMediaApplicationCallRequestFilterSensitiveLog = CreateSipMediaApplicationCallRequestFilterSensitiveLog;
    var CreateUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Email && { Email: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateUserRequestFilterSensitiveLog = CreateUserRequestFilterSensitiveLog;
    var UserFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PrimaryEmail && { PrimaryEmail: smithy_client_1.SENSITIVE_STRING },
      ...obj.PrimaryProvisionedNumber && { PrimaryProvisionedNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.DisplayName && { DisplayName: smithy_client_1.SENSITIVE_STRING },
      ...obj.AlexaForBusinessMetadata && {
        AlexaForBusinessMetadata: (0, exports.AlexaForBusinessMetadataFilterSensitiveLog)(obj.AlexaForBusinessMetadata)
      }
    });
    exports.UserFilterSensitiveLog = UserFilterSensitiveLog;
    var CreateUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.User && { User: (0, exports.UserFilterSensitiveLog)(obj.User) }
    });
    exports.CreateUserResponseFilterSensitiveLog = CreateUserResponseFilterSensitiveLog;
    var CredentialFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Username && { Username: smithy_client_1.SENSITIVE_STRING },
      ...obj.Password && { Password: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CredentialFilterSensitiveLog = CredentialFilterSensitiveLog;
    var DeleteVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Usernames && { Usernames: smithy_client_1.SENSITIVE_STRING }
    });
    exports.DeleteVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog = DeleteVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog;
    var DescribeAppInstanceResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstance && { AppInstance: (0, exports.AppInstanceFilterSensitiveLog)(obj.AppInstance) }
    });
    exports.DescribeAppInstanceResponseFilterSensitiveLog = DescribeAppInstanceResponseFilterSensitiveLog;
    var DescribeAppInstanceAdminResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceAdmin && { AppInstanceAdmin: (0, exports.AppInstanceAdminFilterSensitiveLog)(obj.AppInstanceAdmin) }
    });
    exports.DescribeAppInstanceAdminResponseFilterSensitiveLog = DescribeAppInstanceAdminResponseFilterSensitiveLog;
    var DescribeAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUser && { AppInstanceUser: (0, exports.AppInstanceUserFilterSensitiveLog)(obj.AppInstanceUser) }
    });
    exports.DescribeAppInstanceUserResponseFilterSensitiveLog = DescribeAppInstanceUserResponseFilterSensitiveLog;
    var DescribeChannelResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channel && { Channel: (0, exports.ChannelFilterSensitiveLog)(obj.Channel) }
    });
    exports.DescribeChannelResponseFilterSensitiveLog = DescribeChannelResponseFilterSensitiveLog;
    var DescribeChannelBanResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelBan && { ChannelBan: (0, exports.ChannelBanFilterSensitiveLog)(obj.ChannelBan) }
    });
    exports.DescribeChannelBanResponseFilterSensitiveLog = DescribeChannelBanResponseFilterSensitiveLog;
    var DescribeChannelMembershipResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMembership && { ChannelMembership: (0, exports.ChannelMembershipFilterSensitiveLog)(obj.ChannelMembership) }
    });
    exports.DescribeChannelMembershipResponseFilterSensitiveLog = DescribeChannelMembershipResponseFilterSensitiveLog;
    var DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMembership && {
        ChannelMembership: (0, exports.ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog)(obj.ChannelMembership)
      }
    });
    exports.DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog = DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog;
    var DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channel && { Channel: (0, exports.ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog)(obj.Channel) }
    });
    exports.DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog = DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog;
    var DescribeChannelModeratorResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelModerator && { ChannelModerator: (0, exports.ChannelModeratorFilterSensitiveLog)(obj.ChannelModerator) }
    });
    exports.DescribeChannelModeratorResponseFilterSensitiveLog = DescribeChannelModeratorResponseFilterSensitiveLog;
    var DisassociatePhoneNumbersFromVoiceConnectorRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumbers && { E164PhoneNumbers: smithy_client_1.SENSITIVE_STRING }
    });
    exports.DisassociatePhoneNumbersFromVoiceConnectorRequestFilterSensitiveLog = DisassociatePhoneNumbersFromVoiceConnectorRequestFilterSensitiveLog;
    var DisassociatePhoneNumbersFromVoiceConnectorGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumbers && { E164PhoneNumbers: smithy_client_1.SENSITIVE_STRING }
    });
    exports.DisassociatePhoneNumbersFromVoiceConnectorGroupRequestFilterSensitiveLog = DisassociatePhoneNumbersFromVoiceConnectorGroupRequestFilterSensitiveLog;
    var DNISEmergencyCallingConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.EmergencyPhoneNumber && { EmergencyPhoneNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.TestPhoneNumber && { TestPhoneNumber: smithy_client_1.SENSITIVE_STRING }
    });
    exports.DNISEmergencyCallingConfigurationFilterSensitiveLog = DNISEmergencyCallingConfigurationFilterSensitiveLog;
    var EmergencyCallingConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.DNIS && { DNIS: obj.DNIS.map((item) => (0, exports.DNISEmergencyCallingConfigurationFilterSensitiveLog)(item)) }
    });
    exports.EmergencyCallingConfigurationFilterSensitiveLog = EmergencyCallingConfigurationFilterSensitiveLog;
    var EventsConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OutboundEventsHTTPSEndpoint && { OutboundEventsHTTPSEndpoint: smithy_client_1.SENSITIVE_STRING },
      ...obj.LambdaFunctionArn && { LambdaFunctionArn: smithy_client_1.SENSITIVE_STRING }
    });
    exports.EventsConfigurationFilterSensitiveLog = EventsConfigurationFilterSensitiveLog;
    var GetAppInstanceStreamingConfigurationsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceStreamingConfigurations && {
        AppInstanceStreamingConfigurations: obj.AppInstanceStreamingConfigurations.map((item) => (0, exports.AppInstanceStreamingConfigurationFilterSensitiveLog)(item))
      }
    });
    exports.GetAppInstanceStreamingConfigurationsResponseFilterSensitiveLog = GetAppInstanceStreamingConfigurationsResponseFilterSensitiveLog;
    var GetAttendeeResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Attendee && { Attendee: (0, exports.AttendeeFilterSensitiveLog)(obj.Attendee) }
    });
    exports.GetAttendeeResponseFilterSensitiveLog = GetAttendeeResponseFilterSensitiveLog;
    var GetBotResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Bot && { Bot: (0, exports.BotFilterSensitiveLog)(obj.Bot) }
    });
    exports.GetBotResponseFilterSensitiveLog = GetBotResponseFilterSensitiveLog;
    var GetChannelMessageResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMessage && { ChannelMessage: (0, exports.ChannelMessageFilterSensitiveLog)(obj.ChannelMessage) }
    });
    exports.GetChannelMessageResponseFilterSensitiveLog = GetChannelMessageResponseFilterSensitiveLog;
    var GetEventsConfigurationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.EventsConfiguration && {
        EventsConfiguration: (0, exports.EventsConfigurationFilterSensitiveLog)(obj.EventsConfiguration)
      }
    });
    exports.GetEventsConfigurationResponseFilterSensitiveLog = GetEventsConfigurationResponseFilterSensitiveLog;
    var GetMediaCapturePipelineResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MediaCapturePipeline && {
        MediaCapturePipeline: (0, exports.MediaCapturePipelineFilterSensitiveLog)(obj.MediaCapturePipeline)
      }
    });
    exports.GetMediaCapturePipelineResponseFilterSensitiveLog = GetMediaCapturePipelineResponseFilterSensitiveLog;
    var GetMeetingResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Meeting && { Meeting: (0, exports.MeetingFilterSensitiveLog)(obj.Meeting) }
    });
    exports.GetMeetingResponseFilterSensitiveLog = GetMeetingResponseFilterSensitiveLog;
    var PhoneNumberFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumber && { E164PhoneNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.CallingName && { CallingName: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PhoneNumberFilterSensitiveLog = PhoneNumberFilterSensitiveLog;
    var GetPhoneNumberResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: (0, exports.PhoneNumberFilterSensitiveLog)(obj.PhoneNumber) }
    });
    exports.GetPhoneNumberResponseFilterSensitiveLog = GetPhoneNumberResponseFilterSensitiveLog;
    var GetPhoneNumberOrderResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PhoneNumberOrder && { PhoneNumberOrder: (0, exports.PhoneNumberOrderFilterSensitiveLog)(obj.PhoneNumberOrder) }
    });
    exports.GetPhoneNumberOrderResponseFilterSensitiveLog = GetPhoneNumberOrderResponseFilterSensitiveLog;
    var GetPhoneNumberSettingsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.CallingName && { CallingName: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetPhoneNumberSettingsResponseFilterSensitiveLog = GetPhoneNumberSettingsResponseFilterSensitiveLog;
    var GetProxySessionResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ProxySession && { ProxySession: (0, exports.ProxySessionFilterSensitiveLog)(obj.ProxySession) }
    });
    exports.GetProxySessionResponseFilterSensitiveLog = GetProxySessionResponseFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson13 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.se_DeleteMeetingCommand = exports.se_DeleteMediaCapturePipelineCommand = exports.se_DeleteEventsConfigurationCommand = exports.se_DeleteChannelModeratorCommand = exports.se_DeleteChannelMessageCommand = exports.se_DeleteChannelMembershipCommand = exports.se_DeleteChannelBanCommand = exports.se_DeleteChannelCommand = exports.se_DeleteAttendeeCommand = exports.se_DeleteAppInstanceUserCommand = exports.se_DeleteAppInstanceStreamingConfigurationsCommand = exports.se_DeleteAppInstanceAdminCommand = exports.se_DeleteAppInstanceCommand = exports.se_DeleteAccountCommand = exports.se_CreateVoiceConnectorGroupCommand = exports.se_CreateVoiceConnectorCommand = exports.se_CreateUserCommand = exports.se_CreateSipRuleCommand = exports.se_CreateSipMediaApplicationCallCommand = exports.se_CreateSipMediaApplicationCommand = exports.se_CreateRoomMembershipCommand = exports.se_CreateRoomCommand = exports.se_CreateProxySessionCommand = exports.se_CreatePhoneNumberOrderCommand = exports.se_CreateMeetingWithAttendeesCommand = exports.se_CreateMeetingDialOutCommand = exports.se_CreateMeetingCommand = exports.se_CreateMediaCapturePipelineCommand = exports.se_CreateChannelModeratorCommand = exports.se_CreateChannelMembershipCommand = exports.se_CreateChannelBanCommand = exports.se_CreateChannelCommand = exports.se_CreateBotCommand = exports.se_CreateAttendeeCommand = exports.se_CreateAppInstanceUserCommand = exports.se_CreateAppInstanceAdminCommand = exports.se_CreateAppInstanceCommand = exports.se_CreateAccountCommand = exports.se_BatchUpdateUserCommand = exports.se_BatchUpdatePhoneNumberCommand = exports.se_BatchUnsuspendUserCommand = exports.se_BatchSuspendUserCommand = exports.se_BatchDeletePhoneNumberCommand = exports.se_BatchCreateRoomMembershipCommand = exports.se_BatchCreateChannelMembershipCommand = exports.se_BatchCreateAttendeeCommand = exports.se_AssociateSigninDelegateGroupsWithAccountCommand = exports.se_AssociatePhoneNumberWithUserCommand = exports.se_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = exports.se_AssociatePhoneNumbersWithVoiceConnectorCommand = void 0;
    exports.se_GetUserSettingsCommand = exports.se_GetUserCommand = exports.se_GetSipRuleCommand = exports.se_GetSipMediaApplicationLoggingConfigurationCommand = exports.se_GetSipMediaApplicationCommand = exports.se_GetRoomCommand = exports.se_GetRetentionSettingsCommand = exports.se_GetProxySessionCommand = exports.se_GetPhoneNumberSettingsCommand = exports.se_GetPhoneNumberOrderCommand = exports.se_GetPhoneNumberCommand = exports.se_GetMessagingSessionEndpointCommand = exports.se_GetMeetingCommand = exports.se_GetMediaCapturePipelineCommand = exports.se_GetGlobalSettingsCommand = exports.se_GetEventsConfigurationCommand = exports.se_GetChannelMessageCommand = exports.se_GetBotCommand = exports.se_GetAttendeeCommand = exports.se_GetAppInstanceStreamingConfigurationsCommand = exports.se_GetAppInstanceRetentionSettingsCommand = exports.se_GetAccountSettingsCommand = exports.se_GetAccountCommand = exports.se_DisassociateSigninDelegateGroupsFromAccountCommand = exports.se_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = exports.se_DisassociatePhoneNumbersFromVoiceConnectorCommand = exports.se_DisassociatePhoneNumberFromUserCommand = exports.se_DescribeChannelModeratorCommand = exports.se_DescribeChannelModeratedByAppInstanceUserCommand = exports.se_DescribeChannelMembershipForAppInstanceUserCommand = exports.se_DescribeChannelMembershipCommand = exports.se_DescribeChannelBanCommand = exports.se_DescribeChannelCommand = exports.se_DescribeAppInstanceUserCommand = exports.se_DescribeAppInstanceAdminCommand = exports.se_DescribeAppInstanceCommand = exports.se_DeleteVoiceConnectorTerminationCredentialsCommand = exports.se_DeleteVoiceConnectorTerminationCommand = exports.se_DeleteVoiceConnectorStreamingConfigurationCommand = exports.se_DeleteVoiceConnectorProxyCommand = exports.se_DeleteVoiceConnectorOriginationCommand = exports.se_DeleteVoiceConnectorGroupCommand = exports.se_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = exports.se_DeleteVoiceConnectorCommand = exports.se_DeleteSipRuleCommand = exports.se_DeleteSipMediaApplicationCommand = exports.se_DeleteRoomMembershipCommand = exports.se_DeleteRoomCommand = exports.se_DeleteProxySessionCommand = exports.se_DeletePhoneNumberCommand = void 0;
    exports.se_PutVoiceConnectorProxyCommand = exports.se_PutVoiceConnectorOriginationCommand = exports.se_PutVoiceConnectorLoggingConfigurationCommand = exports.se_PutVoiceConnectorEmergencyCallingConfigurationCommand = exports.se_PutSipMediaApplicationLoggingConfigurationCommand = exports.se_PutRetentionSettingsCommand = exports.se_PutEventsConfigurationCommand = exports.se_PutAppInstanceStreamingConfigurationsCommand = exports.se_PutAppInstanceRetentionSettingsCommand = exports.se_LogoutUserCommand = exports.se_ListVoiceConnectorTerminationCredentialsCommand = exports.se_ListVoiceConnectorsCommand = exports.se_ListVoiceConnectorGroupsCommand = exports.se_ListUsersCommand = exports.se_ListTagsForResourceCommand = exports.se_ListSupportedPhoneNumberCountriesCommand = exports.se_ListSipRulesCommand = exports.se_ListSipMediaApplicationsCommand = exports.se_ListRoomsCommand = exports.se_ListRoomMembershipsCommand = exports.se_ListProxySessionsCommand = exports.se_ListPhoneNumbersCommand = exports.se_ListPhoneNumberOrdersCommand = exports.se_ListMeetingTagsCommand = exports.se_ListMeetingsCommand = exports.se_ListMediaCapturePipelinesCommand = exports.se_ListChannelsModeratedByAppInstanceUserCommand = exports.se_ListChannelsCommand = exports.se_ListChannelModeratorsCommand = exports.se_ListChannelMessagesCommand = exports.se_ListChannelMembershipsForAppInstanceUserCommand = exports.se_ListChannelMembershipsCommand = exports.se_ListChannelBansCommand = exports.se_ListBotsCommand = exports.se_ListAttendeeTagsCommand = exports.se_ListAttendeesCommand = exports.se_ListAppInstanceUsersCommand = exports.se_ListAppInstancesCommand = exports.se_ListAppInstanceAdminsCommand = exports.se_ListAccountsCommand = exports.se_InviteUsersCommand = exports.se_GetVoiceConnectorTerminationHealthCommand = exports.se_GetVoiceConnectorTerminationCommand = exports.se_GetVoiceConnectorStreamingConfigurationCommand = exports.se_GetVoiceConnectorProxyCommand = exports.se_GetVoiceConnectorOriginationCommand = exports.se_GetVoiceConnectorLoggingConfigurationCommand = exports.se_GetVoiceConnectorGroupCommand = exports.se_GetVoiceConnectorEmergencyCallingConfigurationCommand = exports.se_GetVoiceConnectorCommand = void 0;
    exports.de_BatchSuspendUserCommand = exports.de_BatchDeletePhoneNumberCommand = exports.de_BatchCreateRoomMembershipCommand = exports.de_BatchCreateChannelMembershipCommand = exports.de_BatchCreateAttendeeCommand = exports.de_AssociateSigninDelegateGroupsWithAccountCommand = exports.de_AssociatePhoneNumberWithUserCommand = exports.de_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = exports.de_AssociatePhoneNumbersWithVoiceConnectorCommand = exports.se_ValidateE911AddressCommand = exports.se_UpdateVoiceConnectorGroupCommand = exports.se_UpdateVoiceConnectorCommand = exports.se_UpdateUserSettingsCommand = exports.se_UpdateUserCommand = exports.se_UpdateSipRuleCommand = exports.se_UpdateSipMediaApplicationCallCommand = exports.se_UpdateSipMediaApplicationCommand = exports.se_UpdateRoomMembershipCommand = exports.se_UpdateRoomCommand = exports.se_UpdateProxySessionCommand = exports.se_UpdatePhoneNumberSettingsCommand = exports.se_UpdatePhoneNumberCommand = exports.se_UpdateGlobalSettingsCommand = exports.se_UpdateChannelReadMarkerCommand = exports.se_UpdateChannelMessageCommand = exports.se_UpdateChannelCommand = exports.se_UpdateBotCommand = exports.se_UpdateAppInstanceUserCommand = exports.se_UpdateAppInstanceCommand = exports.se_UpdateAccountSettingsCommand = exports.se_UpdateAccountCommand = exports.se_UntagResourceCommand = exports.se_UntagMeetingCommand = exports.se_UntagAttendeeCommand = exports.se_TagResourceCommand = exports.se_TagMeetingCommand = exports.se_TagAttendeeCommand = exports.se_StopMeetingTranscriptionCommand = exports.se_StartMeetingTranscriptionCommand = exports.se_SendChannelMessageCommand = exports.se_SearchAvailablePhoneNumbersCommand = exports.se_RestorePhoneNumberCommand = exports.se_ResetPersonalPINCommand = exports.se_RegenerateSecurityTokenCommand = exports.se_RedactRoomMessageCommand = exports.se_RedactConversationMessageCommand = exports.se_RedactChannelMessageCommand = exports.se_PutVoiceConnectorTerminationCredentialsCommand = exports.se_PutVoiceConnectorTerminationCommand = exports.se_PutVoiceConnectorStreamingConfigurationCommand = void 0;
    exports.de_DeleteVoiceConnectorGroupCommand = exports.de_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = exports.de_DeleteVoiceConnectorCommand = exports.de_DeleteSipRuleCommand = exports.de_DeleteSipMediaApplicationCommand = exports.de_DeleteRoomMembershipCommand = exports.de_DeleteRoomCommand = exports.de_DeleteProxySessionCommand = exports.de_DeletePhoneNumberCommand = exports.de_DeleteMeetingCommand = exports.de_DeleteMediaCapturePipelineCommand = exports.de_DeleteEventsConfigurationCommand = exports.de_DeleteChannelModeratorCommand = exports.de_DeleteChannelMessageCommand = exports.de_DeleteChannelMembershipCommand = exports.de_DeleteChannelBanCommand = exports.de_DeleteChannelCommand = exports.de_DeleteAttendeeCommand = exports.de_DeleteAppInstanceUserCommand = exports.de_DeleteAppInstanceStreamingConfigurationsCommand = exports.de_DeleteAppInstanceAdminCommand = exports.de_DeleteAppInstanceCommand = exports.de_DeleteAccountCommand = exports.de_CreateVoiceConnectorGroupCommand = exports.de_CreateVoiceConnectorCommand = exports.de_CreateUserCommand = exports.de_CreateSipRuleCommand = exports.de_CreateSipMediaApplicationCallCommand = exports.de_CreateSipMediaApplicationCommand = exports.de_CreateRoomMembershipCommand = exports.de_CreateRoomCommand = exports.de_CreateProxySessionCommand = exports.de_CreatePhoneNumberOrderCommand = exports.de_CreateMeetingWithAttendeesCommand = exports.de_CreateMeetingDialOutCommand = exports.de_CreateMeetingCommand = exports.de_CreateMediaCapturePipelineCommand = exports.de_CreateChannelModeratorCommand = exports.de_CreateChannelMembershipCommand = exports.de_CreateChannelBanCommand = exports.de_CreateChannelCommand = exports.de_CreateBotCommand = exports.de_CreateAttendeeCommand = exports.de_CreateAppInstanceUserCommand = exports.de_CreateAppInstanceAdminCommand = exports.de_CreateAppInstanceCommand = exports.de_CreateAccountCommand = exports.de_BatchUpdateUserCommand = exports.de_BatchUpdatePhoneNumberCommand = exports.de_BatchUnsuspendUserCommand = void 0;
    exports.de_GetVoiceConnectorTerminationHealthCommand = exports.de_GetVoiceConnectorTerminationCommand = exports.de_GetVoiceConnectorStreamingConfigurationCommand = exports.de_GetVoiceConnectorProxyCommand = exports.de_GetVoiceConnectorOriginationCommand = exports.de_GetVoiceConnectorLoggingConfigurationCommand = exports.de_GetVoiceConnectorGroupCommand = exports.de_GetVoiceConnectorEmergencyCallingConfigurationCommand = exports.de_GetVoiceConnectorCommand = exports.de_GetUserSettingsCommand = exports.de_GetUserCommand = exports.de_GetSipRuleCommand = exports.de_GetSipMediaApplicationLoggingConfigurationCommand = exports.de_GetSipMediaApplicationCommand = exports.de_GetRoomCommand = exports.de_GetRetentionSettingsCommand = exports.de_GetProxySessionCommand = exports.de_GetPhoneNumberSettingsCommand = exports.de_GetPhoneNumberOrderCommand = exports.de_GetPhoneNumberCommand = exports.de_GetMessagingSessionEndpointCommand = exports.de_GetMeetingCommand = exports.de_GetMediaCapturePipelineCommand = exports.de_GetGlobalSettingsCommand = exports.de_GetEventsConfigurationCommand = exports.de_GetChannelMessageCommand = exports.de_GetBotCommand = exports.de_GetAttendeeCommand = exports.de_GetAppInstanceStreamingConfigurationsCommand = exports.de_GetAppInstanceRetentionSettingsCommand = exports.de_GetAccountSettingsCommand = exports.de_GetAccountCommand = exports.de_DisassociateSigninDelegateGroupsFromAccountCommand = exports.de_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = exports.de_DisassociatePhoneNumbersFromVoiceConnectorCommand = exports.de_DisassociatePhoneNumberFromUserCommand = exports.de_DescribeChannelModeratorCommand = exports.de_DescribeChannelModeratedByAppInstanceUserCommand = exports.de_DescribeChannelMembershipForAppInstanceUserCommand = exports.de_DescribeChannelMembershipCommand = exports.de_DescribeChannelBanCommand = exports.de_DescribeChannelCommand = exports.de_DescribeAppInstanceUserCommand = exports.de_DescribeAppInstanceAdminCommand = exports.de_DescribeAppInstanceCommand = exports.de_DeleteVoiceConnectorTerminationCredentialsCommand = exports.de_DeleteVoiceConnectorTerminationCommand = exports.de_DeleteVoiceConnectorStreamingConfigurationCommand = exports.de_DeleteVoiceConnectorProxyCommand = exports.de_DeleteVoiceConnectorOriginationCommand = void 0;
    exports.de_RestorePhoneNumberCommand = exports.de_ResetPersonalPINCommand = exports.de_RegenerateSecurityTokenCommand = exports.de_RedactRoomMessageCommand = exports.de_RedactConversationMessageCommand = exports.de_RedactChannelMessageCommand = exports.de_PutVoiceConnectorTerminationCredentialsCommand = exports.de_PutVoiceConnectorTerminationCommand = exports.de_PutVoiceConnectorStreamingConfigurationCommand = exports.de_PutVoiceConnectorProxyCommand = exports.de_PutVoiceConnectorOriginationCommand = exports.de_PutVoiceConnectorLoggingConfigurationCommand = exports.de_PutVoiceConnectorEmergencyCallingConfigurationCommand = exports.de_PutSipMediaApplicationLoggingConfigurationCommand = exports.de_PutRetentionSettingsCommand = exports.de_PutEventsConfigurationCommand = exports.de_PutAppInstanceStreamingConfigurationsCommand = exports.de_PutAppInstanceRetentionSettingsCommand = exports.de_LogoutUserCommand = exports.de_ListVoiceConnectorTerminationCredentialsCommand = exports.de_ListVoiceConnectorsCommand = exports.de_ListVoiceConnectorGroupsCommand = exports.de_ListUsersCommand = exports.de_ListTagsForResourceCommand = exports.de_ListSupportedPhoneNumberCountriesCommand = exports.de_ListSipRulesCommand = exports.de_ListSipMediaApplicationsCommand = exports.de_ListRoomsCommand = exports.de_ListRoomMembershipsCommand = exports.de_ListProxySessionsCommand = exports.de_ListPhoneNumbersCommand = exports.de_ListPhoneNumberOrdersCommand = exports.de_ListMeetingTagsCommand = exports.de_ListMeetingsCommand = exports.de_ListMediaCapturePipelinesCommand = exports.de_ListChannelsModeratedByAppInstanceUserCommand = exports.de_ListChannelsCommand = exports.de_ListChannelModeratorsCommand = exports.de_ListChannelMessagesCommand = exports.de_ListChannelMembershipsForAppInstanceUserCommand = exports.de_ListChannelMembershipsCommand = exports.de_ListChannelBansCommand = exports.de_ListBotsCommand = exports.de_ListAttendeeTagsCommand = exports.de_ListAttendeesCommand = exports.de_ListAppInstanceUsersCommand = exports.de_ListAppInstancesCommand = exports.de_ListAppInstanceAdminsCommand = exports.de_ListAccountsCommand = exports.de_InviteUsersCommand = void 0;
    exports.de_ValidateE911AddressCommand = exports.de_UpdateVoiceConnectorGroupCommand = exports.de_UpdateVoiceConnectorCommand = exports.de_UpdateUserSettingsCommand = exports.de_UpdateUserCommand = exports.de_UpdateSipRuleCommand = exports.de_UpdateSipMediaApplicationCallCommand = exports.de_UpdateSipMediaApplicationCommand = exports.de_UpdateRoomMembershipCommand = exports.de_UpdateRoomCommand = exports.de_UpdateProxySessionCommand = exports.de_UpdatePhoneNumberSettingsCommand = exports.de_UpdatePhoneNumberCommand = exports.de_UpdateGlobalSettingsCommand = exports.de_UpdateChannelReadMarkerCommand = exports.de_UpdateChannelMessageCommand = exports.de_UpdateChannelCommand = exports.de_UpdateBotCommand = exports.de_UpdateAppInstanceUserCommand = exports.de_UpdateAppInstanceCommand = exports.de_UpdateAccountSettingsCommand = exports.de_UpdateAccountCommand = exports.de_UntagResourceCommand = exports.de_UntagMeetingCommand = exports.de_UntagAttendeeCommand = exports.de_TagResourceCommand = exports.de_TagMeetingCommand = exports.de_TagAttendeeCommand = exports.de_StopMeetingTranscriptionCommand = exports.de_StartMeetingTranscriptionCommand = exports.de_SendChannelMessageCommand = exports.de_SearchAvailablePhoneNumbersCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var ChimeServiceException_1 = require_ChimeServiceException();
    var models_0_1 = require_models_04();
    var se_AssociatePhoneNumbersWithVoiceConnectorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "associate-phone-numbers"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        E164PhoneNumbers: (_) => (0, smithy_client_1._json)(_),
        ForceAssociate: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_AssociatePhoneNumbersWithVoiceConnectorCommand = se_AssociatePhoneNumbersWithVoiceConnectorCommand;
    var se_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connector-groups/{VoiceConnectorGroupId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "associate-phone-numbers"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        E164PhoneNumbers: (_) => (0, smithy_client_1._json)(_),
        ForceAssociate: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = se_AssociatePhoneNumbersWithVoiceConnectorGroupCommand;
    var se_AssociatePhoneNumberWithUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users/{UserId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "associate-phone-number"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        E164PhoneNumber: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_AssociatePhoneNumberWithUserCommand = se_AssociatePhoneNumberWithUserCommand;
    var se_AssociateSigninDelegateGroupsWithAccountCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "associate-signin-delegate-groups"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        SigninDelegateGroups: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_AssociateSigninDelegateGroupsWithAccountCommand = se_AssociateSigninDelegateGroupsWithAccountCommand;
    var se_BatchCreateAttendeeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/attendees`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "batch-create"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Attendees: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_BatchCreateAttendeeCommand = se_BatchCreateAttendeeCommand;
    var se_BatchCreateChannelMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "batch-create"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        MemberArns: (_) => (0, smithy_client_1._json)(_),
        Type: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_BatchCreateChannelMembershipCommand = se_BatchCreateChannelMembershipCommand;
    var se_BatchCreateRoomMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "batch-create"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        MembershipItemList: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_BatchCreateRoomMembershipCommand = se_BatchCreateRoomMembershipCommand;
    var se_BatchDeletePhoneNumberCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-numbers`;
      const query = (0, smithy_client_1.map)({
        operation: [, "batch-delete"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        PhoneNumberIds: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_BatchDeletePhoneNumberCommand = se_BatchDeletePhoneNumberCommand;
    var se_BatchSuspendUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "suspend"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        UserIdList: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_BatchSuspendUserCommand = se_BatchSuspendUserCommand;
    var se_BatchUnsuspendUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "unsuspend"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        UserIdList: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_BatchUnsuspendUserCommand = se_BatchUnsuspendUserCommand;
    var se_BatchUpdatePhoneNumberCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-numbers`;
      const query = (0, smithy_client_1.map)({
        operation: [, "batch-update"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        UpdatePhoneNumberRequestItems: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_BatchUpdatePhoneNumberCommand = se_BatchUpdatePhoneNumberCommand;
    var se_BatchUpdateUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        UpdateUserRequestItems: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_BatchUpdateUserCommand = se_BatchUpdateUserCommand;
    var se_CreateAccountCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAccountCommand = se_CreateAccountCommand;
    var se_CreateAppInstanceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Metadata: [],
        Name: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAppInstanceCommand = se_CreateAppInstanceCommand;
    var se_CreateAppInstanceAdminCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/admins`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceAdminArn: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAppInstanceAdminCommand = se_CreateAppInstanceAdminCommand;
    var se_CreateAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceArn: [],
        AppInstanceUserId: [],
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Metadata: [],
        Name: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAppInstanceUserCommand = se_CreateAppInstanceUserCommand;
    var se_CreateAttendeeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/attendees`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ExternalUserId: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAttendeeCommand = se_CreateAttendeeCommand;
    var se_CreateBotCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/bots`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        DisplayName: [],
        Domain: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateBotCommand = se_CreateBotCommand;
    var se_CreateChannelCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceArn: [],
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Metadata: [],
        Mode: [],
        Name: [],
        Privacy: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelCommand = se_CreateChannelCommand;
    var se_CreateChannelBanCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/bans`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        MemberArn: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelBanCommand = se_CreateChannelBanCommand;
    var se_CreateChannelMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        MemberArn: [],
        Type: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelMembershipCommand = se_CreateChannelMembershipCommand;
    var se_CreateChannelModeratorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/moderators`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ChannelModeratorArn: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelModeratorCommand = se_CreateChannelModeratorCommand;
    var se_CreateMediaCapturePipelineCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/media-capture-pipelines`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ChimeSdkMeetingConfiguration: (_) => (0, smithy_client_1._json)(_),
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        SinkArn: [],
        SinkType: [],
        SourceArn: [],
        SourceType: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateMediaCapturePipelineCommand = se_CreateMediaCapturePipelineCommand;
    var se_CreateMeetingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ExternalMeetingId: [],
        MediaRegion: [],
        MeetingHostId: [],
        NotificationsConfiguration: (_) => (0, smithy_client_1._json)(_),
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateMeetingCommand = se_CreateMeetingCommand;
    var se_CreateMeetingDialOutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/dial-outs`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        FromPhoneNumber: [],
        JoinToken: [],
        ToPhoneNumber: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateMeetingDialOutCommand = se_CreateMeetingDialOutCommand;
    var se_CreateMeetingWithAttendeesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings`;
      const query = (0, smithy_client_1.map)({
        operation: [, "create-attendees"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Attendees: (_) => (0, smithy_client_1._json)(_),
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ExternalMeetingId: [],
        MediaRegion: [],
        MeetingHostId: [],
        NotificationsConfiguration: (_) => (0, smithy_client_1._json)(_),
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_CreateMeetingWithAttendeesCommand = se_CreateMeetingWithAttendeesCommand;
    var se_CreatePhoneNumberOrderCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-number-orders`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        E164PhoneNumbers: (_) => (0, smithy_client_1._json)(_),
        ProductType: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreatePhoneNumberOrderCommand = se_CreatePhoneNumberOrderCommand;
    var se_CreateProxySessionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/proxy-sessions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Capabilities: (_) => (0, smithy_client_1._json)(_),
        ExpiryMinutes: [],
        GeoMatchLevel: [],
        GeoMatchParams: (_) => (0, smithy_client_1._json)(_),
        Name: [],
        NumberSelectionBehavior: [],
        ParticipantPhoneNumbers: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateProxySessionCommand = se_CreateProxySessionCommand;
    var se_CreateRoomCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateRoomCommand = se_CreateRoomCommand;
    var se_CreateRoomMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        MemberId: [],
        Role: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateRoomMembershipCommand = se_CreateRoomMembershipCommand;
    var se_CreateSipMediaApplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AwsRegion: [],
        Endpoints: (_) => (0, smithy_client_1._json)(_),
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateSipMediaApplicationCommand = se_CreateSipMediaApplicationCommand;
    var se_CreateSipMediaApplicationCallCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications/{SipMediaApplicationId}/calls`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        FromPhoneNumber: [],
        SipHeaders: (_) => (0, smithy_client_1._json)(_),
        ToPhoneNumber: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateSipMediaApplicationCallCommand = se_CreateSipMediaApplicationCallCommand;
    var se_CreateSipRuleCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-rules`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Disabled: [],
        Name: [],
        TargetApplications: (_) => (0, smithy_client_1._json)(_),
        TriggerType: [],
        TriggerValue: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateSipRuleCommand = se_CreateSipRuleCommand;
    var se_CreateUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "create"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Email: [],
        UserType: [],
        Username: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_CreateUserCommand = se_CreateUserCommand;
    var se_CreateVoiceConnectorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AwsRegion: [],
        Name: [],
        RequireEncryption: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateVoiceConnectorCommand = se_CreateVoiceConnectorCommand;
    var se_CreateVoiceConnectorGroupCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connector-groups`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Name: [],
        VoiceConnectorItems: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateVoiceConnectorGroupCommand = se_CreateVoiceConnectorGroupCommand;
    var se_DeleteAccountCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAccountCommand = se_DeleteAccountCommand;
    var se_DeleteAppInstanceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAppInstanceCommand = se_DeleteAppInstanceCommand;
    var se_DeleteAppInstanceAdminCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/admins/{AppInstanceAdminArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceAdminArn", () => input.AppInstanceAdminArn, "{AppInstanceAdminArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAppInstanceAdminCommand = se_DeleteAppInstanceAdminCommand;
    var se_DeleteAppInstanceStreamingConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/streaming-configurations`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAppInstanceStreamingConfigurationsCommand = se_DeleteAppInstanceStreamingConfigurationsCommand;
    var se_DeleteAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAppInstanceUserCommand = se_DeleteAppInstanceUserCommand;
    var se_DeleteAttendeeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/attendees/{AttendeeId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAttendeeCommand = se_DeleteAttendeeCommand;
    var se_DeleteChannelCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelCommand = se_DeleteChannelCommand;
    var se_DeleteChannelBanCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/bans/{MemberArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelBanCommand = se_DeleteChannelBanCommand;
    var se_DeleteChannelMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships/{MemberArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelMembershipCommand = se_DeleteChannelMembershipCommand;
    var se_DeleteChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelMessageCommand = se_DeleteChannelMessageCommand;
    var se_DeleteChannelModeratorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/moderators/{ChannelModeratorArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelModeratorArn", () => input.ChannelModeratorArn, "{ChannelModeratorArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelModeratorCommand = se_DeleteChannelModeratorCommand;
    var se_DeleteEventsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/bots/{BotId}/events-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "BotId", () => input.BotId, "{BotId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteEventsConfigurationCommand = se_DeleteEventsConfigurationCommand;
    var se_DeleteMediaCapturePipelineCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/media-capture-pipelines/{MediaPipelineId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MediaPipelineId", () => input.MediaPipelineId, "{MediaPipelineId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteMediaCapturePipelineCommand = se_DeleteMediaCapturePipelineCommand;
    var se_DeleteMeetingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteMeetingCommand = se_DeleteMeetingCommand;
    var se_DeletePhoneNumberCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-numbers/{PhoneNumberId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeletePhoneNumberCommand = se_DeletePhoneNumberCommand;
    var se_DeleteProxySessionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ProxySessionId", () => input.ProxySessionId, "{ProxySessionId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteProxySessionCommand = se_DeleteProxySessionCommand;
    var se_DeleteRoomCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteRoomCommand = se_DeleteRoomCommand;
    var se_DeleteRoomMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}/memberships/{MemberId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberId", () => input.MemberId, "{MemberId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteRoomMembershipCommand = se_DeleteRoomMembershipCommand;
    var se_DeleteSipMediaApplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications/{SipMediaApplicationId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteSipMediaApplicationCommand = se_DeleteSipMediaApplicationCommand;
    var se_DeleteSipRuleCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-rules/{SipRuleId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipRuleId", () => input.SipRuleId, "{SipRuleId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteSipRuleCommand = se_DeleteSipRuleCommand;
    var se_DeleteVoiceConnectorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteVoiceConnectorCommand = se_DeleteVoiceConnectorCommand;
    var se_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = se_DeleteVoiceConnectorEmergencyCallingConfigurationCommand;
    var se_DeleteVoiceConnectorGroupCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connector-groups/{VoiceConnectorGroupId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteVoiceConnectorGroupCommand = se_DeleteVoiceConnectorGroupCommand;
    var se_DeleteVoiceConnectorOriginationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/origination`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteVoiceConnectorOriginationCommand = se_DeleteVoiceConnectorOriginationCommand;
    var se_DeleteVoiceConnectorProxyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteVoiceConnectorProxyCommand = se_DeleteVoiceConnectorProxyCommand;
    var se_DeleteVoiceConnectorStreamingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/streaming-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteVoiceConnectorStreamingConfigurationCommand = se_DeleteVoiceConnectorStreamingConfigurationCommand;
    var se_DeleteVoiceConnectorTerminationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/termination`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteVoiceConnectorTerminationCommand = se_DeleteVoiceConnectorTerminationCommand;
    var se_DeleteVoiceConnectorTerminationCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/termination/credentials`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "delete"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Usernames: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DeleteVoiceConnectorTerminationCredentialsCommand = se_DeleteVoiceConnectorTerminationCredentialsCommand;
    var se_DescribeAppInstanceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeAppInstanceCommand = se_DescribeAppInstanceCommand;
    var se_DescribeAppInstanceAdminCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/admins/{AppInstanceAdminArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceAdminArn", () => input.AppInstanceAdminArn, "{AppInstanceAdminArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeAppInstanceAdminCommand = se_DescribeAppInstanceAdminCommand;
    var se_DescribeAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeAppInstanceUserCommand = se_DescribeAppInstanceUserCommand;
    var se_DescribeChannelCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeChannelCommand = se_DescribeChannelCommand;
    var se_DescribeChannelBanCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/bans/{MemberArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeChannelBanCommand = se_DescribeChannelBanCommand;
    var se_DescribeChannelMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships/{MemberArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeChannelMembershipCommand = se_DescribeChannelMembershipCommand;
    var se_DescribeChannelMembershipForAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        scope: [, "app-instance-user-membership"],
        "app-instance-user-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceUserArn, `AppInstanceUserArn`)]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DescribeChannelMembershipForAppInstanceUserCommand = se_DescribeChannelMembershipForAppInstanceUserCommand;
    var se_DescribeChannelModeratedByAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        scope: [, "app-instance-user-moderated-channel"],
        "app-instance-user-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceUserArn, `AppInstanceUserArn`)]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DescribeChannelModeratedByAppInstanceUserCommand = se_DescribeChannelModeratedByAppInstanceUserCommand;
    var se_DescribeChannelModeratorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/moderators/{ChannelModeratorArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelModeratorArn", () => input.ChannelModeratorArn, "{ChannelModeratorArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeChannelModeratorCommand = se_DescribeChannelModeratorCommand;
    var se_DisassociatePhoneNumberFromUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users/{UserId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "disassociate-phone-number"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DisassociatePhoneNumberFromUserCommand = se_DisassociatePhoneNumberFromUserCommand;
    var se_DisassociatePhoneNumbersFromVoiceConnectorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "disassociate-phone-numbers"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        E164PhoneNumbers: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DisassociatePhoneNumbersFromVoiceConnectorCommand = se_DisassociatePhoneNumbersFromVoiceConnectorCommand;
    var se_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connector-groups/{VoiceConnectorGroupId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "disassociate-phone-numbers"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        E164PhoneNumbers: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = se_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand;
    var se_DisassociateSigninDelegateGroupsFromAccountCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "disassociate-signin-delegate-groups"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        GroupNames: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DisassociateSigninDelegateGroupsFromAccountCommand = se_DisassociateSigninDelegateGroupsFromAccountCommand;
    var se_GetAccountCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetAccountCommand = se_GetAccountCommand;
    var se_GetAccountSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetAccountSettingsCommand = se_GetAccountSettingsCommand;
    var se_GetAppInstanceRetentionSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/retention-settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetAppInstanceRetentionSettingsCommand = se_GetAppInstanceRetentionSettingsCommand;
    var se_GetAppInstanceStreamingConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/streaming-configurations`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetAppInstanceStreamingConfigurationsCommand = se_GetAppInstanceStreamingConfigurationsCommand;
    var se_GetAttendeeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/attendees/{AttendeeId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetAttendeeCommand = se_GetAttendeeCommand;
    var se_GetBotCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/bots/{BotId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "BotId", () => input.BotId, "{BotId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetBotCommand = se_GetBotCommand;
    var se_GetChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetChannelMessageCommand = se_GetChannelMessageCommand;
    var se_GetEventsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/bots/{BotId}/events-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "BotId", () => input.BotId, "{BotId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetEventsConfigurationCommand = se_GetEventsConfigurationCommand;
    var se_GetGlobalSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/settings`;
      let body;
      body = "";
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetGlobalSettingsCommand = se_GetGlobalSettingsCommand;
    var se_GetMediaCapturePipelineCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/media-capture-pipelines/{MediaPipelineId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MediaPipelineId", () => input.MediaPipelineId, "{MediaPipelineId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetMediaCapturePipelineCommand = se_GetMediaCapturePipelineCommand;
    var se_GetMeetingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetMeetingCommand = se_GetMeetingCommand;
    var se_GetMessagingSessionEndpointCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/endpoints/messaging-session`;
      let body;
      body = "";
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetMessagingSessionEndpointCommand = se_GetMessagingSessionEndpointCommand;
    var se_GetPhoneNumberCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-numbers/{PhoneNumberId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetPhoneNumberCommand = se_GetPhoneNumberCommand;
    var se_GetPhoneNumberOrderCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-number-orders/{PhoneNumberOrderId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PhoneNumberOrderId", () => input.PhoneNumberOrderId, "{PhoneNumberOrderId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetPhoneNumberOrderCommand = se_GetPhoneNumberOrderCommand;
    var se_GetPhoneNumberSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/settings/phone-number`;
      let body;
      body = "";
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetPhoneNumberSettingsCommand = se_GetPhoneNumberSettingsCommand;
    var se_GetProxySessionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ProxySessionId", () => input.ProxySessionId, "{ProxySessionId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetProxySessionCommand = se_GetProxySessionCommand;
    var se_GetRetentionSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/retention-settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetRetentionSettingsCommand = se_GetRetentionSettingsCommand;
    var se_GetRoomCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetRoomCommand = se_GetRoomCommand;
    var se_GetSipMediaApplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications/{SipMediaApplicationId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetSipMediaApplicationCommand = se_GetSipMediaApplicationCommand;
    var se_GetSipMediaApplicationLoggingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications/{SipMediaApplicationId}/logging-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetSipMediaApplicationLoggingConfigurationCommand = se_GetSipMediaApplicationLoggingConfigurationCommand;
    var se_GetSipRuleCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-rules/{SipRuleId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipRuleId", () => input.SipRuleId, "{SipRuleId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetSipRuleCommand = se_GetSipRuleCommand;
    var se_GetUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users/{UserId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetUserCommand = se_GetUserCommand;
    var se_GetUserSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users/{UserId}/settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetUserSettingsCommand = se_GetUserSettingsCommand;
    var se_GetVoiceConnectorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorCommand = se_GetVoiceConnectorCommand;
    var se_GetVoiceConnectorEmergencyCallingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorEmergencyCallingConfigurationCommand = se_GetVoiceConnectorEmergencyCallingConfigurationCommand;
    var se_GetVoiceConnectorGroupCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connector-groups/{VoiceConnectorGroupId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorGroupCommand = se_GetVoiceConnectorGroupCommand;
    var se_GetVoiceConnectorLoggingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/logging-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorLoggingConfigurationCommand = se_GetVoiceConnectorLoggingConfigurationCommand;
    var se_GetVoiceConnectorOriginationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/origination`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorOriginationCommand = se_GetVoiceConnectorOriginationCommand;
    var se_GetVoiceConnectorProxyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorProxyCommand = se_GetVoiceConnectorProxyCommand;
    var se_GetVoiceConnectorStreamingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/streaming-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorStreamingConfigurationCommand = se_GetVoiceConnectorStreamingConfigurationCommand;
    var se_GetVoiceConnectorTerminationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/termination`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorTerminationCommand = se_GetVoiceConnectorTerminationCommand;
    var se_GetVoiceConnectorTerminationHealthCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/termination/health`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetVoiceConnectorTerminationHealthCommand = se_GetVoiceConnectorTerminationHealthCommand;
    var se_InviteUsersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "add"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        UserEmailList: (_) => (0, smithy_client_1._json)(_),
        UserType: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_InviteUsersCommand = se_InviteUsersCommand;
    var se_ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts`;
      const query = (0, smithy_client_1.map)({
        name: [, input.Name],
        "user-email": [, input.UserEmail],
        "next-token": [, input.NextToken],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAccountsCommand = se_ListAccountsCommand;
    var se_ListAppInstanceAdminsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/admins`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAppInstanceAdminsCommand = se_ListAppInstanceAdminsCommand;
    var se_ListAppInstancesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances`;
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAppInstancesCommand = se_ListAppInstancesCommand;
    var se_ListAppInstanceUsersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users`;
      const query = (0, smithy_client_1.map)({
        "app-instance-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceArn, `AppInstanceArn`)],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAppInstanceUsersCommand = se_ListAppInstanceUsersCommand;
    var se_ListAttendeesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/attendees`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      const query = (0, smithy_client_1.map)({
        "next-token": [, input.NextToken],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAttendeesCommand = se_ListAttendeesCommand;
    var se_ListAttendeeTagsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/attendees/{AttendeeId}/tags`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_ListAttendeeTagsCommand = se_ListAttendeeTagsCommand;
    var se_ListBotsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/bots`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListBotsCommand = se_ListBotsCommand;
    var se_ListChannelBansCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/bans`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelBansCommand = se_ListChannelBansCommand;
    var se_ListChannelMembershipsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        type: [, input.Type],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelMembershipsCommand = se_ListChannelMembershipsCommand;
    var se_ListChannelMembershipsForAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      const query = (0, smithy_client_1.map)({
        scope: [, "app-instance-user-memberships"],
        "app-instance-user-arn": [, input.AppInstanceUserArn],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelMembershipsForAppInstanceUserCommand = se_ListChannelMembershipsForAppInstanceUserCommand;
    var se_ListChannelMessagesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        "sort-order": [, input.SortOrder],
        "not-before": [
          () => input.NotBefore !== void 0,
          () => (input.NotBefore.toISOString().split(".")[0] + "Z").toString()
        ],
        "not-after": [
          () => input.NotAfter !== void 0,
          () => (input.NotAfter.toISOString().split(".")[0] + "Z").toString()
        ],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelMessagesCommand = se_ListChannelMessagesCommand;
    var se_ListChannelModeratorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/moderators`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelModeratorsCommand = se_ListChannelModeratorsCommand;
    var se_ListChannelsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      const query = (0, smithy_client_1.map)({
        "app-instance-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceArn, `AppInstanceArn`)],
        privacy: [, input.Privacy],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelsCommand = se_ListChannelsCommand;
    var se_ListChannelsModeratedByAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      const query = (0, smithy_client_1.map)({
        scope: [, "app-instance-user-moderated-channels"],
        "app-instance-user-arn": [, input.AppInstanceUserArn],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelsModeratedByAppInstanceUserCommand = se_ListChannelsModeratedByAppInstanceUserCommand;
    var se_ListMediaCapturePipelinesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/media-capture-pipelines`;
      const query = (0, smithy_client_1.map)({
        "next-token": [, input.NextToken],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListMediaCapturePipelinesCommand = se_ListMediaCapturePipelinesCommand;
    var se_ListMeetingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings`;
      const query = (0, smithy_client_1.map)({
        "next-token": [, input.NextToken],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListMeetingsCommand = se_ListMeetingsCommand;
    var se_ListMeetingTagsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/tags`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_ListMeetingTagsCommand = se_ListMeetingTagsCommand;
    var se_ListPhoneNumberOrdersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-number-orders`;
      const query = (0, smithy_client_1.map)({
        "next-token": [, input.NextToken],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListPhoneNumberOrdersCommand = se_ListPhoneNumberOrdersCommand;
    var se_ListPhoneNumbersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-numbers`;
      const query = (0, smithy_client_1.map)({
        status: [, input.Status],
        "product-type": [, input.ProductType],
        "filter-name": [, input.FilterName],
        "filter-value": [, input.FilterValue],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListPhoneNumbersCommand = se_ListPhoneNumbersCommand;
    var se_ListProxySessionsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/proxy-sessions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      const query = (0, smithy_client_1.map)({
        status: [, input.Status],
        "next-token": [, input.NextToken],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListProxySessionsCommand = se_ListProxySessionsCommand;
    var se_ListRoomMembershipsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListRoomMembershipsCommand = se_ListRoomMembershipsCommand;
    var se_ListRoomsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        "member-id": [, input.MemberId],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListRoomsCommand = se_ListRoomsCommand;
    var se_ListSipMediaApplicationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications`;
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListSipMediaApplicationsCommand = se_ListSipMediaApplicationsCommand;
    var se_ListSipRulesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-rules`;
      const query = (0, smithy_client_1.map)({
        "sip-media-application": [, input.SipMediaApplicationId],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListSipRulesCommand = se_ListSipRulesCommand;
    var se_ListSupportedPhoneNumberCountriesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-number-countries`;
      const query = (0, smithy_client_1.map)({
        "product-type": [, (0, smithy_client_1.expectNonNull)(input.ProductType, `ProductType`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListSupportedPhoneNumberCountriesCommand = se_ListSupportedPhoneNumberCountriesCommand;
    var se_ListTagsForResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        arn: [, (0, smithy_client_1.expectNonNull)(input.ResourceARN, `ResourceARN`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
    var se_ListUsersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      const query = (0, smithy_client_1.map)({
        "user-email": [, input.UserEmail],
        "user-type": [, input.UserType],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListUsersCommand = se_ListUsersCommand;
    var se_ListVoiceConnectorGroupsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connector-groups`;
      const query = (0, smithy_client_1.map)({
        "next-token": [, input.NextToken],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListVoiceConnectorGroupsCommand = se_ListVoiceConnectorGroupsCommand;
    var se_ListVoiceConnectorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors`;
      const query = (0, smithy_client_1.map)({
        "next-token": [, input.NextToken],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListVoiceConnectorsCommand = se_ListVoiceConnectorsCommand;
    var se_ListVoiceConnectorTerminationCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/termination/credentials`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_ListVoiceConnectorTerminationCredentialsCommand = se_ListVoiceConnectorTerminationCredentialsCommand;
    var se_LogoutUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users/{UserId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "logout"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_LogoutUserCommand = se_LogoutUserCommand;
    var se_PutAppInstanceRetentionSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/retention-settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceRetentionSettings: (_) => (0, smithy_client_1._json)(_)
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutAppInstanceRetentionSettingsCommand = se_PutAppInstanceRetentionSettingsCommand;
    var se_PutAppInstanceStreamingConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/streaming-configurations`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceStreamingConfigurations: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutAppInstanceStreamingConfigurationsCommand = se_PutAppInstanceStreamingConfigurationsCommand;
    var se_PutEventsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/bots/{BotId}/events-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "BotId", () => input.BotId, "{BotId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        LambdaFunctionArn: [],
        OutboundEventsHTTPSEndpoint: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutEventsConfigurationCommand = se_PutEventsConfigurationCommand;
    var se_PutRetentionSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/retention-settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        RetentionSettings: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutRetentionSettingsCommand = se_PutRetentionSettingsCommand;
    var se_PutSipMediaApplicationLoggingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications/{SipMediaApplicationId}/logging-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        SipMediaApplicationLoggingConfiguration: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutSipMediaApplicationLoggingConfigurationCommand = se_PutSipMediaApplicationLoggingConfigurationCommand;
    var se_PutVoiceConnectorEmergencyCallingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/emergency-calling-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        EmergencyCallingConfiguration: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutVoiceConnectorEmergencyCallingConfigurationCommand = se_PutVoiceConnectorEmergencyCallingConfigurationCommand;
    var se_PutVoiceConnectorLoggingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/logging-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        LoggingConfiguration: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutVoiceConnectorLoggingConfigurationCommand = se_PutVoiceConnectorLoggingConfigurationCommand;
    var se_PutVoiceConnectorOriginationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/origination`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Origination: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutVoiceConnectorOriginationCommand = se_PutVoiceConnectorOriginationCommand;
    var se_PutVoiceConnectorProxyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/programmable-numbers/proxy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        DefaultSessionExpiryMinutes: [],
        Disabled: [],
        FallBackPhoneNumber: [],
        PhoneNumberPoolCountries: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutVoiceConnectorProxyCommand = se_PutVoiceConnectorProxyCommand;
    var se_PutVoiceConnectorStreamingConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/streaming-configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        StreamingConfiguration: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutVoiceConnectorStreamingConfigurationCommand = se_PutVoiceConnectorStreamingConfigurationCommand;
    var se_PutVoiceConnectorTerminationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/termination`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Termination: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutVoiceConnectorTerminationCommand = se_PutVoiceConnectorTerminationCommand;
    var se_PutVoiceConnectorTerminationCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/termination/credentials`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "put"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Credentials: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_PutVoiceConnectorTerminationCredentialsCommand = se_PutVoiceConnectorTerminationCredentialsCommand;
    var se_RedactChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "redact"]
      });
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_RedactChannelMessageCommand = se_RedactChannelMessageCommand;
    var se_RedactConversationMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/conversations/{ConversationId}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ConversationId", () => input.ConversationId, "{ConversationId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "redact"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_RedactConversationMessageCommand = se_RedactConversationMessageCommand;
    var se_RedactRoomMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "redact"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_RedactRoomMessageCommand = se_RedactRoomMessageCommand;
    var se_RegenerateSecurityTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/bots/{BotId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "BotId", () => input.BotId, "{BotId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "regenerate-security-token"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_RegenerateSecurityTokenCommand = se_RegenerateSecurityTokenCommand;
    var se_ResetPersonalPINCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users/{UserId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "reset-personal-pin"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ResetPersonalPINCommand = se_ResetPersonalPINCommand;
    var se_RestorePhoneNumberCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-numbers/{PhoneNumberId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "restore"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_RestorePhoneNumberCommand = se_RestorePhoneNumberCommand;
    var se_SearchAvailablePhoneNumbersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/search`;
      const query = (0, smithy_client_1.map)({
        type: [, "phone-numbers"],
        "area-code": [, input.AreaCode],
        city: [, input.City],
        country: [, input.Country],
        state: [, input.State],
        "toll-free-prefix": [, input.TollFreePrefix],
        "phone-number-type": [, input.PhoneNumberType],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_SearchAvailablePhoneNumbersCommand = se_SearchAvailablePhoneNumbersCommand;
    var se_SendChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Content: [],
        Metadata: [],
        Persistence: [],
        Type: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_SendChannelMessageCommand = se_SendChannelMessageCommand;
    var se_StartMeetingTranscriptionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/transcription`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "start"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        TranscriptionConfiguration: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_StartMeetingTranscriptionCommand = se_StartMeetingTranscriptionCommand;
    var se_StopMeetingTranscriptionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/transcription`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "stop"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_StopMeetingTranscriptionCommand = se_StopMeetingTranscriptionCommand;
    var se_TagAttendeeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/attendees/{AttendeeId}/tags`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "add"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_TagAttendeeCommand = se_TagAttendeeCommand;
    var se_TagMeetingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/tags`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "add"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_TagMeetingCommand = se_TagMeetingCommand;
    var se_TagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        operation: [, "tag-resource"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ResourceARN: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_TagResourceCommand = se_TagResourceCommand;
    var se_UntagAttendeeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/attendees/{AttendeeId}/tags`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AttendeeId", () => input.AttendeeId, "{AttendeeId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "delete"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        TagKeys: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_UntagAttendeeCommand = se_UntagAttendeeCommand;
    var se_UntagMeetingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/meetings/{MeetingId}/tags`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MeetingId", () => input.MeetingId, "{MeetingId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "delete"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        TagKeys: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_UntagMeetingCommand = se_UntagMeetingCommand;
    var se_UntagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        operation: [, "untag-resource"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ResourceARN: [],
        TagKeys: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_UntagResourceCommand = se_UntagResourceCommand;
    var se_UpdateAccountCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        DefaultLicense: [],
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateAccountCommand = se_UpdateAccountCommand;
    var se_UpdateAccountSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AccountSettings: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateAccountSettingsCommand = se_UpdateAccountSettingsCommand;
    var se_UpdateAppInstanceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Metadata: [],
        Name: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateAppInstanceCommand = se_UpdateAppInstanceCommand;
    var se_UpdateAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Metadata: [],
        Name: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "identity-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateAppInstanceUserCommand = se_UpdateAppInstanceUserCommand;
    var se_UpdateBotCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/bots/{BotId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "BotId", () => input.BotId, "{BotId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Disabled: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateBotCommand = se_UpdateBotCommand;
    var se_UpdateChannelCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Metadata: [],
        Mode: [],
        Name: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateChannelCommand = se_UpdateChannelCommand;
    var se_UpdateChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Content: [],
        Metadata: []
      }));
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateChannelMessageCommand = se_UpdateChannelMessageCommand;
    var se_UpdateChannelReadMarkerCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/readMarker`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "messaging-" + resolvedHostname;
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateChannelReadMarkerCommand = se_UpdateChannelReadMarkerCommand;
    var se_UpdateGlobalSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/settings`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        BusinessCalling: (_) => (0, smithy_client_1._json)(_),
        VoiceConnector: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateGlobalSettingsCommand = se_UpdateGlobalSettingsCommand;
    var se_UpdatePhoneNumberCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/phone-numbers/{PhoneNumberId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        CallingName: [],
        ProductType: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdatePhoneNumberCommand = se_UpdatePhoneNumberCommand;
    var se_UpdatePhoneNumberSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/settings/phone-number`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        CallingName: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdatePhoneNumberSettingsCommand = se_UpdatePhoneNumberSettingsCommand;
    var se_UpdateProxySessionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}/proxy-sessions/{ProxySessionId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ProxySessionId", () => input.ProxySessionId, "{ProxySessionId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Capabilities: (_) => (0, smithy_client_1._json)(_),
        ExpiryMinutes: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateProxySessionCommand = se_UpdateProxySessionCommand;
    var se_UpdateRoomCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateRoomCommand = se_UpdateRoomCommand;
    var se_UpdateRoomMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/rooms/{RoomId}/memberships/{MemberId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "RoomId", () => input.RoomId, "{RoomId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberId", () => input.MemberId, "{MemberId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Role: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateRoomMembershipCommand = se_UpdateRoomMembershipCommand;
    var se_UpdateSipMediaApplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications/{SipMediaApplicationId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Endpoints: (_) => (0, smithy_client_1._json)(_),
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateSipMediaApplicationCommand = se_UpdateSipMediaApplicationCommand;
    var se_UpdateSipMediaApplicationCallCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-media-applications/{SipMediaApplicationId}/calls/{TransactionId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipMediaApplicationId", () => input.SipMediaApplicationId, "{SipMediaApplicationId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "TransactionId", () => input.TransactionId, "{TransactionId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Arguments: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateSipMediaApplicationCallCommand = se_UpdateSipMediaApplicationCallCommand;
    var se_UpdateSipRuleCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/sip-rules/{SipRuleId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "SipRuleId", () => input.SipRuleId, "{SipRuleId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Disabled: [],
        Name: [],
        TargetApplications: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateSipRuleCommand = se_UpdateSipRuleCommand;
    var se_UpdateUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users/{UserId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AlexaForBusinessMetadata: (_) => (0, smithy_client_1._json)(_),
        LicenseType: [],
        UserType: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateUserCommand = se_UpdateUserCommand;
    var se_UpdateUserSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/accounts/{AccountId}/users/{UserId}/settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AccountId", () => input.AccountId, "{AccountId}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UserId", () => input.UserId, "{UserId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        UserSettings: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateUserSettingsCommand = se_UpdateUserSettingsCommand;
    var se_UpdateVoiceConnectorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connectors/{VoiceConnectorId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorId", () => input.VoiceConnectorId, "{VoiceConnectorId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Name: [],
        RequireEncryption: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateVoiceConnectorCommand = se_UpdateVoiceConnectorCommand;
    var se_UpdateVoiceConnectorGroupCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/voice-connector-groups/{VoiceConnectorGroupId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VoiceConnectorGroupId", () => input.VoiceConnectorGroupId, "{VoiceConnectorGroupId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Name: [],
        VoiceConnectorItems: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateVoiceConnectorGroupCommand = se_UpdateVoiceConnectorGroupCommand;
    var se_ValidateE911AddressCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/emergency-calling/address`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AwsAccountId: [],
        City: [],
        Country: [],
        PostalCode: [],
        State: [],
        StreetInfo: [],
        StreetNumber: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_ValidateE911AddressCommand = se_ValidateE911AddressCommand;
    var de_AssociatePhoneNumbersWithVoiceConnectorCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_AssociatePhoneNumbersWithVoiceConnectorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_AssociatePhoneNumbersWithVoiceConnectorCommand = de_AssociatePhoneNumbersWithVoiceConnectorCommand;
    var de_AssociatePhoneNumbersWithVoiceConnectorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_AssociatePhoneNumbersWithVoiceConnectorGroupCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = de_AssociatePhoneNumbersWithVoiceConnectorGroupCommand;
    var de_AssociatePhoneNumbersWithVoiceConnectorGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_AssociatePhoneNumberWithUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_AssociatePhoneNumberWithUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_AssociatePhoneNumberWithUserCommand = de_AssociatePhoneNumberWithUserCommand;
    var de_AssociatePhoneNumberWithUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_AssociateSigninDelegateGroupsWithAccountCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_AssociateSigninDelegateGroupsWithAccountCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_AssociateSigninDelegateGroupsWithAccountCommand = de_AssociateSigninDelegateGroupsWithAccountCommand;
    var de_AssociateSigninDelegateGroupsWithAccountCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchCreateAttendeeCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_BatchCreateAttendeeCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Attendees: smithy_client_1._json,
        Errors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchCreateAttendeeCommand = de_BatchCreateAttendeeCommand;
    var de_BatchCreateAttendeeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchCreateChannelMembershipCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchCreateChannelMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        BatchChannelMemberships: smithy_client_1._json,
        Errors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchCreateChannelMembershipCommand = de_BatchCreateChannelMembershipCommand;
    var de_BatchCreateChannelMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchCreateRoomMembershipCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_BatchCreateRoomMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Errors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchCreateRoomMembershipCommand = de_BatchCreateRoomMembershipCommand;
    var de_BatchCreateRoomMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchDeletePhoneNumberCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchDeletePhoneNumberCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchDeletePhoneNumberCommand = de_BatchDeletePhoneNumberCommand;
    var de_BatchDeletePhoneNumberCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchSuspendUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchSuspendUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        UserErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchSuspendUserCommand = de_BatchSuspendUserCommand;
    var de_BatchSuspendUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchUnsuspendUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchUnsuspendUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        UserErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchUnsuspendUserCommand = de_BatchUnsuspendUserCommand;
    var de_BatchUnsuspendUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchUpdatePhoneNumberCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchUpdatePhoneNumberCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchUpdatePhoneNumberCommand = de_BatchUpdatePhoneNumberCommand;
    var de_BatchUpdatePhoneNumberCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchUpdateUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchUpdateUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        UserErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchUpdateUserCommand = de_BatchUpdateUserCommand;
    var de_BatchUpdateUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAccountCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAccountCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Account: (_) => de_Account(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAccountCommand = de_CreateAccountCommand;
    var de_CreateAccountCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAppInstanceCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAppInstanceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAppInstanceCommand = de_CreateAppInstanceCommand;
    var de_CreateAppInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAppInstanceAdminCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAppInstanceAdminCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceAdmin: smithy_client_1._json,
        AppInstanceArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAppInstanceAdminCommand = de_CreateAppInstanceAdminCommand;
    var de_CreateAppInstanceAdminCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAppInstanceUserCommand = de_CreateAppInstanceUserCommand;
    var de_CreateAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAttendeeCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAttendeeCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Attendee: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAttendeeCommand = de_CreateAttendeeCommand;
    var de_CreateAttendeeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateBotCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateBotCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Bot: (_) => de_Bot(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateBotCommand = de_CreateBotCommand;
    var de_CreateBotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelCommand = de_CreateChannelCommand;
    var de_CreateChannelCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelBanCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelBanCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        Member: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelBanCommand = de_CreateChannelBanCommand;
    var de_CreateChannelBanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelMembershipCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        Member: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelMembershipCommand = de_CreateChannelMembershipCommand;
    var de_CreateChannelMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelModeratorCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelModeratorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelModerator: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelModeratorCommand = de_CreateChannelModeratorCommand;
    var de_CreateChannelModeratorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateMediaCapturePipelineCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateMediaCapturePipelineCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        MediaCapturePipeline: (_) => de_MediaCapturePipeline(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateMediaCapturePipelineCommand = de_CreateMediaCapturePipelineCommand;
    var de_CreateMediaCapturePipelineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateMeetingCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateMeetingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Meeting: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateMeetingCommand = de_CreateMeetingCommand;
    var de_CreateMeetingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateMeetingDialOutCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateMeetingDialOutCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        TransactionId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateMeetingDialOutCommand = de_CreateMeetingDialOutCommand;
    var de_CreateMeetingDialOutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateMeetingWithAttendeesCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateMeetingWithAttendeesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Attendees: smithy_client_1._json,
        Errors: smithy_client_1._json,
        Meeting: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateMeetingWithAttendeesCommand = de_CreateMeetingWithAttendeesCommand;
    var de_CreateMeetingWithAttendeesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreatePhoneNumberOrderCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreatePhoneNumberOrderCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberOrder: (_) => de_PhoneNumberOrder(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreatePhoneNumberOrderCommand = de_CreatePhoneNumberOrderCommand;
    var de_CreatePhoneNumberOrderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateProxySessionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateProxySessionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ProxySession: (_) => de_ProxySession(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateProxySessionCommand = de_CreateProxySessionCommand;
    var de_CreateProxySessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateRoomCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateRoomCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Room: (_) => de_Room(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateRoomCommand = de_CreateRoomCommand;
    var de_CreateRoomCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateRoomMembershipCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateRoomMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        RoomMembership: (_) => de_RoomMembership(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateRoomMembershipCommand = de_CreateRoomMembershipCommand;
    var de_CreateRoomMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateSipMediaApplicationCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateSipMediaApplicationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipMediaApplication: (_) => de_SipMediaApplication(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateSipMediaApplicationCommand = de_CreateSipMediaApplicationCommand;
    var de_CreateSipMediaApplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateSipMediaApplicationCallCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateSipMediaApplicationCallCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipMediaApplicationCall: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateSipMediaApplicationCallCommand = de_CreateSipMediaApplicationCallCommand;
    var de_CreateSipMediaApplicationCallCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateSipRuleCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateSipRuleCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipRule: (_) => de_SipRule(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateSipRuleCommand = de_CreateSipRuleCommand;
    var de_CreateSipRuleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateUserCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        User: (_) => de_User(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateUserCommand = de_CreateUserCommand;
    var de_CreateUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateVoiceConnectorCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateVoiceConnectorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        VoiceConnector: (_) => de_VoiceConnector(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateVoiceConnectorCommand = de_CreateVoiceConnectorCommand;
    var de_CreateVoiceConnectorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateVoiceConnectorGroupCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateVoiceConnectorGroupCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        VoiceConnectorGroup: (_) => de_VoiceConnectorGroup(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateVoiceConnectorGroupCommand = de_CreateVoiceConnectorGroupCommand;
    var de_CreateVoiceConnectorGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAccountCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAccountCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAccountCommand = de_DeleteAccountCommand;
    var de_DeleteAccountCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnprocessableEntityException":
        case "com.amazonaws.chime#UnprocessableEntityException":
          throw await de_UnprocessableEntityExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAppInstanceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAppInstanceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAppInstanceCommand = de_DeleteAppInstanceCommand;
    var de_DeleteAppInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAppInstanceAdminCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAppInstanceAdminCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAppInstanceAdminCommand = de_DeleteAppInstanceAdminCommand;
    var de_DeleteAppInstanceAdminCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAppInstanceStreamingConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAppInstanceStreamingConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAppInstanceStreamingConfigurationsCommand = de_DeleteAppInstanceStreamingConfigurationsCommand;
    var de_DeleteAppInstanceStreamingConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAppInstanceUserCommand = de_DeleteAppInstanceUserCommand;
    var de_DeleteAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAttendeeCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAttendeeCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAttendeeCommand = de_DeleteAttendeeCommand;
    var de_DeleteAttendeeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelCommand = de_DeleteChannelCommand;
    var de_DeleteChannelCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelBanCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelBanCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelBanCommand = de_DeleteChannelBanCommand;
    var de_DeleteChannelBanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelMembershipCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelMembershipCommand = de_DeleteChannelMembershipCommand;
    var de_DeleteChannelMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelMessageCommand = de_DeleteChannelMessageCommand;
    var de_DeleteChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelModeratorCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelModeratorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelModeratorCommand = de_DeleteChannelModeratorCommand;
    var de_DeleteChannelModeratorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteEventsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteEventsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteEventsConfigurationCommand = de_DeleteEventsConfigurationCommand;
    var de_DeleteEventsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteMediaCapturePipelineCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteMediaCapturePipelineCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteMediaCapturePipelineCommand = de_DeleteMediaCapturePipelineCommand;
    var de_DeleteMediaCapturePipelineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteMeetingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteMeetingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteMeetingCommand = de_DeleteMeetingCommand;
    var de_DeleteMeetingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeletePhoneNumberCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeletePhoneNumberCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeletePhoneNumberCommand = de_DeletePhoneNumberCommand;
    var de_DeletePhoneNumberCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteProxySessionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteProxySessionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteProxySessionCommand = de_DeleteProxySessionCommand;
    var de_DeleteProxySessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteRoomCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteRoomCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteRoomCommand = de_DeleteRoomCommand;
    var de_DeleteRoomCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteRoomMembershipCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteRoomMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteRoomMembershipCommand = de_DeleteRoomMembershipCommand;
    var de_DeleteRoomMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteSipMediaApplicationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteSipMediaApplicationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteSipMediaApplicationCommand = de_DeleteSipMediaApplicationCommand;
    var de_DeleteSipMediaApplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteSipRuleCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteSipRuleCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteSipRuleCommand = de_DeleteSipRuleCommand;
    var de_DeleteSipRuleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteVoiceConnectorCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteVoiceConnectorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteVoiceConnectorCommand = de_DeleteVoiceConnectorCommand;
    var de_DeleteVoiceConnectorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteVoiceConnectorEmergencyCallingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = de_DeleteVoiceConnectorEmergencyCallingConfigurationCommand;
    var de_DeleteVoiceConnectorEmergencyCallingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteVoiceConnectorGroupCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteVoiceConnectorGroupCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteVoiceConnectorGroupCommand = de_DeleteVoiceConnectorGroupCommand;
    var de_DeleteVoiceConnectorGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteVoiceConnectorOriginationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteVoiceConnectorOriginationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteVoiceConnectorOriginationCommand = de_DeleteVoiceConnectorOriginationCommand;
    var de_DeleteVoiceConnectorOriginationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteVoiceConnectorProxyCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteVoiceConnectorProxyCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteVoiceConnectorProxyCommand = de_DeleteVoiceConnectorProxyCommand;
    var de_DeleteVoiceConnectorProxyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteVoiceConnectorStreamingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteVoiceConnectorStreamingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteVoiceConnectorStreamingConfigurationCommand = de_DeleteVoiceConnectorStreamingConfigurationCommand;
    var de_DeleteVoiceConnectorStreamingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteVoiceConnectorTerminationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteVoiceConnectorTerminationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteVoiceConnectorTerminationCommand = de_DeleteVoiceConnectorTerminationCommand;
    var de_DeleteVoiceConnectorTerminationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteVoiceConnectorTerminationCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteVoiceConnectorTerminationCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteVoiceConnectorTerminationCredentialsCommand = de_DeleteVoiceConnectorTerminationCredentialsCommand;
    var de_DeleteVoiceConnectorTerminationCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAppInstanceCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeAppInstanceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstance: (_) => de_AppInstance(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeAppInstanceCommand = de_DescribeAppInstanceCommand;
    var de_DescribeAppInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAppInstanceAdminCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeAppInstanceAdminCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceAdmin: (_) => de_AppInstanceAdmin(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeAppInstanceAdminCommand = de_DescribeAppInstanceAdminCommand;
    var de_DescribeAppInstanceAdminCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUser: (_) => de_AppInstanceUser(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeAppInstanceUserCommand = de_DescribeAppInstanceUserCommand;
    var de_DescribeAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channel: (_) => de_Channel(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelCommand = de_DescribeChannelCommand;
    var de_DescribeChannelCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelBanCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelBanCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelBan: (_) => de_ChannelBan(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelBanCommand = de_DescribeChannelBanCommand;
    var de_DescribeChannelBanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelMembershipCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelMembership: (_) => de_ChannelMembership(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelMembershipCommand = de_DescribeChannelMembershipCommand;
    var de_DescribeChannelMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelMembershipForAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelMembershipForAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelMembership: (_) => de_ChannelMembershipForAppInstanceUserSummary(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelMembershipForAppInstanceUserCommand = de_DescribeChannelMembershipForAppInstanceUserCommand;
    var de_DescribeChannelMembershipForAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelModeratedByAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelModeratedByAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channel: (_) => de_ChannelModeratedByAppInstanceUserSummary(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelModeratedByAppInstanceUserCommand = de_DescribeChannelModeratedByAppInstanceUserCommand;
    var de_DescribeChannelModeratedByAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelModeratorCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelModeratorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelModerator: (_) => de_ChannelModerator(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelModeratorCommand = de_DescribeChannelModeratorCommand;
    var de_DescribeChannelModeratorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DisassociatePhoneNumberFromUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisassociatePhoneNumberFromUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DisassociatePhoneNumberFromUserCommand = de_DisassociatePhoneNumberFromUserCommand;
    var de_DisassociatePhoneNumberFromUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DisassociatePhoneNumbersFromVoiceConnectorCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisassociatePhoneNumbersFromVoiceConnectorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DisassociatePhoneNumbersFromVoiceConnectorCommand = de_DisassociatePhoneNumbersFromVoiceConnectorCommand;
    var de_DisassociatePhoneNumbersFromVoiceConnectorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisassociatePhoneNumbersFromVoiceConnectorGroupCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberErrors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = de_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand;
    var de_DisassociatePhoneNumbersFromVoiceConnectorGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DisassociateSigninDelegateGroupsFromAccountCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisassociateSigninDelegateGroupsFromAccountCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DisassociateSigninDelegateGroupsFromAccountCommand = de_DisassociateSigninDelegateGroupsFromAccountCommand;
    var de_DisassociateSigninDelegateGroupsFromAccountCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetAccountCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAccountCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Account: (_) => de_Account(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetAccountCommand = de_GetAccountCommand;
    var de_GetAccountCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetAccountSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAccountSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AccountSettings: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetAccountSettingsCommand = de_GetAccountSettingsCommand;
    var de_GetAccountSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetAppInstanceRetentionSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAppInstanceRetentionSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceRetentionSettings: smithy_client_1._json,
        InitiateDeletionTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetAppInstanceRetentionSettingsCommand = de_GetAppInstanceRetentionSettingsCommand;
    var de_GetAppInstanceRetentionSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetAppInstanceStreamingConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAppInstanceStreamingConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceStreamingConfigurations: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetAppInstanceStreamingConfigurationsCommand = de_GetAppInstanceStreamingConfigurationsCommand;
    var de_GetAppInstanceStreamingConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetAttendeeCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAttendeeCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Attendee: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetAttendeeCommand = de_GetAttendeeCommand;
    var de_GetAttendeeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetBotCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetBotCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Bot: (_) => de_Bot(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetBotCommand = de_GetBotCommand;
    var de_GetBotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelMessage: (_) => de_ChannelMessage(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetChannelMessageCommand = de_GetChannelMessageCommand;
    var de_GetChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetEventsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetEventsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        EventsConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetEventsConfigurationCommand = de_GetEventsConfigurationCommand;
    var de_GetEventsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetGlobalSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetGlobalSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        BusinessCalling: smithy_client_1._json,
        VoiceConnector: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetGlobalSettingsCommand = de_GetGlobalSettingsCommand;
    var de_GetGlobalSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMediaCapturePipelineCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetMediaCapturePipelineCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        MediaCapturePipeline: (_) => de_MediaCapturePipeline(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetMediaCapturePipelineCommand = de_GetMediaCapturePipelineCommand;
    var de_GetMediaCapturePipelineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMeetingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetMeetingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Meeting: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetMeetingCommand = de_GetMeetingCommand;
    var de_GetMeetingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMessagingSessionEndpointCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetMessagingSessionEndpointCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Endpoint: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetMessagingSessionEndpointCommand = de_GetMessagingSessionEndpointCommand;
    var de_GetMessagingSessionEndpointCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetPhoneNumberCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetPhoneNumberCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumber: (_) => de_PhoneNumber(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetPhoneNumberCommand = de_GetPhoneNumberCommand;
    var de_GetPhoneNumberCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetPhoneNumberOrderCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetPhoneNumberOrderCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberOrder: (_) => de_PhoneNumberOrder(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetPhoneNumberOrderCommand = de_GetPhoneNumberOrderCommand;
    var de_GetPhoneNumberOrderCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetPhoneNumberSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetPhoneNumberSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        CallingName: smithy_client_1.expectString,
        CallingNameUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetPhoneNumberSettingsCommand = de_GetPhoneNumberSettingsCommand;
    var de_GetPhoneNumberSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetProxySessionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetProxySessionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ProxySession: (_) => de_ProxySession(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetProxySessionCommand = de_GetProxySessionCommand;
    var de_GetProxySessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetRetentionSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRetentionSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        InitiateDeletionTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        RetentionSettings: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetRetentionSettingsCommand = de_GetRetentionSettingsCommand;
    var de_GetRetentionSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetRoomCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoomCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Room: (_) => de_Room(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetRoomCommand = de_GetRoomCommand;
    var de_GetRoomCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetSipMediaApplicationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetSipMediaApplicationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipMediaApplication: (_) => de_SipMediaApplication(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetSipMediaApplicationCommand = de_GetSipMediaApplicationCommand;
    var de_GetSipMediaApplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetSipMediaApplicationLoggingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetSipMediaApplicationLoggingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipMediaApplicationLoggingConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetSipMediaApplicationLoggingConfigurationCommand = de_GetSipMediaApplicationLoggingConfigurationCommand;
    var de_GetSipMediaApplicationLoggingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetSipRuleCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetSipRuleCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipRule: (_) => de_SipRule(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetSipRuleCommand = de_GetSipRuleCommand;
    var de_GetSipRuleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        User: (_) => de_User(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetUserCommand = de_GetUserCommand;
    var de_GetUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetUserSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetUserSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        UserSettings: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetUserSettingsCommand = de_GetUserSettingsCommand;
    var de_GetUserSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        VoiceConnector: (_) => de_VoiceConnector(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorCommand = de_GetVoiceConnectorCommand;
    var de_GetVoiceConnectorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorEmergencyCallingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorEmergencyCallingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        EmergencyCallingConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorEmergencyCallingConfigurationCommand = de_GetVoiceConnectorEmergencyCallingConfigurationCommand;
    var de_GetVoiceConnectorEmergencyCallingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorGroupCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorGroupCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        VoiceConnectorGroup: (_) => de_VoiceConnectorGroup(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorGroupCommand = de_GetVoiceConnectorGroupCommand;
    var de_GetVoiceConnectorGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorLoggingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorLoggingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        LoggingConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorLoggingConfigurationCommand = de_GetVoiceConnectorLoggingConfigurationCommand;
    var de_GetVoiceConnectorLoggingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorOriginationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorOriginationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Origination: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorOriginationCommand = de_GetVoiceConnectorOriginationCommand;
    var de_GetVoiceConnectorOriginationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorProxyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorProxyCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Proxy: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorProxyCommand = de_GetVoiceConnectorProxyCommand;
    var de_GetVoiceConnectorProxyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorStreamingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorStreamingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        StreamingConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorStreamingConfigurationCommand = de_GetVoiceConnectorStreamingConfigurationCommand;
    var de_GetVoiceConnectorStreamingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorTerminationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorTerminationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Termination: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorTerminationCommand = de_GetVoiceConnectorTerminationCommand;
    var de_GetVoiceConnectorTerminationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetVoiceConnectorTerminationHealthCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetVoiceConnectorTerminationHealthCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        TerminationHealth: (_) => de_TerminationHealth(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetVoiceConnectorTerminationHealthCommand = de_GetVoiceConnectorTerminationHealthCommand;
    var de_GetVoiceConnectorTerminationHealthCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_InviteUsersCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_InviteUsersCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Invites: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_InviteUsersCommand = de_InviteUsersCommand;
    var de_InviteUsersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Accounts: (_) => de_AccountList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountsCommand = de_ListAccountsCommand;
    var de_ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAppInstanceAdminsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAppInstanceAdminsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceAdmins: smithy_client_1._json,
        AppInstanceArn: smithy_client_1.expectString,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAppInstanceAdminsCommand = de_ListAppInstanceAdminsCommand;
    var de_ListAppInstanceAdminsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAppInstancesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAppInstancesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstances: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAppInstancesCommand = de_ListAppInstancesCommand;
    var de_ListAppInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAppInstanceUsersCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAppInstanceUsersCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceArn: smithy_client_1.expectString,
        AppInstanceUsers: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAppInstanceUsersCommand = de_ListAppInstanceUsersCommand;
    var de_ListAppInstanceUsersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAttendeesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAttendeesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Attendees: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAttendeesCommand = de_ListAttendeesCommand;
    var de_ListAttendeesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAttendeeTagsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAttendeeTagsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Tags: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAttendeeTagsCommand = de_ListAttendeeTagsCommand;
    var de_ListAttendeeTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListBotsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListBotsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Bots: (_) => de_BotList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListBotsCommand = de_ListBotsCommand;
    var de_ListBotsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelBansCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelBansCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelBans: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelBansCommand = de_ListChannelBansCommand;
    var de_ListChannelBansCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelMembershipsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelMembershipsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelMemberships: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelMembershipsCommand = de_ListChannelMembershipsCommand;
    var de_ListChannelMembershipsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelMembershipsForAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelMembershipsForAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelMemberships: (_) => de_ChannelMembershipForAppInstanceUserSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelMembershipsForAppInstanceUserCommand = de_ListChannelMembershipsForAppInstanceUserCommand;
    var de_ListChannelMembershipsForAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelMessagesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelMessagesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelMessages: (_) => de_ChannelMessageSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelMessagesCommand = de_ListChannelMessagesCommand;
    var de_ListChannelMessagesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelModeratorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelModeratorsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelModerators: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelModeratorsCommand = de_ListChannelModeratorsCommand;
    var de_ListChannelModeratorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channels: (_) => de_ChannelSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelsCommand = de_ListChannelsCommand;
    var de_ListChannelsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelsModeratedByAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelsModeratedByAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channels: (_) => de_ChannelModeratedByAppInstanceUserSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelsModeratedByAppInstanceUserCommand = de_ListChannelsModeratedByAppInstanceUserCommand;
    var de_ListChannelsModeratedByAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListMediaCapturePipelinesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListMediaCapturePipelinesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        MediaCapturePipelines: (_) => de_MediaCapturePipelineList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListMediaCapturePipelinesCommand = de_ListMediaCapturePipelinesCommand;
    var de_ListMediaCapturePipelinesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListMeetingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListMeetingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Meetings: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListMeetingsCommand = de_ListMeetingsCommand;
    var de_ListMeetingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListMeetingTagsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListMeetingTagsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Tags: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListMeetingTagsCommand = de_ListMeetingTagsCommand;
    var de_ListMeetingTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListPhoneNumberOrdersCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListPhoneNumberOrdersCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        PhoneNumberOrders: (_) => de_PhoneNumberOrderList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListPhoneNumberOrdersCommand = de_ListPhoneNumberOrdersCommand;
    var de_ListPhoneNumberOrdersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListPhoneNumbersCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListPhoneNumbersCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        PhoneNumbers: (_) => de_PhoneNumberList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListPhoneNumbersCommand = de_ListPhoneNumbersCommand;
    var de_ListPhoneNumbersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListProxySessionsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListProxySessionsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        ProxySessions: (_) => de_ProxySessions(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListProxySessionsCommand = de_ListProxySessionsCommand;
    var de_ListProxySessionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListRoomMembershipsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListRoomMembershipsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        RoomMemberships: (_) => de_RoomMembershipList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListRoomMembershipsCommand = de_ListRoomMembershipsCommand;
    var de_ListRoomMembershipsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListRoomsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListRoomsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        Rooms: (_) => de_RoomList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListRoomsCommand = de_ListRoomsCommand;
    var de_ListRoomsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListSipMediaApplicationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListSipMediaApplicationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        SipMediaApplications: (_) => de_SipMediaApplicationList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListSipMediaApplicationsCommand = de_ListSipMediaApplicationsCommand;
    var de_ListSipMediaApplicationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListSipRulesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListSipRulesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        SipRules: (_) => de_SipRuleList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListSipRulesCommand = de_ListSipRulesCommand;
    var de_ListSipRulesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListSupportedPhoneNumberCountriesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListSupportedPhoneNumberCountriesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumberCountries: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListSupportedPhoneNumberCountriesCommand = de_ListSupportedPhoneNumberCountriesCommand;
    var de_ListSupportedPhoneNumberCountriesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Tags: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
    var de_ListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListUsersCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListUsersCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        Users: (_) => de_UserList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListUsersCommand = de_ListUsersCommand;
    var de_ListUsersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListVoiceConnectorGroupsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListVoiceConnectorGroupsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        VoiceConnectorGroups: (_) => de_VoiceConnectorGroupList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListVoiceConnectorGroupsCommand = de_ListVoiceConnectorGroupsCommand;
    var de_ListVoiceConnectorGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListVoiceConnectorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListVoiceConnectorsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        VoiceConnectors: (_) => de_VoiceConnectorList(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListVoiceConnectorsCommand = de_ListVoiceConnectorsCommand;
    var de_ListVoiceConnectorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListVoiceConnectorTerminationCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListVoiceConnectorTerminationCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Usernames: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListVoiceConnectorTerminationCredentialsCommand = de_ListVoiceConnectorTerminationCredentialsCommand;
    var de_ListVoiceConnectorTerminationCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_LogoutUserCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_LogoutUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_LogoutUserCommand = de_LogoutUserCommand;
    var de_LogoutUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutAppInstanceRetentionSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutAppInstanceRetentionSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceRetentionSettings: smithy_client_1._json,
        InitiateDeletionTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutAppInstanceRetentionSettingsCommand = de_PutAppInstanceRetentionSettingsCommand;
    var de_PutAppInstanceRetentionSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutAppInstanceStreamingConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutAppInstanceStreamingConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceStreamingConfigurations: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutAppInstanceStreamingConfigurationsCommand = de_PutAppInstanceStreamingConfigurationsCommand;
    var de_PutAppInstanceStreamingConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutEventsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_PutEventsConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        EventsConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutEventsConfigurationCommand = de_PutEventsConfigurationCommand;
    var de_PutEventsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutRetentionSettingsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_PutRetentionSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        InitiateDeletionTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        RetentionSettings: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutRetentionSettingsCommand = de_PutRetentionSettingsCommand;
    var de_PutRetentionSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutSipMediaApplicationLoggingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutSipMediaApplicationLoggingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipMediaApplicationLoggingConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutSipMediaApplicationLoggingConfigurationCommand = de_PutSipMediaApplicationLoggingConfigurationCommand;
    var de_PutSipMediaApplicationLoggingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutVoiceConnectorEmergencyCallingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutVoiceConnectorEmergencyCallingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        EmergencyCallingConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutVoiceConnectorEmergencyCallingConfigurationCommand = de_PutVoiceConnectorEmergencyCallingConfigurationCommand;
    var de_PutVoiceConnectorEmergencyCallingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutVoiceConnectorLoggingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutVoiceConnectorLoggingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        LoggingConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutVoiceConnectorLoggingConfigurationCommand = de_PutVoiceConnectorLoggingConfigurationCommand;
    var de_PutVoiceConnectorLoggingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutVoiceConnectorOriginationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutVoiceConnectorOriginationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Origination: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutVoiceConnectorOriginationCommand = de_PutVoiceConnectorOriginationCommand;
    var de_PutVoiceConnectorOriginationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutVoiceConnectorProxyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutVoiceConnectorProxyCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Proxy: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutVoiceConnectorProxyCommand = de_PutVoiceConnectorProxyCommand;
    var de_PutVoiceConnectorProxyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutVoiceConnectorStreamingConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutVoiceConnectorStreamingConfigurationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        StreamingConfiguration: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutVoiceConnectorStreamingConfigurationCommand = de_PutVoiceConnectorStreamingConfigurationCommand;
    var de_PutVoiceConnectorStreamingConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutVoiceConnectorTerminationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutVoiceConnectorTerminationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Termination: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutVoiceConnectorTerminationCommand = de_PutVoiceConnectorTerminationCommand;
    var de_PutVoiceConnectorTerminationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutVoiceConnectorTerminationCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_PutVoiceConnectorTerminationCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_PutVoiceConnectorTerminationCredentialsCommand = de_PutVoiceConnectorTerminationCredentialsCommand;
    var de_PutVoiceConnectorTerminationCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RedactChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RedactChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        MessageId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_RedactChannelMessageCommand = de_RedactChannelMessageCommand;
    var de_RedactChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RedactConversationMessageCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RedactConversationMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_RedactConversationMessageCommand = de_RedactConversationMessageCommand;
    var de_RedactConversationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RedactRoomMessageCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RedactRoomMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_RedactRoomMessageCommand = de_RedactRoomMessageCommand;
    var de_RedactRoomMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegenerateSecurityTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegenerateSecurityTokenCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Bot: (_) => de_Bot(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_RegenerateSecurityTokenCommand = de_RegenerateSecurityTokenCommand;
    var de_RegenerateSecurityTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ResetPersonalPINCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ResetPersonalPINCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        User: (_) => de_User(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ResetPersonalPINCommand = de_ResetPersonalPINCommand;
    var de_ResetPersonalPINCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RestorePhoneNumberCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RestorePhoneNumberCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumber: (_) => de_PhoneNumber(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_RestorePhoneNumberCommand = de_RestorePhoneNumberCommand;
    var de_RestorePhoneNumberCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_SearchAvailablePhoneNumbersCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_SearchAvailablePhoneNumbersCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        E164PhoneNumbers: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_SearchAvailablePhoneNumbersCommand = de_SearchAvailablePhoneNumbersCommand;
    var de_SearchAvailablePhoneNumbersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.chime#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_SendChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_SendChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        MessageId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_SendChannelMessageCommand = de_SendChannelMessageCommand;
    var de_SendChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartMeetingTranscriptionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartMeetingTranscriptionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_StartMeetingTranscriptionCommand = de_StartMeetingTranscriptionCommand;
    var de_StartMeetingTranscriptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnprocessableEntityException":
        case "com.amazonaws.chime#UnprocessableEntityException":
          throw await de_UnprocessableEntityExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StopMeetingTranscriptionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StopMeetingTranscriptionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_StopMeetingTranscriptionCommand = de_StopMeetingTranscriptionCommand;
    var de_StopMeetingTranscriptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnprocessableEntityException":
        case "com.amazonaws.chime#UnprocessableEntityException":
          throw await de_UnprocessableEntityExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TagAttendeeCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_TagAttendeeCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_TagAttendeeCommand = de_TagAttendeeCommand;
    var de_TagAttendeeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TagMeetingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_TagMeetingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_TagMeetingCommand = de_TagMeetingCommand;
    var de_TagMeetingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_TagResourceCommand = de_TagResourceCommand;
    var de_TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UntagAttendeeCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UntagAttendeeCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UntagAttendeeCommand = de_UntagAttendeeCommand;
    var de_UntagAttendeeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UntagMeetingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UntagMeetingCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UntagMeetingCommand = de_UntagMeetingCommand;
    var de_UntagMeetingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UntagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UntagResourceCommand = de_UntagResourceCommand;
    var de_UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAccountCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateAccountCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Account: (_) => de_Account(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateAccountCommand = de_UpdateAccountCommand;
    var de_UpdateAccountCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAccountSettingsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UpdateAccountSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UpdateAccountSettingsCommand = de_UpdateAccountSettingsCommand;
    var de_UpdateAccountSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAppInstanceCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateAppInstanceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateAppInstanceCommand = de_UpdateAppInstanceCommand;
    var de_UpdateAppInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateAppInstanceUserCommand = de_UpdateAppInstanceUserCommand;
    var de_UpdateAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateBotCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateBotCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Bot: (_) => de_Bot(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateBotCommand = de_UpdateBotCommand;
    var de_UpdateBotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateChannelCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateChannelCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateChannelCommand = de_UpdateChannelCommand;
    var de_UpdateChannelCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        MessageId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateChannelMessageCommand = de_UpdateChannelMessageCommand;
    var de_UpdateChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateChannelReadMarkerCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateChannelReadMarkerCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateChannelReadMarkerCommand = de_UpdateChannelReadMarkerCommand;
    var de_UpdateChannelReadMarkerCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateGlobalSettingsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UpdateGlobalSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UpdateGlobalSettingsCommand = de_UpdateGlobalSettingsCommand;
    var de_UpdateGlobalSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdatePhoneNumberCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdatePhoneNumberCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        PhoneNumber: (_) => de_PhoneNumber(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdatePhoneNumberCommand = de_UpdatePhoneNumberCommand;
    var de_UpdatePhoneNumberCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdatePhoneNumberSettingsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UpdatePhoneNumberSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UpdatePhoneNumberSettingsCommand = de_UpdatePhoneNumberSettingsCommand;
    var de_UpdatePhoneNumberSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateProxySessionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_UpdateProxySessionCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ProxySession: (_) => de_ProxySession(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateProxySessionCommand = de_UpdateProxySessionCommand;
    var de_UpdateProxySessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateRoomCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateRoomCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Room: (_) => de_Room(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateRoomCommand = de_UpdateRoomCommand;
    var de_UpdateRoomCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateRoomMembershipCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateRoomMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        RoomMembership: (_) => de_RoomMembership(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateRoomMembershipCommand = de_UpdateRoomMembershipCommand;
    var de_UpdateRoomMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateSipMediaApplicationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateSipMediaApplicationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipMediaApplication: (_) => de_SipMediaApplication(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateSipMediaApplicationCommand = de_UpdateSipMediaApplicationCommand;
    var de_UpdateSipMediaApplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateSipMediaApplicationCallCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_UpdateSipMediaApplicationCallCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipMediaApplicationCall: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateSipMediaApplicationCallCommand = de_UpdateSipMediaApplicationCallCommand;
    var de_UpdateSipMediaApplicationCallCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateSipRuleCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_UpdateSipRuleCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        SipRule: (_) => de_SipRule(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateSipRuleCommand = de_UpdateSipRuleCommand;
    var de_UpdateSipRuleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chime#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        User: (_) => de_User(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateUserCommand = de_UpdateUserCommand;
    var de_UpdateUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateUserSettingsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UpdateUserSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UpdateUserSettingsCommand = de_UpdateUserSettingsCommand;
    var de_UpdateUserSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateVoiceConnectorCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateVoiceConnectorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        VoiceConnector: (_) => de_VoiceConnector(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateVoiceConnectorCommand = de_UpdateVoiceConnectorCommand;
    var de_UpdateVoiceConnectorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateVoiceConnectorGroupCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_UpdateVoiceConnectorGroupCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        VoiceConnectorGroup: (_) => de_VoiceConnectorGroup(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateVoiceConnectorGroupCommand = de_UpdateVoiceConnectorGroupCommand;
    var de_UpdateVoiceConnectorGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chime#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ValidateE911AddressCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_ValidateE911AddressCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Address: smithy_client_1._json,
        AddressExternalId: smithy_client_1.expectString,
        CandidateAddressList: smithy_client_1._json,
        ValidationResult: smithy_client_1.expectInt32
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ValidateE911AddressCommand = de_ValidateE911AddressCommand;
    var de_ValidateE911AddressCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chime#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chime#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chime#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chime#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chime#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chime#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chime#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(ChimeServiceException_1.ChimeServiceException);
    var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_BadRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ConflictExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ForbiddenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_NotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ServiceFailureExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ServiceFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ThrottledClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ThrottledClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnprocessableEntityExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnprocessableEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_Account = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        AccountStatus: smithy_client_1.expectString,
        AccountType: smithy_client_1.expectString,
        AwsAccountId: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        DefaultLicense: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        SigninDelegateGroups: smithy_client_1._json,
        SupportedLicenses: smithy_client_1._json
      });
    };
    var de_AccountList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Account(entry, context);
      });
      return retVal;
    };
    var de_AppInstance = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AppInstanceArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Name: smithy_client_1.expectString
      });
    };
    var de_AppInstanceAdmin = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Admin: smithy_client_1._json,
        AppInstanceArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
    };
    var de_AppInstanceUser = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AppInstanceUserArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Name: smithy_client_1.expectString
      });
    };
    var de_AppInstanceUserMembershipSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ReadMarkerTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Type: smithy_client_1.expectString
      });
    };
    var de_Bot = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BotEmail: smithy_client_1.expectString,
        BotId: smithy_client_1.expectString,
        BotType: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Disabled: smithy_client_1.expectBoolean,
        DisplayName: smithy_client_1.expectString,
        SecurityToken: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        UserId: smithy_client_1.expectString
      });
    };
    var de_BotList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Bot(entry, context);
      });
      return retVal;
    };
    var de_Channel = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        CreatedBy: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastMessageTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Mode: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Privacy: smithy_client_1.expectString
      });
    };
    var de_ChannelBan = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        CreatedBy: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Member: smithy_client_1._json
      });
    };
    var de_ChannelMembership = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        InvitedBy: smithy_client_1._json,
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Member: smithy_client_1._json,
        Type: smithy_client_1.expectString
      });
    };
    var de_ChannelMembershipForAppInstanceUserSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AppInstanceUserMembershipSummary: (_) => de_AppInstanceUserMembershipSummary(_, context),
        ChannelSummary: (_) => de_ChannelSummary(_, context)
      });
    };
    var de_ChannelMembershipForAppInstanceUserSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ChannelMembershipForAppInstanceUserSummary(entry, context);
      });
      return retVal;
    };
    var de_ChannelMessage = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        Content: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastEditedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MessageId: smithy_client_1.expectString,
        Metadata: smithy_client_1.expectString,
        Persistence: smithy_client_1.expectString,
        Redacted: smithy_client_1.expectBoolean,
        Sender: smithy_client_1._json,
        Type: smithy_client_1.expectString
      });
    };
    var de_ChannelMessageSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Content: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastEditedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MessageId: smithy_client_1.expectString,
        Metadata: smithy_client_1.expectString,
        Redacted: smithy_client_1.expectBoolean,
        Sender: smithy_client_1._json,
        Type: smithy_client_1.expectString
      });
    };
    var de_ChannelMessageSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ChannelMessageSummary(entry, context);
      });
      return retVal;
    };
    var de_ChannelModeratedByAppInstanceUserSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelSummary: (_) => de_ChannelSummary(_, context)
      });
    };
    var de_ChannelModeratedByAppInstanceUserSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ChannelModeratedByAppInstanceUserSummary(entry, context);
      });
      return retVal;
    };
    var de_ChannelModerator = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        CreatedBy: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Moderator: smithy_client_1._json
      });
    };
    var de_ChannelSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        LastMessageTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Mode: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Privacy: smithy_client_1.expectString
      });
    };
    var de_ChannelSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ChannelSummary(entry, context);
      });
      return retVal;
    };
    var de_MediaCapturePipeline = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChimeSdkMeetingConfiguration: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        MediaPipelineId: smithy_client_1.expectString,
        SinkArn: smithy_client_1.expectString,
        SinkType: smithy_client_1.expectString,
        SourceArn: smithy_client_1.expectString,
        SourceType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
    };
    var de_MediaCapturePipelineList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_MediaCapturePipeline(entry, context);
      });
      return retVal;
    };
    var de_PhoneNumber = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Associations: (_) => de_PhoneNumberAssociationList(_, context),
        CallingName: smithy_client_1.expectString,
        CallingNameStatus: smithy_client_1.expectString,
        Capabilities: smithy_client_1._json,
        Country: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        DeletionTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        E164PhoneNumber: smithy_client_1.expectString,
        PhoneNumberId: smithy_client_1.expectString,
        ProductType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
    };
    var de_PhoneNumberAssociation = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Name: smithy_client_1.expectString,
        Value: smithy_client_1.expectString
      });
    };
    var de_PhoneNumberAssociationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_PhoneNumberAssociation(entry, context);
      });
      return retVal;
    };
    var de_PhoneNumberList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_PhoneNumber(entry, context);
      });
      return retVal;
    };
    var de_PhoneNumberOrder = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        OrderedPhoneNumbers: smithy_client_1._json,
        PhoneNumberOrderId: smithy_client_1.expectString,
        ProductType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
    };
    var de_PhoneNumberOrderList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_PhoneNumberOrder(entry, context);
      });
      return retVal;
    };
    var de_ProxySession = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Capabilities: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        EndedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        ExpiryMinutes: smithy_client_1.expectInt32,
        GeoMatchLevel: smithy_client_1.expectString,
        GeoMatchParams: smithy_client_1._json,
        Name: smithy_client_1.expectString,
        NumberSelectionBehavior: smithy_client_1.expectString,
        Participants: smithy_client_1._json,
        ProxySessionId: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        VoiceConnectorId: smithy_client_1.expectString
      });
    };
    var de_ProxySessions = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ProxySession(entry, context);
      });
      return retVal;
    };
    var de_Room = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        CreatedBy: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Name: smithy_client_1.expectString,
        RoomId: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
    };
    var de_RoomList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Room(entry, context);
      });
      return retVal;
    };
    var de_RoomMembership = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InvitedBy: smithy_client_1.expectString,
        Member: smithy_client_1._json,
        Role: smithy_client_1.expectString,
        RoomId: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
    };
    var de_RoomMembershipList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_RoomMembership(entry, context);
      });
      return retVal;
    };
    var de_SipMediaApplication = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AwsRegion: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Endpoints: smithy_client_1._json,
        Name: smithy_client_1.expectString,
        SipMediaApplicationId: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
    };
    var de_SipMediaApplicationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_SipMediaApplication(entry, context);
      });
      return retVal;
    };
    var de_SipRule = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Disabled: smithy_client_1.expectBoolean,
        Name: smithy_client_1.expectString,
        SipRuleId: smithy_client_1.expectString,
        TargetApplications: smithy_client_1._json,
        TriggerType: smithy_client_1.expectString,
        TriggerValue: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
    };
    var de_SipRuleList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_SipRule(entry, context);
      });
      return retVal;
    };
    var de_TerminationHealth = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Source: smithy_client_1.expectString,
        Timestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_))
      });
    };
    var de_User = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        AlexaForBusinessMetadata: smithy_client_1._json,
        DisplayName: smithy_client_1.expectString,
        InvitedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        LicenseType: smithy_client_1.expectString,
        PersonalPIN: smithy_client_1.expectString,
        PrimaryEmail: smithy_client_1.expectString,
        PrimaryProvisionedNumber: smithy_client_1.expectString,
        RegisteredOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        UserId: smithy_client_1.expectString,
        UserInvitationStatus: smithy_client_1.expectString,
        UserRegistrationStatus: smithy_client_1.expectString,
        UserType: smithy_client_1.expectString
      });
    };
    var de_UserList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_User(entry, context);
      });
      return retVal;
    };
    var de_VoiceConnector = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AwsRegion: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Name: smithy_client_1.expectString,
        OutboundHostName: smithy_client_1.expectString,
        RequireEncryption: smithy_client_1.expectBoolean,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        VoiceConnectorArn: smithy_client_1.expectString,
        VoiceConnectorId: smithy_client_1.expectString
      });
    };
    var de_VoiceConnectorGroup = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Name: smithy_client_1.expectString,
        UpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        VoiceConnectorGroupArn: smithy_client_1.expectString,
        VoiceConnectorGroupId: smithy_client_1.expectString,
        VoiceConnectorItems: smithy_client_1._json
      });
    };
    var de_VoiceConnectorGroupList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_VoiceConnectorGroup(entry, context);
      });
      return retVal;
    };
    var de_VoiceConnectorList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_VoiceConnector(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/AssociatePhoneNumbersWithVoiceConnectorCommand.js
var require_AssociatePhoneNumbersWithVoiceConnectorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/AssociatePhoneNumbersWithVoiceConnectorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociatePhoneNumbersWithVoiceConnectorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var AssociatePhoneNumbersWithVoiceConnectorCommand = class _AssociatePhoneNumbersWithVoiceConnectorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssociatePhoneNumbersWithVoiceConnectorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "AssociatePhoneNumbersWithVoiceConnectorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssociatePhoneNumbersWithVoiceConnectorRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_AssociatePhoneNumbersWithVoiceConnectorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_AssociatePhoneNumbersWithVoiceConnectorCommand)(output, context);
      }
    };
    exports.AssociatePhoneNumbersWithVoiceConnectorCommand = AssociatePhoneNumbersWithVoiceConnectorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/AssociatePhoneNumbersWithVoiceConnectorGroupCommand.js
var require_AssociatePhoneNumbersWithVoiceConnectorGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/AssociatePhoneNumbersWithVoiceConnectorGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociatePhoneNumbersWithVoiceConnectorGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var AssociatePhoneNumbersWithVoiceConnectorGroupCommand = class _AssociatePhoneNumbersWithVoiceConnectorGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssociatePhoneNumbersWithVoiceConnectorGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "AssociatePhoneNumbersWithVoiceConnectorGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssociatePhoneNumbersWithVoiceConnectorGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_AssociatePhoneNumbersWithVoiceConnectorGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_AssociatePhoneNumbersWithVoiceConnectorGroupCommand)(output, context);
      }
    };
    exports.AssociatePhoneNumbersWithVoiceConnectorGroupCommand = AssociatePhoneNumbersWithVoiceConnectorGroupCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/AssociatePhoneNumberWithUserCommand.js
var require_AssociatePhoneNumberWithUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/AssociatePhoneNumberWithUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociatePhoneNumberWithUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var AssociatePhoneNumberWithUserCommand = class _AssociatePhoneNumberWithUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssociatePhoneNumberWithUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "AssociatePhoneNumberWithUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssociatePhoneNumberWithUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_AssociatePhoneNumberWithUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_AssociatePhoneNumberWithUserCommand)(output, context);
      }
    };
    exports.AssociatePhoneNumberWithUserCommand = AssociatePhoneNumberWithUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/AssociateSigninDelegateGroupsWithAccountCommand.js
var require_AssociateSigninDelegateGroupsWithAccountCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/AssociateSigninDelegateGroupsWithAccountCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociateSigninDelegateGroupsWithAccountCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var AssociateSigninDelegateGroupsWithAccountCommand = class _AssociateSigninDelegateGroupsWithAccountCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssociateSigninDelegateGroupsWithAccountCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "AssociateSigninDelegateGroupsWithAccountCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_AssociateSigninDelegateGroupsWithAccountCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_AssociateSigninDelegateGroupsWithAccountCommand)(output, context);
      }
    };
    exports.AssociateSigninDelegateGroupsWithAccountCommand = AssociateSigninDelegateGroupsWithAccountCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchCreateAttendeeCommand.js
var require_BatchCreateAttendeeCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchCreateAttendeeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchCreateAttendeeCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var BatchCreateAttendeeCommand = class _BatchCreateAttendeeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchCreateAttendeeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "BatchCreateAttendeeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchCreateAttendeeRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchCreateAttendeeResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchCreateAttendeeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchCreateAttendeeCommand)(output, context);
      }
    };
    exports.BatchCreateAttendeeCommand = BatchCreateAttendeeCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchCreateChannelMembershipCommand.js
var require_BatchCreateChannelMembershipCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchCreateChannelMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchCreateChannelMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var BatchCreateChannelMembershipCommand = class _BatchCreateChannelMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchCreateChannelMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "BatchCreateChannelMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.BatchCreateChannelMembershipResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchCreateChannelMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchCreateChannelMembershipCommand)(output, context);
      }
    };
    exports.BatchCreateChannelMembershipCommand = BatchCreateChannelMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchCreateRoomMembershipCommand.js
var require_BatchCreateRoomMembershipCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchCreateRoomMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchCreateRoomMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var BatchCreateRoomMembershipCommand = class _BatchCreateRoomMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchCreateRoomMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "BatchCreateRoomMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchCreateRoomMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchCreateRoomMembershipCommand)(output, context);
      }
    };
    exports.BatchCreateRoomMembershipCommand = BatchCreateRoomMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchDeletePhoneNumberCommand.js
var require_BatchDeletePhoneNumberCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchDeletePhoneNumberCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchDeletePhoneNumberCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var BatchDeletePhoneNumberCommand = class _BatchDeletePhoneNumberCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchDeletePhoneNumberCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "BatchDeletePhoneNumberCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchDeletePhoneNumberCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchDeletePhoneNumberCommand)(output, context);
      }
    };
    exports.BatchDeletePhoneNumberCommand = BatchDeletePhoneNumberCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchSuspendUserCommand.js
var require_BatchSuspendUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchSuspendUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchSuspendUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var BatchSuspendUserCommand = class _BatchSuspendUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchSuspendUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "BatchSuspendUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchSuspendUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchSuspendUserCommand)(output, context);
      }
    };
    exports.BatchSuspendUserCommand = BatchSuspendUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchUnsuspendUserCommand.js
var require_BatchUnsuspendUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchUnsuspendUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchUnsuspendUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var BatchUnsuspendUserCommand = class _BatchUnsuspendUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchUnsuspendUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "BatchUnsuspendUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchUnsuspendUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchUnsuspendUserCommand)(output, context);
      }
    };
    exports.BatchUnsuspendUserCommand = BatchUnsuspendUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchUpdatePhoneNumberCommand.js
var require_BatchUpdatePhoneNumberCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchUpdatePhoneNumberCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchUpdatePhoneNumberCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var BatchUpdatePhoneNumberCommand = class _BatchUpdatePhoneNumberCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchUpdatePhoneNumberCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "BatchUpdatePhoneNumberCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchUpdatePhoneNumberRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchUpdatePhoneNumberCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchUpdatePhoneNumberCommand)(output, context);
      }
    };
    exports.BatchUpdatePhoneNumberCommand = BatchUpdatePhoneNumberCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchUpdateUserCommand.js
var require_BatchUpdateUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/BatchUpdateUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchUpdateUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var BatchUpdateUserCommand = class _BatchUpdateUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchUpdateUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "BatchUpdateUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchUpdateUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchUpdateUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchUpdateUserCommand)(output, context);
      }
    };
    exports.BatchUpdateUserCommand = BatchUpdateUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAccountCommand.js
var require_CreateAccountCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAccountCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAccountCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateAccountCommand = class _CreateAccountCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAccountCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateAccountCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAccountCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAccountCommand)(output, context);
      }
    };
    exports.CreateAccountCommand = CreateAccountCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAppInstanceAdminCommand.js
var require_CreateAppInstanceAdminCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAppInstanceAdminCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAppInstanceAdminCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateAppInstanceAdminCommand2 = class _CreateAppInstanceAdminCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAppInstanceAdminCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateAppInstanceAdminCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateAppInstanceAdminResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAppInstanceAdminCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAppInstanceAdminCommand)(output, context);
      }
    };
    exports.CreateAppInstanceAdminCommand = CreateAppInstanceAdminCommand2;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAppInstanceCommand.js
var require_CreateAppInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAppInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAppInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateAppInstanceCommand2 = class _CreateAppInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAppInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateAppInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAppInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAppInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAppInstanceCommand)(output, context);
      }
    };
    exports.CreateAppInstanceCommand = CreateAppInstanceCommand2;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAppInstanceUserCommand.js
var require_CreateAppInstanceUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateAppInstanceUserCommand2 = class _CreateAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAppInstanceUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAppInstanceUserCommand)(output, context);
      }
    };
    exports.CreateAppInstanceUserCommand = CreateAppInstanceUserCommand2;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAttendeeCommand.js
var require_CreateAttendeeCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateAttendeeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAttendeeCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateAttendeeCommand = class _CreateAttendeeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAttendeeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateAttendeeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAttendeeRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAttendeeResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAttendeeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAttendeeCommand)(output, context);
      }
    };
    exports.CreateAttendeeCommand = CreateAttendeeCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateBotCommand.js
var require_CreateBotCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateBotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateBotCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateBotCommand = class _CreateBotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateBotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateBotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateBotRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateBotResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateBotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateBotCommand)(output, context);
      }
    };
    exports.CreateBotCommand = CreateBotCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateChannelBanCommand.js
var require_CreateChannelBanCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateChannelBanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelBanCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateChannelBanCommand = class _CreateChannelBanCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelBanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateChannelBanCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateChannelBanResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelBanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelBanCommand)(output, context);
      }
    };
    exports.CreateChannelBanCommand = CreateChannelBanCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateChannelCommand.js
var require_CreateChannelCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateChannelCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateChannelCommand = class _CreateChannelCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateChannelCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateChannelRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelCommand)(output, context);
      }
    };
    exports.CreateChannelCommand = CreateChannelCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateChannelMembershipCommand.js
var require_CreateChannelMembershipCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateChannelMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateChannelMembershipCommand = class _CreateChannelMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateChannelMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateChannelMembershipResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelMembershipCommand)(output, context);
      }
    };
    exports.CreateChannelMembershipCommand = CreateChannelMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateChannelModeratorCommand.js
var require_CreateChannelModeratorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateChannelModeratorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelModeratorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateChannelModeratorCommand = class _CreateChannelModeratorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelModeratorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateChannelModeratorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateChannelModeratorResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelModeratorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelModeratorCommand)(output, context);
      }
    };
    exports.CreateChannelModeratorCommand = CreateChannelModeratorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateMediaCapturePipelineCommand.js
var require_CreateMediaCapturePipelineCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateMediaCapturePipelineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMediaCapturePipelineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateMediaCapturePipelineCommand = class _CreateMediaCapturePipelineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateMediaCapturePipelineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateMediaCapturePipelineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMediaCapturePipelineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateMediaCapturePipelineResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateMediaCapturePipelineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateMediaCapturePipelineCommand)(output, context);
      }
    };
    exports.CreateMediaCapturePipelineCommand = CreateMediaCapturePipelineCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateMeetingCommand.js
var require_CreateMeetingCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateMeetingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMeetingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateMeetingCommand = class _CreateMeetingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateMeetingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateMeetingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMeetingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateMeetingResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateMeetingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateMeetingCommand)(output, context);
      }
    };
    exports.CreateMeetingCommand = CreateMeetingCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateMeetingDialOutCommand.js
var require_CreateMeetingDialOutCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateMeetingDialOutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMeetingDialOutCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateMeetingDialOutCommand = class _CreateMeetingDialOutCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateMeetingDialOutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateMeetingDialOutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMeetingDialOutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateMeetingDialOutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateMeetingDialOutCommand)(output, context);
      }
    };
    exports.CreateMeetingDialOutCommand = CreateMeetingDialOutCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateMeetingWithAttendeesCommand.js
var require_CreateMeetingWithAttendeesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateMeetingWithAttendeesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMeetingWithAttendeesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateMeetingWithAttendeesCommand = class _CreateMeetingWithAttendeesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateMeetingWithAttendeesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateMeetingWithAttendeesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMeetingWithAttendeesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateMeetingWithAttendeesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateMeetingWithAttendeesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateMeetingWithAttendeesCommand)(output, context);
      }
    };
    exports.CreateMeetingWithAttendeesCommand = CreateMeetingWithAttendeesCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreatePhoneNumberOrderCommand.js
var require_CreatePhoneNumberOrderCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreatePhoneNumberOrderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreatePhoneNumberOrderCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreatePhoneNumberOrderCommand = class _CreatePhoneNumberOrderCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreatePhoneNumberOrderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreatePhoneNumberOrderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreatePhoneNumberOrderRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreatePhoneNumberOrderResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreatePhoneNumberOrderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreatePhoneNumberOrderCommand)(output, context);
      }
    };
    exports.CreatePhoneNumberOrderCommand = CreatePhoneNumberOrderCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateProxySessionCommand.js
var require_CreateProxySessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateProxySessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateProxySessionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateProxySessionCommand = class _CreateProxySessionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateProxySessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateProxySessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateProxySessionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateProxySessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateProxySessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateProxySessionCommand)(output, context);
      }
    };
    exports.CreateProxySessionCommand = CreateProxySessionCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateRoomCommand.js
var require_CreateRoomCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateRoomCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateRoomCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateRoomCommand = class _CreateRoomCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateRoomCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateRoomCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateRoomRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateRoomResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateRoomCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateRoomCommand)(output, context);
      }
    };
    exports.CreateRoomCommand = CreateRoomCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateRoomMembershipCommand.js
var require_CreateRoomMembershipCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateRoomMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateRoomMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateRoomMembershipCommand = class _CreateRoomMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateRoomMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateRoomMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateRoomMembershipResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateRoomMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateRoomMembershipCommand)(output, context);
      }
    };
    exports.CreateRoomMembershipCommand = CreateRoomMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateSipMediaApplicationCallCommand.js
var require_CreateSipMediaApplicationCallCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateSipMediaApplicationCallCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateSipMediaApplicationCallCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateSipMediaApplicationCallCommand = class _CreateSipMediaApplicationCallCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateSipMediaApplicationCallCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateSipMediaApplicationCallCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateSipMediaApplicationCallRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateSipMediaApplicationCallCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateSipMediaApplicationCallCommand)(output, context);
      }
    };
    exports.CreateSipMediaApplicationCallCommand = CreateSipMediaApplicationCallCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateSipMediaApplicationCommand.js
var require_CreateSipMediaApplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateSipMediaApplicationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateSipMediaApplicationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateSipMediaApplicationCommand = class _CreateSipMediaApplicationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateSipMediaApplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateSipMediaApplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateSipMediaApplicationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateSipMediaApplicationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateSipMediaApplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateSipMediaApplicationCommand)(output, context);
      }
    };
    exports.CreateSipMediaApplicationCommand = CreateSipMediaApplicationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateSipRuleCommand.js
var require_CreateSipRuleCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateSipRuleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateSipRuleCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateSipRuleCommand = class _CreateSipRuleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateSipRuleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateSipRuleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateSipRuleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateSipRuleCommand)(output, context);
      }
    };
    exports.CreateSipRuleCommand = CreateSipRuleCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateUserCommand.js
var require_CreateUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateUserCommand = class _CreateUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateUserCommand)(output, context);
      }
    };
    exports.CreateUserCommand = CreateUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateVoiceConnectorCommand.js
var require_CreateVoiceConnectorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateVoiceConnectorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateVoiceConnectorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateVoiceConnectorCommand = class _CreateVoiceConnectorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateVoiceConnectorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateVoiceConnectorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateVoiceConnectorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateVoiceConnectorCommand)(output, context);
      }
    };
    exports.CreateVoiceConnectorCommand = CreateVoiceConnectorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateVoiceConnectorGroupCommand.js
var require_CreateVoiceConnectorGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/CreateVoiceConnectorGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateVoiceConnectorGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateVoiceConnectorGroupCommand = class _CreateVoiceConnectorGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateVoiceConnectorGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "CreateVoiceConnectorGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateVoiceConnectorGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateVoiceConnectorGroupCommand)(output, context);
      }
    };
    exports.CreateVoiceConnectorGroupCommand = CreateVoiceConnectorGroupCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAccountCommand.js
var require_DeleteAccountCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAccountCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAccountCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteAccountCommand = class _DeleteAccountCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAccountCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteAccountCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAccountCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAccountCommand)(output, context);
      }
    };
    exports.DeleteAccountCommand = DeleteAccountCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAppInstanceAdminCommand.js
var require_DeleteAppInstanceAdminCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAppInstanceAdminCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAppInstanceAdminCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteAppInstanceAdminCommand = class _DeleteAppInstanceAdminCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAppInstanceAdminCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteAppInstanceAdminCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAppInstanceAdminCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAppInstanceAdminCommand)(output, context);
      }
    };
    exports.DeleteAppInstanceAdminCommand = DeleteAppInstanceAdminCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAppInstanceCommand.js
var require_DeleteAppInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAppInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAppInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteAppInstanceCommand2 = class _DeleteAppInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAppInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteAppInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAppInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAppInstanceCommand)(output, context);
      }
    };
    exports.DeleteAppInstanceCommand = DeleteAppInstanceCommand2;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAppInstanceStreamingConfigurationsCommand.js
var require_DeleteAppInstanceStreamingConfigurationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAppInstanceStreamingConfigurationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAppInstanceStreamingConfigurationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteAppInstanceStreamingConfigurationsCommand = class _DeleteAppInstanceStreamingConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAppInstanceStreamingConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteAppInstanceStreamingConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAppInstanceStreamingConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAppInstanceStreamingConfigurationsCommand)(output, context);
      }
    };
    exports.DeleteAppInstanceStreamingConfigurationsCommand = DeleteAppInstanceStreamingConfigurationsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAppInstanceUserCommand.js
var require_DeleteAppInstanceUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteAppInstanceUserCommand = class _DeleteAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAppInstanceUserCommand)(output, context);
      }
    };
    exports.DeleteAppInstanceUserCommand = DeleteAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAttendeeCommand.js
var require_DeleteAttendeeCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteAttendeeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAttendeeCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteAttendeeCommand = class _DeleteAttendeeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAttendeeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteAttendeeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAttendeeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAttendeeCommand)(output, context);
      }
    };
    exports.DeleteAttendeeCommand = DeleteAttendeeCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelBanCommand.js
var require_DeleteChannelBanCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelBanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelBanCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteChannelBanCommand = class _DeleteChannelBanCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelBanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteChannelBanCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelBanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelBanCommand)(output, context);
      }
    };
    exports.DeleteChannelBanCommand = DeleteChannelBanCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelCommand.js
var require_DeleteChannelCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteChannelCommand = class _DeleteChannelCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteChannelCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelCommand)(output, context);
      }
    };
    exports.DeleteChannelCommand = DeleteChannelCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelMembershipCommand.js
var require_DeleteChannelMembershipCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteChannelMembershipCommand = class _DeleteChannelMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteChannelMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelMembershipCommand)(output, context);
      }
    };
    exports.DeleteChannelMembershipCommand = DeleteChannelMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelMessageCommand.js
var require_DeleteChannelMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteChannelMessageCommand = class _DeleteChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelMessageCommand)(output, context);
      }
    };
    exports.DeleteChannelMessageCommand = DeleteChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelModeratorCommand.js
var require_DeleteChannelModeratorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteChannelModeratorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelModeratorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteChannelModeratorCommand = class _DeleteChannelModeratorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelModeratorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteChannelModeratorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelModeratorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelModeratorCommand)(output, context);
      }
    };
    exports.DeleteChannelModeratorCommand = DeleteChannelModeratorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteEventsConfigurationCommand.js
var require_DeleteEventsConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteEventsConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteEventsConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteEventsConfigurationCommand = class _DeleteEventsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteEventsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteEventsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteEventsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteEventsConfigurationCommand)(output, context);
      }
    };
    exports.DeleteEventsConfigurationCommand = DeleteEventsConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteMediaCapturePipelineCommand.js
var require_DeleteMediaCapturePipelineCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteMediaCapturePipelineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteMediaCapturePipelineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteMediaCapturePipelineCommand = class _DeleteMediaCapturePipelineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteMediaCapturePipelineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteMediaCapturePipelineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteMediaCapturePipelineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteMediaCapturePipelineCommand)(output, context);
      }
    };
    exports.DeleteMediaCapturePipelineCommand = DeleteMediaCapturePipelineCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteMeetingCommand.js
var require_DeleteMeetingCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteMeetingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteMeetingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteMeetingCommand = class _DeleteMeetingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteMeetingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteMeetingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteMeetingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteMeetingCommand)(output, context);
      }
    };
    exports.DeleteMeetingCommand = DeleteMeetingCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeletePhoneNumberCommand.js
var require_DeletePhoneNumberCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeletePhoneNumberCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeletePhoneNumberCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeletePhoneNumberCommand = class _DeletePhoneNumberCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeletePhoneNumberCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeletePhoneNumberCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeletePhoneNumberCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeletePhoneNumberCommand)(output, context);
      }
    };
    exports.DeletePhoneNumberCommand = DeletePhoneNumberCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteProxySessionCommand.js
var require_DeleteProxySessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteProxySessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteProxySessionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteProxySessionCommand = class _DeleteProxySessionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteProxySessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteProxySessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteProxySessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteProxySessionCommand)(output, context);
      }
    };
    exports.DeleteProxySessionCommand = DeleteProxySessionCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteRoomCommand.js
var require_DeleteRoomCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteRoomCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteRoomCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteRoomCommand = class _DeleteRoomCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteRoomCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteRoomCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteRoomCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteRoomCommand)(output, context);
      }
    };
    exports.DeleteRoomCommand = DeleteRoomCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteRoomMembershipCommand.js
var require_DeleteRoomMembershipCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteRoomMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteRoomMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteRoomMembershipCommand = class _DeleteRoomMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteRoomMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteRoomMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteRoomMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteRoomMembershipCommand)(output, context);
      }
    };
    exports.DeleteRoomMembershipCommand = DeleteRoomMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteSipMediaApplicationCommand.js
var require_DeleteSipMediaApplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteSipMediaApplicationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteSipMediaApplicationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteSipMediaApplicationCommand = class _DeleteSipMediaApplicationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteSipMediaApplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteSipMediaApplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteSipMediaApplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteSipMediaApplicationCommand)(output, context);
      }
    };
    exports.DeleteSipMediaApplicationCommand = DeleteSipMediaApplicationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteSipRuleCommand.js
var require_DeleteSipRuleCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteSipRuleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteSipRuleCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteSipRuleCommand = class _DeleteSipRuleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteSipRuleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteSipRuleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteSipRuleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteSipRuleCommand)(output, context);
      }
    };
    exports.DeleteSipRuleCommand = DeleteSipRuleCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorCommand.js
var require_DeleteVoiceConnectorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVoiceConnectorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteVoiceConnectorCommand = class _DeleteVoiceConnectorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteVoiceConnectorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteVoiceConnectorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteVoiceConnectorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteVoiceConnectorCommand)(output, context);
      }
    };
    exports.DeleteVoiceConnectorCommand = DeleteVoiceConnectorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorEmergencyCallingConfigurationCommand.js
var require_DeleteVoiceConnectorEmergencyCallingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorEmergencyCallingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVoiceConnectorEmergencyCallingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteVoiceConnectorEmergencyCallingConfigurationCommand = class _DeleteVoiceConnectorEmergencyCallingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteVoiceConnectorEmergencyCallingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteVoiceConnectorEmergencyCallingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteVoiceConnectorEmergencyCallingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteVoiceConnectorEmergencyCallingConfigurationCommand)(output, context);
      }
    };
    exports.DeleteVoiceConnectorEmergencyCallingConfigurationCommand = DeleteVoiceConnectorEmergencyCallingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorGroupCommand.js
var require_DeleteVoiceConnectorGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVoiceConnectorGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteVoiceConnectorGroupCommand = class _DeleteVoiceConnectorGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteVoiceConnectorGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteVoiceConnectorGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteVoiceConnectorGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteVoiceConnectorGroupCommand)(output, context);
      }
    };
    exports.DeleteVoiceConnectorGroupCommand = DeleteVoiceConnectorGroupCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorOriginationCommand.js
var require_DeleteVoiceConnectorOriginationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorOriginationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVoiceConnectorOriginationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteVoiceConnectorOriginationCommand = class _DeleteVoiceConnectorOriginationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteVoiceConnectorOriginationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteVoiceConnectorOriginationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteVoiceConnectorOriginationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteVoiceConnectorOriginationCommand)(output, context);
      }
    };
    exports.DeleteVoiceConnectorOriginationCommand = DeleteVoiceConnectorOriginationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorProxyCommand.js
var require_DeleteVoiceConnectorProxyCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorProxyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVoiceConnectorProxyCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteVoiceConnectorProxyCommand = class _DeleteVoiceConnectorProxyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteVoiceConnectorProxyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteVoiceConnectorProxyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteVoiceConnectorProxyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteVoiceConnectorProxyCommand)(output, context);
      }
    };
    exports.DeleteVoiceConnectorProxyCommand = DeleteVoiceConnectorProxyCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorStreamingConfigurationCommand.js
var require_DeleteVoiceConnectorStreamingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorStreamingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVoiceConnectorStreamingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteVoiceConnectorStreamingConfigurationCommand = class _DeleteVoiceConnectorStreamingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteVoiceConnectorStreamingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteVoiceConnectorStreamingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteVoiceConnectorStreamingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteVoiceConnectorStreamingConfigurationCommand)(output, context);
      }
    };
    exports.DeleteVoiceConnectorStreamingConfigurationCommand = DeleteVoiceConnectorStreamingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorTerminationCommand.js
var require_DeleteVoiceConnectorTerminationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorTerminationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVoiceConnectorTerminationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteVoiceConnectorTerminationCommand = class _DeleteVoiceConnectorTerminationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteVoiceConnectorTerminationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteVoiceConnectorTerminationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteVoiceConnectorTerminationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteVoiceConnectorTerminationCommand)(output, context);
      }
    };
    exports.DeleteVoiceConnectorTerminationCommand = DeleteVoiceConnectorTerminationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorTerminationCredentialsCommand.js
var require_DeleteVoiceConnectorTerminationCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DeleteVoiceConnectorTerminationCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteVoiceConnectorTerminationCredentialsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteVoiceConnectorTerminationCredentialsCommand = class _DeleteVoiceConnectorTerminationCredentialsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteVoiceConnectorTerminationCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DeleteVoiceConnectorTerminationCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteVoiceConnectorTerminationCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteVoiceConnectorTerminationCredentialsCommand)(output, context);
      }
    };
    exports.DeleteVoiceConnectorTerminationCredentialsCommand = DeleteVoiceConnectorTerminationCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeAppInstanceAdminCommand.js
var require_DescribeAppInstanceAdminCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeAppInstanceAdminCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAppInstanceAdminCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeAppInstanceAdminCommand = class _DescribeAppInstanceAdminCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAppInstanceAdminCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeAppInstanceAdminCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAppInstanceAdminResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeAppInstanceAdminCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeAppInstanceAdminCommand)(output, context);
      }
    };
    exports.DescribeAppInstanceAdminCommand = DescribeAppInstanceAdminCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeAppInstanceCommand.js
var require_DescribeAppInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeAppInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAppInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeAppInstanceCommand = class _DescribeAppInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAppInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeAppInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAppInstanceResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeAppInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeAppInstanceCommand)(output, context);
      }
    };
    exports.DescribeAppInstanceCommand = DescribeAppInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeAppInstanceUserCommand.js
var require_DescribeAppInstanceUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeAppInstanceUserCommand = class _DescribeAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeAppInstanceUserCommand)(output, context);
      }
    };
    exports.DescribeAppInstanceUserCommand = DescribeAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelBanCommand.js
var require_DescribeChannelBanCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelBanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelBanCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeChannelBanCommand = class _DescribeChannelBanCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelBanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeChannelBanCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelBanResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelBanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelBanCommand)(output, context);
      }
    };
    exports.DescribeChannelBanCommand = DescribeChannelBanCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelCommand.js
var require_DescribeChannelCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeChannelCommand = class _DescribeChannelCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeChannelCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelCommand)(output, context);
      }
    };
    exports.DescribeChannelCommand = DescribeChannelCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelMembershipCommand.js
var require_DescribeChannelMembershipCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeChannelMembershipCommand = class _DescribeChannelMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeChannelMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelMembershipResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelMembershipCommand)(output, context);
      }
    };
    exports.DescribeChannelMembershipCommand = DescribeChannelMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelMembershipForAppInstanceUserCommand.js
var require_DescribeChannelMembershipForAppInstanceUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelMembershipForAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelMembershipForAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeChannelMembershipForAppInstanceUserCommand = class _DescribeChannelMembershipForAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelMembershipForAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeChannelMembershipForAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelMembershipForAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelMembershipForAppInstanceUserCommand)(output, context);
      }
    };
    exports.DescribeChannelMembershipForAppInstanceUserCommand = DescribeChannelMembershipForAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelModeratedByAppInstanceUserCommand.js
var require_DescribeChannelModeratedByAppInstanceUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelModeratedByAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelModeratedByAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeChannelModeratedByAppInstanceUserCommand = class _DescribeChannelModeratedByAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelModeratedByAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeChannelModeratedByAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelModeratedByAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelModeratedByAppInstanceUserCommand)(output, context);
      }
    };
    exports.DescribeChannelModeratedByAppInstanceUserCommand = DescribeChannelModeratedByAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelModeratorCommand.js
var require_DescribeChannelModeratorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DescribeChannelModeratorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelModeratorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DescribeChannelModeratorCommand = class _DescribeChannelModeratorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelModeratorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DescribeChannelModeratorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelModeratorResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelModeratorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelModeratorCommand)(output, context);
      }
    };
    exports.DescribeChannelModeratorCommand = DescribeChannelModeratorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DisassociatePhoneNumberFromUserCommand.js
var require_DisassociatePhoneNumberFromUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DisassociatePhoneNumberFromUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociatePhoneNumberFromUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DisassociatePhoneNumberFromUserCommand = class _DisassociatePhoneNumberFromUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisassociatePhoneNumberFromUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DisassociatePhoneNumberFromUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DisassociatePhoneNumberFromUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DisassociatePhoneNumberFromUserCommand)(output, context);
      }
    };
    exports.DisassociatePhoneNumberFromUserCommand = DisassociatePhoneNumberFromUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DisassociatePhoneNumbersFromVoiceConnectorCommand.js
var require_DisassociatePhoneNumbersFromVoiceConnectorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DisassociatePhoneNumbersFromVoiceConnectorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociatePhoneNumbersFromVoiceConnectorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DisassociatePhoneNumbersFromVoiceConnectorCommand = class _DisassociatePhoneNumbersFromVoiceConnectorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisassociatePhoneNumbersFromVoiceConnectorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DisassociatePhoneNumbersFromVoiceConnectorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DisassociatePhoneNumbersFromVoiceConnectorRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DisassociatePhoneNumbersFromVoiceConnectorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DisassociatePhoneNumbersFromVoiceConnectorCommand)(output, context);
      }
    };
    exports.DisassociatePhoneNumbersFromVoiceConnectorCommand = DisassociatePhoneNumbersFromVoiceConnectorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DisassociatePhoneNumbersFromVoiceConnectorGroupCommand.js
var require_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DisassociatePhoneNumbersFromVoiceConnectorGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = class _DisassociatePhoneNumbersFromVoiceConnectorGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisassociatePhoneNumbersFromVoiceConnectorGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DisassociatePhoneNumbersFromVoiceConnectorGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DisassociatePhoneNumbersFromVoiceConnectorGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand)(output, context);
      }
    };
    exports.DisassociatePhoneNumbersFromVoiceConnectorGroupCommand = DisassociatePhoneNumbersFromVoiceConnectorGroupCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/DisassociateSigninDelegateGroupsFromAccountCommand.js
var require_DisassociateSigninDelegateGroupsFromAccountCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/DisassociateSigninDelegateGroupsFromAccountCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociateSigninDelegateGroupsFromAccountCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DisassociateSigninDelegateGroupsFromAccountCommand = class _DisassociateSigninDelegateGroupsFromAccountCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisassociateSigninDelegateGroupsFromAccountCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "DisassociateSigninDelegateGroupsFromAccountCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DisassociateSigninDelegateGroupsFromAccountCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DisassociateSigninDelegateGroupsFromAccountCommand)(output, context);
      }
    };
    exports.DisassociateSigninDelegateGroupsFromAccountCommand = DisassociateSigninDelegateGroupsFromAccountCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAccountCommand.js
var require_GetAccountCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAccountCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccountCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetAccountCommand = class _GetAccountCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAccountCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetAccountCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetAccountCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetAccountCommand)(output, context);
      }
    };
    exports.GetAccountCommand = GetAccountCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAccountSettingsCommand.js
var require_GetAccountSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAccountSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccountSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetAccountSettingsCommand = class _GetAccountSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAccountSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetAccountSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetAccountSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetAccountSettingsCommand)(output, context);
      }
    };
    exports.GetAccountSettingsCommand = GetAccountSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAppInstanceRetentionSettingsCommand.js
var require_GetAppInstanceRetentionSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAppInstanceRetentionSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAppInstanceRetentionSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetAppInstanceRetentionSettingsCommand = class _GetAppInstanceRetentionSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAppInstanceRetentionSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetAppInstanceRetentionSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetAppInstanceRetentionSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetAppInstanceRetentionSettingsCommand)(output, context);
      }
    };
    exports.GetAppInstanceRetentionSettingsCommand = GetAppInstanceRetentionSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAppInstanceStreamingConfigurationsCommand.js
var require_GetAppInstanceStreamingConfigurationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAppInstanceStreamingConfigurationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAppInstanceStreamingConfigurationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetAppInstanceStreamingConfigurationsCommand = class _GetAppInstanceStreamingConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAppInstanceStreamingConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetAppInstanceStreamingConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetAppInstanceStreamingConfigurationsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetAppInstanceStreamingConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetAppInstanceStreamingConfigurationsCommand)(output, context);
      }
    };
    exports.GetAppInstanceStreamingConfigurationsCommand = GetAppInstanceStreamingConfigurationsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAttendeeCommand.js
var require_GetAttendeeCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetAttendeeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAttendeeCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetAttendeeCommand = class _GetAttendeeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAttendeeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetAttendeeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetAttendeeResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetAttendeeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetAttendeeCommand)(output, context);
      }
    };
    exports.GetAttendeeCommand = GetAttendeeCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetBotCommand.js
var require_GetBotCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetBotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetBotCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetBotCommand = class _GetBotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetBotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetBotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetBotResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetBotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetBotCommand)(output, context);
      }
    };
    exports.GetBotCommand = GetBotCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetChannelMessageCommand.js
var require_GetChannelMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetChannelMessageCommand = class _GetChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetChannelMessageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetChannelMessageCommand)(output, context);
      }
    };
    exports.GetChannelMessageCommand = GetChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetEventsConfigurationCommand.js
var require_GetEventsConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetEventsConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetEventsConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetEventsConfigurationCommand = class _GetEventsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetEventsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetEventsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetEventsConfigurationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetEventsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetEventsConfigurationCommand)(output, context);
      }
    };
    exports.GetEventsConfigurationCommand = GetEventsConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetGlobalSettingsCommand.js
var require_GetGlobalSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetGlobalSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetGlobalSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetGlobalSettingsCommand = class _GetGlobalSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetGlobalSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetGlobalSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetGlobalSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetGlobalSettingsCommand)(output, context);
      }
    };
    exports.GetGlobalSettingsCommand = GetGlobalSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetMediaCapturePipelineCommand.js
var require_GetMediaCapturePipelineCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetMediaCapturePipelineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMediaCapturePipelineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetMediaCapturePipelineCommand = class _GetMediaCapturePipelineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMediaCapturePipelineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetMediaCapturePipelineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetMediaCapturePipelineResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetMediaCapturePipelineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetMediaCapturePipelineCommand)(output, context);
      }
    };
    exports.GetMediaCapturePipelineCommand = GetMediaCapturePipelineCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetMeetingCommand.js
var require_GetMeetingCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetMeetingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMeetingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetMeetingCommand = class _GetMeetingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMeetingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetMeetingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetMeetingResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetMeetingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetMeetingCommand)(output, context);
      }
    };
    exports.GetMeetingCommand = GetMeetingCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetMessagingSessionEndpointCommand.js
var require_GetMessagingSessionEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetMessagingSessionEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMessagingSessionEndpointCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetMessagingSessionEndpointCommand = class _GetMessagingSessionEndpointCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMessagingSessionEndpointCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetMessagingSessionEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetMessagingSessionEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetMessagingSessionEndpointCommand)(output, context);
      }
    };
    exports.GetMessagingSessionEndpointCommand = GetMessagingSessionEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetPhoneNumberCommand.js
var require_GetPhoneNumberCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetPhoneNumberCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPhoneNumberCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetPhoneNumberCommand = class _GetPhoneNumberCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetPhoneNumberCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetPhoneNumberCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetPhoneNumberResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetPhoneNumberCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetPhoneNumberCommand)(output, context);
      }
    };
    exports.GetPhoneNumberCommand = GetPhoneNumberCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetPhoneNumberOrderCommand.js
var require_GetPhoneNumberOrderCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetPhoneNumberOrderCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPhoneNumberOrderCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetPhoneNumberOrderCommand = class _GetPhoneNumberOrderCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetPhoneNumberOrderCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetPhoneNumberOrderCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetPhoneNumberOrderResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetPhoneNumberOrderCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetPhoneNumberOrderCommand)(output, context);
      }
    };
    exports.GetPhoneNumberOrderCommand = GetPhoneNumberOrderCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetPhoneNumberSettingsCommand.js
var require_GetPhoneNumberSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetPhoneNumberSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPhoneNumberSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetPhoneNumberSettingsCommand = class _GetPhoneNumberSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetPhoneNumberSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetPhoneNumberSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetPhoneNumberSettingsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetPhoneNumberSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetPhoneNumberSettingsCommand)(output, context);
      }
    };
    exports.GetPhoneNumberSettingsCommand = GetPhoneNumberSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetProxySessionCommand.js
var require_GetProxySessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetProxySessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetProxySessionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetProxySessionCommand = class _GetProxySessionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetProxySessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetProxySessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetProxySessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetProxySessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetProxySessionCommand)(output, context);
      }
    };
    exports.GetProxySessionCommand = GetProxySessionCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetRetentionSettingsCommand.js
var require_GetRetentionSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetRetentionSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRetentionSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetRetentionSettingsCommand = class _GetRetentionSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetRetentionSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetRetentionSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRetentionSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRetentionSettingsCommand)(output, context);
      }
    };
    exports.GetRetentionSettingsCommand = GetRetentionSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/models/models_1.js
var require_models_1 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/models/models_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListUsersRequestFilterSensitiveLog = exports.ListTagsForResourceResponseFilterSensitiveLog = exports.ListTagsForResourceRequestFilterSensitiveLog = exports.ListSipMediaApplicationsResponseFilterSensitiveLog = exports.ListRoomsResponseFilterSensitiveLog = exports.ListRoomMembershipsResponseFilterSensitiveLog = exports.ListProxySessionsResponseFilterSensitiveLog = exports.ListPhoneNumbersResponseFilterSensitiveLog = exports.ListPhoneNumberOrdersResponseFilterSensitiveLog = exports.ListMeetingTagsResponseFilterSensitiveLog = exports.ListMeetingsResponseFilterSensitiveLog = exports.ListMediaCapturePipelinesResponseFilterSensitiveLog = exports.ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog = exports.ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog = exports.ListChannelsResponseFilterSensitiveLog = exports.ListChannelsRequestFilterSensitiveLog = exports.ListChannelModeratorsResponseFilterSensitiveLog = exports.ListChannelModeratorsRequestFilterSensitiveLog = exports.ListChannelMessagesResponseFilterSensitiveLog = exports.ListChannelMessagesRequestFilterSensitiveLog = exports.ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog = exports.ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog = exports.ListChannelMembershipsResponseFilterSensitiveLog = exports.ListChannelMembershipsRequestFilterSensitiveLog = exports.ListChannelBansResponseFilterSensitiveLog = exports.ListChannelBansRequestFilterSensitiveLog = exports.ListBotsResponseFilterSensitiveLog = exports.ListAttendeeTagsResponseFilterSensitiveLog = exports.ListAttendeesResponseFilterSensitiveLog = exports.ListAppInstanceUsersResponseFilterSensitiveLog = exports.ListAppInstanceUsersRequestFilterSensitiveLog = exports.ListAppInstancesResponseFilterSensitiveLog = exports.ListAppInstancesRequestFilterSensitiveLog = exports.ListAppInstanceAdminsResponseFilterSensitiveLog = exports.ListAppInstanceAdminsRequestFilterSensitiveLog = exports.ListAccountsRequestFilterSensitiveLog = exports.InviteUsersResponseFilterSensitiveLog = exports.InviteUsersRequestFilterSensitiveLog = exports.InviteFilterSensitiveLog = exports.GetVoiceConnectorTerminationResponseFilterSensitiveLog = exports.TerminationFilterSensitiveLog = exports.GetVoiceConnectorProxyResponseFilterSensitiveLog = exports.ProxyFilterSensitiveLog = exports.GetVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog = exports.GetUserResponseFilterSensitiveLog = exports.GetSipMediaApplicationResponseFilterSensitiveLog = exports.GetRoomResponseFilterSensitiveLog = exports.SortOrder = exports.NotificationTarget = exports.OriginationRouteProtocol = void 0;
    exports.ValidateE911AddressResponseFilterSensitiveLog = exports.ValidateE911AddressRequestFilterSensitiveLog = exports.UpdateUserResponseFilterSensitiveLog = exports.UpdateUserRequestFilterSensitiveLog = exports.UpdateSipMediaApplicationCallRequestFilterSensitiveLog = exports.UpdateSipMediaApplicationResponseFilterSensitiveLog = exports.UpdateSipMediaApplicationRequestFilterSensitiveLog = exports.UpdateRoomMembershipResponseFilterSensitiveLog = exports.UpdateRoomResponseFilterSensitiveLog = exports.UpdateRoomRequestFilterSensitiveLog = exports.UpdateProxySessionResponseFilterSensitiveLog = exports.UpdatePhoneNumberSettingsRequestFilterSensitiveLog = exports.UpdatePhoneNumberResponseFilterSensitiveLog = exports.UpdatePhoneNumberRequestFilterSensitiveLog = exports.UpdateChannelMessageRequestFilterSensitiveLog = exports.UpdateChannelRequestFilterSensitiveLog = exports.UpdateBotResponseFilterSensitiveLog = exports.UpdateAppInstanceUserRequestFilterSensitiveLog = exports.UpdateAppInstanceRequestFilterSensitiveLog = exports.UntagResourceRequestFilterSensitiveLog = exports.UntagMeetingRequestFilterSensitiveLog = exports.UntagAttendeeRequestFilterSensitiveLog = exports.TagResourceRequestFilterSensitiveLog = exports.TagMeetingRequestFilterSensitiveLog = exports.TagAttendeeRequestFilterSensitiveLog = exports.SendChannelMessageRequestFilterSensitiveLog = exports.SearchAvailablePhoneNumbersResponseFilterSensitiveLog = exports.RestorePhoneNumberResponseFilterSensitiveLog = exports.ResetPersonalPINResponseFilterSensitiveLog = exports.RegenerateSecurityTokenResponseFilterSensitiveLog = exports.PutVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog = exports.PutVoiceConnectorTerminationResponseFilterSensitiveLog = exports.PutVoiceConnectorTerminationRequestFilterSensitiveLog = exports.PutVoiceConnectorProxyResponseFilterSensitiveLog = exports.PutVoiceConnectorProxyRequestFilterSensitiveLog = exports.PutVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog = exports.PutVoiceConnectorEmergencyCallingConfigurationRequestFilterSensitiveLog = exports.PutEventsConfigurationResponseFilterSensitiveLog = exports.PutEventsConfigurationRequestFilterSensitiveLog = exports.PutAppInstanceStreamingConfigurationsResponseFilterSensitiveLog = exports.PutAppInstanceStreamingConfigurationsRequestFilterSensitiveLog = exports.ListVoiceConnectorTerminationCredentialsResponseFilterSensitiveLog = exports.ListUsersResponseFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var models_0_1 = require_models_04();
    exports.OriginationRouteProtocol = {
      TCP: "TCP",
      UDP: "UDP"
    };
    exports.NotificationTarget = {
      EventBridge: "EventBridge",
      SNS: "SNS",
      SQS: "SQS"
    };
    exports.SortOrder = {
      ASCENDING: "ASCENDING",
      DESCENDING: "DESCENDING"
    };
    var GetRoomResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Room && { Room: (0, models_0_1.RoomFilterSensitiveLog)(obj.Room) }
    });
    exports.GetRoomResponseFilterSensitiveLog = GetRoomResponseFilterSensitiveLog;
    var GetSipMediaApplicationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SipMediaApplication && {
        SipMediaApplication: (0, models_0_1.SipMediaApplicationFilterSensitiveLog)(obj.SipMediaApplication)
      }
    });
    exports.GetSipMediaApplicationResponseFilterSensitiveLog = GetSipMediaApplicationResponseFilterSensitiveLog;
    var GetUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.User && { User: (0, models_0_1.UserFilterSensitiveLog)(obj.User) }
    });
    exports.GetUserResponseFilterSensitiveLog = GetUserResponseFilterSensitiveLog;
    var GetVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.EmergencyCallingConfiguration && {
        EmergencyCallingConfiguration: (0, models_0_1.EmergencyCallingConfigurationFilterSensitiveLog)(obj.EmergencyCallingConfiguration)
      }
    });
    exports.GetVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog = GetVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog;
    var ProxyFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.FallBackPhoneNumber && { FallBackPhoneNumber: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ProxyFilterSensitiveLog = ProxyFilterSensitiveLog;
    var GetVoiceConnectorProxyResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Proxy && { Proxy: (0, exports.ProxyFilterSensitiveLog)(obj.Proxy) }
    });
    exports.GetVoiceConnectorProxyResponseFilterSensitiveLog = GetVoiceConnectorProxyResponseFilterSensitiveLog;
    var TerminationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.DefaultPhoneNumber && { DefaultPhoneNumber: smithy_client_1.SENSITIVE_STRING }
    });
    exports.TerminationFilterSensitiveLog = TerminationFilterSensitiveLog;
    var GetVoiceConnectorTerminationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Termination && { Termination: (0, exports.TerminationFilterSensitiveLog)(obj.Termination) }
    });
    exports.GetVoiceConnectorTerminationResponseFilterSensitiveLog = GetVoiceConnectorTerminationResponseFilterSensitiveLog;
    var InviteFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.EmailAddress && { EmailAddress: smithy_client_1.SENSITIVE_STRING }
    });
    exports.InviteFilterSensitiveLog = InviteFilterSensitiveLog;
    var InviteUsersRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.UserEmailList && { UserEmailList: smithy_client_1.SENSITIVE_STRING }
    });
    exports.InviteUsersRequestFilterSensitiveLog = InviteUsersRequestFilterSensitiveLog;
    var InviteUsersResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Invites && { Invites: obj.Invites.map((item) => (0, exports.InviteFilterSensitiveLog)(item)) }
    });
    exports.InviteUsersResponseFilterSensitiveLog = InviteUsersResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.UserEmail && { UserEmail: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAppInstanceAdminsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceAdminsRequestFilterSensitiveLog = ListAppInstanceAdminsRequestFilterSensitiveLog;
    var ListAppInstanceAdminsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceAdmins && {
        AppInstanceAdmins: obj.AppInstanceAdmins.map((item) => (0, models_0_1.AppInstanceAdminSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceAdminsResponseFilterSensitiveLog = ListAppInstanceAdminsResponseFilterSensitiveLog;
    var ListAppInstancesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstancesRequestFilterSensitiveLog = ListAppInstancesRequestFilterSensitiveLog;
    var ListAppInstancesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstances && { AppInstances: obj.AppInstances.map((item) => (0, models_0_1.AppInstanceSummaryFilterSensitiveLog)(item)) },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstancesResponseFilterSensitiveLog = ListAppInstancesResponseFilterSensitiveLog;
    var ListAppInstanceUsersRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceUsersRequestFilterSensitiveLog = ListAppInstanceUsersRequestFilterSensitiveLog;
    var ListAppInstanceUsersResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUsers && {
        AppInstanceUsers: obj.AppInstanceUsers.map((item) => (0, models_0_1.AppInstanceUserSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceUsersResponseFilterSensitiveLog = ListAppInstanceUsersResponseFilterSensitiveLog;
    var ListAttendeesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Attendees && { Attendees: obj.Attendees.map((item) => (0, models_0_1.AttendeeFilterSensitiveLog)(item)) }
    });
    exports.ListAttendeesResponseFilterSensitiveLog = ListAttendeesResponseFilterSensitiveLog;
    var ListAttendeeTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, models_0_1.TagFilterSensitiveLog)(item)) }
    });
    exports.ListAttendeeTagsResponseFilterSensitiveLog = ListAttendeeTagsResponseFilterSensitiveLog;
    var ListBotsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Bots && { Bots: obj.Bots.map((item) => (0, models_0_1.BotFilterSensitiveLog)(item)) }
    });
    exports.ListBotsResponseFilterSensitiveLog = ListBotsResponseFilterSensitiveLog;
    var ListChannelBansRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelBansRequestFilterSensitiveLog = ListChannelBansRequestFilterSensitiveLog;
    var ListChannelBansResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ChannelBans && { ChannelBans: obj.ChannelBans.map((item) => (0, models_0_1.ChannelBanSummaryFilterSensitiveLog)(item)) }
    });
    exports.ListChannelBansResponseFilterSensitiveLog = ListChannelBansResponseFilterSensitiveLog;
    var ListChannelMembershipsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMembershipsRequestFilterSensitiveLog = ListChannelMembershipsRequestFilterSensitiveLog;
    var ListChannelMembershipsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMemberships && {
        ChannelMemberships: obj.ChannelMemberships.map((item) => (0, models_0_1.ChannelMembershipSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMembershipsResponseFilterSensitiveLog = ListChannelMembershipsResponseFilterSensitiveLog;
    var ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog = ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog;
    var ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMemberships && {
        ChannelMemberships: obj.ChannelMemberships.map((item) => (0, models_0_1.ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog = ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog;
    var ListChannelMessagesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMessagesRequestFilterSensitiveLog = ListChannelMessagesRequestFilterSensitiveLog;
    var ListChannelMessagesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ChannelMessages && {
        ChannelMessages: obj.ChannelMessages.map((item) => (0, models_0_1.ChannelMessageSummaryFilterSensitiveLog)(item))
      }
    });
    exports.ListChannelMessagesResponseFilterSensitiveLog = ListChannelMessagesResponseFilterSensitiveLog;
    var ListChannelModeratorsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelModeratorsRequestFilterSensitiveLog = ListChannelModeratorsRequestFilterSensitiveLog;
    var ListChannelModeratorsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ChannelModerators && {
        ChannelModerators: obj.ChannelModerators.map((item) => (0, models_0_1.ChannelModeratorSummaryFilterSensitiveLog)(item))
      }
    });
    exports.ListChannelModeratorsResponseFilterSensitiveLog = ListChannelModeratorsResponseFilterSensitiveLog;
    var ListChannelsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsRequestFilterSensitiveLog = ListChannelsRequestFilterSensitiveLog;
    var ListChannelsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channels && { Channels: obj.Channels.map((item) => (0, models_0_1.ChannelSummaryFilterSensitiveLog)(item)) },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsResponseFilterSensitiveLog = ListChannelsResponseFilterSensitiveLog;
    var ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog = ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog;
    var ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channels && {
        Channels: obj.Channels.map((item) => (0, models_0_1.ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog = ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog;
    var ListMediaCapturePipelinesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MediaCapturePipelines && {
        MediaCapturePipelines: obj.MediaCapturePipelines.map((item) => (0, models_0_1.MediaCapturePipelineFilterSensitiveLog)(item))
      }
    });
    exports.ListMediaCapturePipelinesResponseFilterSensitiveLog = ListMediaCapturePipelinesResponseFilterSensitiveLog;
    var ListMeetingsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Meetings && { Meetings: obj.Meetings.map((item) => (0, models_0_1.MeetingFilterSensitiveLog)(item)) }
    });
    exports.ListMeetingsResponseFilterSensitiveLog = ListMeetingsResponseFilterSensitiveLog;
    var ListMeetingTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, models_0_1.TagFilterSensitiveLog)(item)) }
    });
    exports.ListMeetingTagsResponseFilterSensitiveLog = ListMeetingTagsResponseFilterSensitiveLog;
    var ListPhoneNumberOrdersResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListPhoneNumberOrdersResponseFilterSensitiveLog = ListPhoneNumberOrdersResponseFilterSensitiveLog;
    var ListPhoneNumbersResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => (0, models_0_1.PhoneNumberFilterSensitiveLog)(item)) }
    });
    exports.ListPhoneNumbersResponseFilterSensitiveLog = ListPhoneNumbersResponseFilterSensitiveLog;
    var ListProxySessionsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListProxySessionsResponseFilterSensitiveLog = ListProxySessionsResponseFilterSensitiveLog;
    var ListRoomMembershipsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RoomMemberships && {
        RoomMemberships: obj.RoomMemberships.map((item) => (0, models_0_1.RoomMembershipFilterSensitiveLog)(item))
      }
    });
    exports.ListRoomMembershipsResponseFilterSensitiveLog = ListRoomMembershipsResponseFilterSensitiveLog;
    var ListRoomsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rooms && { Rooms: obj.Rooms.map((item) => (0, models_0_1.RoomFilterSensitiveLog)(item)) }
    });
    exports.ListRoomsResponseFilterSensitiveLog = ListRoomsResponseFilterSensitiveLog;
    var ListSipMediaApplicationsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSipMediaApplicationsResponseFilterSensitiveLog = ListSipMediaApplicationsResponseFilterSensitiveLog;
    var ListTagsForResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ResourceARN && { ResourceARN: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListTagsForResourceRequestFilterSensitiveLog = ListTagsForResourceRequestFilterSensitiveLog;
    var ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, models_0_1.TagFilterSensitiveLog)(item)) }
    });
    exports.ListTagsForResourceResponseFilterSensitiveLog = ListTagsForResourceResponseFilterSensitiveLog;
    var ListUsersRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.UserEmail && { UserEmail: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListUsersRequestFilterSensitiveLog = ListUsersRequestFilterSensitiveLog;
    var ListUsersResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Users && { Users: obj.Users.map((item) => (0, models_0_1.UserFilterSensitiveLog)(item)) }
    });
    exports.ListUsersResponseFilterSensitiveLog = ListUsersResponseFilterSensitiveLog;
    var ListVoiceConnectorTerminationCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Usernames && { Usernames: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListVoiceConnectorTerminationCredentialsResponseFilterSensitiveLog = ListVoiceConnectorTerminationCredentialsResponseFilterSensitiveLog;
    var PutAppInstanceStreamingConfigurationsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceStreamingConfigurations && {
        AppInstanceStreamingConfigurations: obj.AppInstanceStreamingConfigurations.map((item) => (0, models_0_1.AppInstanceStreamingConfigurationFilterSensitiveLog)(item))
      }
    });
    exports.PutAppInstanceStreamingConfigurationsRequestFilterSensitiveLog = PutAppInstanceStreamingConfigurationsRequestFilterSensitiveLog;
    var PutAppInstanceStreamingConfigurationsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceStreamingConfigurations && {
        AppInstanceStreamingConfigurations: obj.AppInstanceStreamingConfigurations.map((item) => (0, models_0_1.AppInstanceStreamingConfigurationFilterSensitiveLog)(item))
      }
    });
    exports.PutAppInstanceStreamingConfigurationsResponseFilterSensitiveLog = PutAppInstanceStreamingConfigurationsResponseFilterSensitiveLog;
    var PutEventsConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OutboundEventsHTTPSEndpoint && { OutboundEventsHTTPSEndpoint: smithy_client_1.SENSITIVE_STRING },
      ...obj.LambdaFunctionArn && { LambdaFunctionArn: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PutEventsConfigurationRequestFilterSensitiveLog = PutEventsConfigurationRequestFilterSensitiveLog;
    var PutEventsConfigurationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.EventsConfiguration && {
        EventsConfiguration: (0, models_0_1.EventsConfigurationFilterSensitiveLog)(obj.EventsConfiguration)
      }
    });
    exports.PutEventsConfigurationResponseFilterSensitiveLog = PutEventsConfigurationResponseFilterSensitiveLog;
    var PutVoiceConnectorEmergencyCallingConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.EmergencyCallingConfiguration && {
        EmergencyCallingConfiguration: (0, models_0_1.EmergencyCallingConfigurationFilterSensitiveLog)(obj.EmergencyCallingConfiguration)
      }
    });
    exports.PutVoiceConnectorEmergencyCallingConfigurationRequestFilterSensitiveLog = PutVoiceConnectorEmergencyCallingConfigurationRequestFilterSensitiveLog;
    var PutVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.EmergencyCallingConfiguration && {
        EmergencyCallingConfiguration: (0, models_0_1.EmergencyCallingConfigurationFilterSensitiveLog)(obj.EmergencyCallingConfiguration)
      }
    });
    exports.PutVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog = PutVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog;
    var PutVoiceConnectorProxyRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.FallBackPhoneNumber && { FallBackPhoneNumber: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PutVoiceConnectorProxyRequestFilterSensitiveLog = PutVoiceConnectorProxyRequestFilterSensitiveLog;
    var PutVoiceConnectorProxyResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Proxy && { Proxy: (0, exports.ProxyFilterSensitiveLog)(obj.Proxy) }
    });
    exports.PutVoiceConnectorProxyResponseFilterSensitiveLog = PutVoiceConnectorProxyResponseFilterSensitiveLog;
    var PutVoiceConnectorTerminationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Termination && { Termination: (0, exports.TerminationFilterSensitiveLog)(obj.Termination) }
    });
    exports.PutVoiceConnectorTerminationRequestFilterSensitiveLog = PutVoiceConnectorTerminationRequestFilterSensitiveLog;
    var PutVoiceConnectorTerminationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Termination && { Termination: (0, exports.TerminationFilterSensitiveLog)(obj.Termination) }
    });
    exports.PutVoiceConnectorTerminationResponseFilterSensitiveLog = PutVoiceConnectorTerminationResponseFilterSensitiveLog;
    var PutVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: obj.Credentials.map((item) => (0, models_0_1.CredentialFilterSensitiveLog)(item)) }
    });
    exports.PutVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog = PutVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog;
    var RegenerateSecurityTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Bot && { Bot: (0, models_0_1.BotFilterSensitiveLog)(obj.Bot) }
    });
    exports.RegenerateSecurityTokenResponseFilterSensitiveLog = RegenerateSecurityTokenResponseFilterSensitiveLog;
    var ResetPersonalPINResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.User && { User: (0, models_0_1.UserFilterSensitiveLog)(obj.User) }
    });
    exports.ResetPersonalPINResponseFilterSensitiveLog = ResetPersonalPINResponseFilterSensitiveLog;
    var RestorePhoneNumberResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: (0, models_0_1.PhoneNumberFilterSensitiveLog)(obj.PhoneNumber) }
    });
    exports.RestorePhoneNumberResponseFilterSensitiveLog = RestorePhoneNumberResponseFilterSensitiveLog;
    var SearchAvailablePhoneNumbersResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.E164PhoneNumbers && { E164PhoneNumbers: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SearchAvailablePhoneNumbersResponseFilterSensitiveLog = SearchAvailablePhoneNumbersResponseFilterSensitiveLog;
    var SendChannelMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SendChannelMessageRequestFilterSensitiveLog = SendChannelMessageRequestFilterSensitiveLog;
    var TagAttendeeRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, models_0_1.TagFilterSensitiveLog)(item)) }
    });
    exports.TagAttendeeRequestFilterSensitiveLog = TagAttendeeRequestFilterSensitiveLog;
    var TagMeetingRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, models_0_1.TagFilterSensitiveLog)(item)) }
    });
    exports.TagMeetingRequestFilterSensitiveLog = TagMeetingRequestFilterSensitiveLog;
    var TagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ResourceARN && { ResourceARN: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, models_0_1.TagFilterSensitiveLog)(item)) }
    });
    exports.TagResourceRequestFilterSensitiveLog = TagResourceRequestFilterSensitiveLog;
    var UntagAttendeeRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TagKeys && { TagKeys: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UntagAttendeeRequestFilterSensitiveLog = UntagAttendeeRequestFilterSensitiveLog;
    var UntagMeetingRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TagKeys && { TagKeys: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UntagMeetingRequestFilterSensitiveLog = UntagMeetingRequestFilterSensitiveLog;
    var UntagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ResourceARN && { ResourceARN: smithy_client_1.SENSITIVE_STRING },
      ...obj.TagKeys && { TagKeys: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UntagResourceRequestFilterSensitiveLog = UntagResourceRequestFilterSensitiveLog;
    var UpdateAppInstanceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateAppInstanceRequestFilterSensitiveLog = UpdateAppInstanceRequestFilterSensitiveLog;
    var UpdateAppInstanceUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateAppInstanceUserRequestFilterSensitiveLog = UpdateAppInstanceUserRequestFilterSensitiveLog;
    var UpdateBotResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Bot && { Bot: (0, models_0_1.BotFilterSensitiveLog)(obj.Bot) }
    });
    exports.UpdateBotResponseFilterSensitiveLog = UpdateBotResponseFilterSensitiveLog;
    var UpdateChannelRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateChannelRequestFilterSensitiveLog = UpdateChannelRequestFilterSensitiveLog;
    var UpdateChannelMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateChannelMessageRequestFilterSensitiveLog = UpdateChannelMessageRequestFilterSensitiveLog;
    var UpdatePhoneNumberRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.CallingName && { CallingName: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdatePhoneNumberRequestFilterSensitiveLog = UpdatePhoneNumberRequestFilterSensitiveLog;
    var UpdatePhoneNumberResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PhoneNumber && { PhoneNumber: (0, models_0_1.PhoneNumberFilterSensitiveLog)(obj.PhoneNumber) }
    });
    exports.UpdatePhoneNumberResponseFilterSensitiveLog = UpdatePhoneNumberResponseFilterSensitiveLog;
    var UpdatePhoneNumberSettingsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.CallingName && { CallingName: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdatePhoneNumberSettingsRequestFilterSensitiveLog = UpdatePhoneNumberSettingsRequestFilterSensitiveLog;
    var UpdateProxySessionResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ProxySession && { ProxySession: (0, models_0_1.ProxySessionFilterSensitiveLog)(obj.ProxySession) }
    });
    exports.UpdateProxySessionResponseFilterSensitiveLog = UpdateProxySessionResponseFilterSensitiveLog;
    var UpdateRoomRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateRoomRequestFilterSensitiveLog = UpdateRoomRequestFilterSensitiveLog;
    var UpdateRoomResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Room && { Room: (0, models_0_1.RoomFilterSensitiveLog)(obj.Room) }
    });
    exports.UpdateRoomResponseFilterSensitiveLog = UpdateRoomResponseFilterSensitiveLog;
    var UpdateRoomMembershipResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RoomMembership && { RoomMembership: (0, models_0_1.RoomMembershipFilterSensitiveLog)(obj.RoomMembership) }
    });
    exports.UpdateRoomMembershipResponseFilterSensitiveLog = UpdateRoomMembershipResponseFilterSensitiveLog;
    var UpdateSipMediaApplicationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Endpoints && { Endpoints: obj.Endpoints.map((item) => (0, models_0_1.SipMediaApplicationEndpointFilterSensitiveLog)(item)) }
    });
    exports.UpdateSipMediaApplicationRequestFilterSensitiveLog = UpdateSipMediaApplicationRequestFilterSensitiveLog;
    var UpdateSipMediaApplicationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SipMediaApplication && {
        SipMediaApplication: (0, models_0_1.SipMediaApplicationFilterSensitiveLog)(obj.SipMediaApplication)
      }
    });
    exports.UpdateSipMediaApplicationResponseFilterSensitiveLog = UpdateSipMediaApplicationResponseFilterSensitiveLog;
    var UpdateSipMediaApplicationCallRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Arguments && { Arguments: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateSipMediaApplicationCallRequestFilterSensitiveLog = UpdateSipMediaApplicationCallRequestFilterSensitiveLog;
    var UpdateUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AlexaForBusinessMetadata && {
        AlexaForBusinessMetadata: (0, models_0_1.AlexaForBusinessMetadataFilterSensitiveLog)(obj.AlexaForBusinessMetadata)
      }
    });
    exports.UpdateUserRequestFilterSensitiveLog = UpdateUserRequestFilterSensitiveLog;
    var UpdateUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.User && { User: (0, models_0_1.UserFilterSensitiveLog)(obj.User) }
    });
    exports.UpdateUserResponseFilterSensitiveLog = UpdateUserResponseFilterSensitiveLog;
    var ValidateE911AddressRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.StreetNumber && { StreetNumber: smithy_client_1.SENSITIVE_STRING },
      ...obj.StreetInfo && { StreetInfo: smithy_client_1.SENSITIVE_STRING },
      ...obj.City && { City: smithy_client_1.SENSITIVE_STRING },
      ...obj.State && { State: smithy_client_1.SENSITIVE_STRING },
      ...obj.Country && { Country: smithy_client_1.SENSITIVE_STRING },
      ...obj.PostalCode && { PostalCode: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ValidateE911AddressRequestFilterSensitiveLog = ValidateE911AddressRequestFilterSensitiveLog;
    var ValidateE911AddressResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Address && { Address: (0, models_0_1.AddressFilterSensitiveLog)(obj.Address) },
      ...obj.CandidateAddressList && {
        CandidateAddressList: obj.CandidateAddressList.map((item) => (0, models_0_1.CandidateAddressFilterSensitiveLog)(item))
      }
    });
    exports.ValidateE911AddressResponseFilterSensitiveLog = ValidateE911AddressResponseFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetRoomCommand.js
var require_GetRoomCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetRoomCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoomCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetRoomCommand = class _GetRoomCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetRoomCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetRoomCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetRoomResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRoomCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRoomCommand)(output, context);
      }
    };
    exports.GetRoomCommand = GetRoomCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetSipMediaApplicationCommand.js
var require_GetSipMediaApplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetSipMediaApplicationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSipMediaApplicationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetSipMediaApplicationCommand = class _GetSipMediaApplicationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetSipMediaApplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetSipMediaApplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetSipMediaApplicationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetSipMediaApplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetSipMediaApplicationCommand)(output, context);
      }
    };
    exports.GetSipMediaApplicationCommand = GetSipMediaApplicationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetSipMediaApplicationLoggingConfigurationCommand.js
var require_GetSipMediaApplicationLoggingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetSipMediaApplicationLoggingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSipMediaApplicationLoggingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetSipMediaApplicationLoggingConfigurationCommand = class _GetSipMediaApplicationLoggingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetSipMediaApplicationLoggingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetSipMediaApplicationLoggingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetSipMediaApplicationLoggingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetSipMediaApplicationLoggingConfigurationCommand)(output, context);
      }
    };
    exports.GetSipMediaApplicationLoggingConfigurationCommand = GetSipMediaApplicationLoggingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetSipRuleCommand.js
var require_GetSipRuleCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetSipRuleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSipRuleCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetSipRuleCommand = class _GetSipRuleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetSipRuleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetSipRuleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetSipRuleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetSipRuleCommand)(output, context);
      }
    };
    exports.GetSipRuleCommand = GetSipRuleCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetUserCommand.js
var require_GetUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetUserCommand = class _GetUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetUserCommand)(output, context);
      }
    };
    exports.GetUserCommand = GetUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetUserSettingsCommand.js
var require_GetUserSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetUserSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetUserSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetUserSettingsCommand = class _GetUserSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetUserSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetUserSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetUserSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetUserSettingsCommand)(output, context);
      }
    };
    exports.GetUserSettingsCommand = GetUserSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorCommand.js
var require_GetVoiceConnectorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorCommand = class _GetVoiceConnectorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorCommand = GetVoiceConnectorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorEmergencyCallingConfigurationCommand.js
var require_GetVoiceConnectorEmergencyCallingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorEmergencyCallingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorEmergencyCallingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorEmergencyCallingConfigurationCommand = class _GetVoiceConnectorEmergencyCallingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorEmergencyCallingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorEmergencyCallingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorEmergencyCallingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorEmergencyCallingConfigurationCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorEmergencyCallingConfigurationCommand = GetVoiceConnectorEmergencyCallingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorGroupCommand.js
var require_GetVoiceConnectorGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorGroupCommand = class _GetVoiceConnectorGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorGroupCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorGroupCommand = GetVoiceConnectorGroupCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorLoggingConfigurationCommand.js
var require_GetVoiceConnectorLoggingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorLoggingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorLoggingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorLoggingConfigurationCommand = class _GetVoiceConnectorLoggingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorLoggingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorLoggingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorLoggingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorLoggingConfigurationCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorLoggingConfigurationCommand = GetVoiceConnectorLoggingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorOriginationCommand.js
var require_GetVoiceConnectorOriginationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorOriginationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorOriginationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorOriginationCommand = class _GetVoiceConnectorOriginationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorOriginationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorOriginationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorOriginationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorOriginationCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorOriginationCommand = GetVoiceConnectorOriginationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorProxyCommand.js
var require_GetVoiceConnectorProxyCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorProxyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorProxyCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorProxyCommand = class _GetVoiceConnectorProxyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorProxyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorProxyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetVoiceConnectorProxyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorProxyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorProxyCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorProxyCommand = GetVoiceConnectorProxyCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorStreamingConfigurationCommand.js
var require_GetVoiceConnectorStreamingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorStreamingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorStreamingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorStreamingConfigurationCommand = class _GetVoiceConnectorStreamingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorStreamingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorStreamingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorStreamingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorStreamingConfigurationCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorStreamingConfigurationCommand = GetVoiceConnectorStreamingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorTerminationCommand.js
var require_GetVoiceConnectorTerminationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorTerminationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorTerminationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorTerminationCommand = class _GetVoiceConnectorTerminationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorTerminationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorTerminationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetVoiceConnectorTerminationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorTerminationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorTerminationCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorTerminationCommand = GetVoiceConnectorTerminationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorTerminationHealthCommand.js
var require_GetVoiceConnectorTerminationHealthCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/GetVoiceConnectorTerminationHealthCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetVoiceConnectorTerminationHealthCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetVoiceConnectorTerminationHealthCommand = class _GetVoiceConnectorTerminationHealthCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetVoiceConnectorTerminationHealthCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "GetVoiceConnectorTerminationHealthCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetVoiceConnectorTerminationHealthCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetVoiceConnectorTerminationHealthCommand)(output, context);
      }
    };
    exports.GetVoiceConnectorTerminationHealthCommand = GetVoiceConnectorTerminationHealthCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/InviteUsersCommand.js
var require_InviteUsersCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/InviteUsersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InviteUsersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var InviteUsersCommand = class _InviteUsersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _InviteUsersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "InviteUsersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.InviteUsersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.InviteUsersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_InviteUsersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_InviteUsersCommand)(output, context);
      }
    };
    exports.InviteUsersCommand = InviteUsersCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListAccountsCommand = class _ListAccountsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAppInstanceAdminsCommand.js
var require_ListAppInstanceAdminsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAppInstanceAdminsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstanceAdminsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListAppInstanceAdminsCommand = class _ListAppInstanceAdminsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAppInstanceAdminsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListAppInstanceAdminsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAppInstanceAdminsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAppInstanceAdminsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAppInstanceAdminsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAppInstanceAdminsCommand)(output, context);
      }
    };
    exports.ListAppInstanceAdminsCommand = ListAppInstanceAdminsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAppInstancesCommand.js
var require_ListAppInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAppInstancesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstancesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListAppInstancesCommand = class _ListAppInstancesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAppInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListAppInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAppInstancesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAppInstancesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAppInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAppInstancesCommand)(output, context);
      }
    };
    exports.ListAppInstancesCommand = ListAppInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAppInstanceUsersCommand.js
var require_ListAppInstanceUsersCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAppInstanceUsersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstanceUsersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListAppInstanceUsersCommand = class _ListAppInstanceUsersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAppInstanceUsersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListAppInstanceUsersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAppInstanceUsersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAppInstanceUsersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAppInstanceUsersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAppInstanceUsersCommand)(output, context);
      }
    };
    exports.ListAppInstanceUsersCommand = ListAppInstanceUsersCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAttendeesCommand.js
var require_ListAttendeesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAttendeesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAttendeesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListAttendeesCommand = class _ListAttendeesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAttendeesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListAttendeesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListAttendeesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAttendeesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAttendeesCommand)(output, context);
      }
    };
    exports.ListAttendeesCommand = ListAttendeesCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAttendeeTagsCommand.js
var require_ListAttendeeTagsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListAttendeeTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAttendeeTagsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListAttendeeTagsCommand = class _ListAttendeeTagsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAttendeeTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListAttendeeTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListAttendeeTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAttendeeTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAttendeeTagsCommand)(output, context);
      }
    };
    exports.ListAttendeeTagsCommand = ListAttendeeTagsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListBotsCommand.js
var require_ListBotsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListBotsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListBotsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListBotsCommand = class _ListBotsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListBotsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListBotsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListBotsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListBotsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListBotsCommand)(output, context);
      }
    };
    exports.ListBotsCommand = ListBotsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelBansCommand.js
var require_ListChannelBansCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelBansCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelBansCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListChannelBansCommand = class _ListChannelBansCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelBansCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListChannelBansCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListChannelBansRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListChannelBansResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelBansCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelBansCommand)(output, context);
      }
    };
    exports.ListChannelBansCommand = ListChannelBansCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelMembershipsCommand.js
var require_ListChannelMembershipsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelMembershipsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelMembershipsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListChannelMembershipsCommand = class _ListChannelMembershipsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelMembershipsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListChannelMembershipsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListChannelMembershipsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListChannelMembershipsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelMembershipsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelMembershipsCommand)(output, context);
      }
    };
    exports.ListChannelMembershipsCommand = ListChannelMembershipsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelMembershipsForAppInstanceUserCommand.js
var require_ListChannelMembershipsForAppInstanceUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelMembershipsForAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelMembershipsForAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListChannelMembershipsForAppInstanceUserCommand = class _ListChannelMembershipsForAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelMembershipsForAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListChannelMembershipsForAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelMembershipsForAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelMembershipsForAppInstanceUserCommand)(output, context);
      }
    };
    exports.ListChannelMembershipsForAppInstanceUserCommand = ListChannelMembershipsForAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelMessagesCommand.js
var require_ListChannelMessagesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelMessagesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelMessagesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListChannelMessagesCommand = class _ListChannelMessagesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelMessagesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListChannelMessagesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListChannelMessagesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListChannelMessagesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelMessagesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelMessagesCommand)(output, context);
      }
    };
    exports.ListChannelMessagesCommand = ListChannelMessagesCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelModeratorsCommand.js
var require_ListChannelModeratorsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelModeratorsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelModeratorsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListChannelModeratorsCommand = class _ListChannelModeratorsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelModeratorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListChannelModeratorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListChannelModeratorsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListChannelModeratorsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelModeratorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelModeratorsCommand)(output, context);
      }
    };
    exports.ListChannelModeratorsCommand = ListChannelModeratorsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelsCommand.js
var require_ListChannelsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListChannelsCommand = class _ListChannelsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListChannelsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListChannelsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListChannelsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelsCommand)(output, context);
      }
    };
    exports.ListChannelsCommand = ListChannelsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelsModeratedByAppInstanceUserCommand.js
var require_ListChannelsModeratedByAppInstanceUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListChannelsModeratedByAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelsModeratedByAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListChannelsModeratedByAppInstanceUserCommand = class _ListChannelsModeratedByAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelsModeratedByAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListChannelsModeratedByAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelsModeratedByAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelsModeratedByAppInstanceUserCommand)(output, context);
      }
    };
    exports.ListChannelsModeratedByAppInstanceUserCommand = ListChannelsModeratedByAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListMediaCapturePipelinesCommand.js
var require_ListMediaCapturePipelinesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListMediaCapturePipelinesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListMediaCapturePipelinesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListMediaCapturePipelinesCommand = class _ListMediaCapturePipelinesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListMediaCapturePipelinesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListMediaCapturePipelinesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListMediaCapturePipelinesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListMediaCapturePipelinesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListMediaCapturePipelinesCommand)(output, context);
      }
    };
    exports.ListMediaCapturePipelinesCommand = ListMediaCapturePipelinesCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListMeetingsCommand.js
var require_ListMeetingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListMeetingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListMeetingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListMeetingsCommand = class _ListMeetingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListMeetingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListMeetingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListMeetingsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListMeetingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListMeetingsCommand)(output, context);
      }
    };
    exports.ListMeetingsCommand = ListMeetingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListMeetingTagsCommand.js
var require_ListMeetingTagsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListMeetingTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListMeetingTagsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListMeetingTagsCommand = class _ListMeetingTagsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListMeetingTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListMeetingTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListMeetingTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListMeetingTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListMeetingTagsCommand)(output, context);
      }
    };
    exports.ListMeetingTagsCommand = ListMeetingTagsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListPhoneNumberOrdersCommand.js
var require_ListPhoneNumberOrdersCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListPhoneNumberOrdersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListPhoneNumberOrdersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListPhoneNumberOrdersCommand = class _ListPhoneNumberOrdersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListPhoneNumberOrdersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListPhoneNumberOrdersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListPhoneNumberOrdersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListPhoneNumberOrdersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListPhoneNumberOrdersCommand)(output, context);
      }
    };
    exports.ListPhoneNumberOrdersCommand = ListPhoneNumberOrdersCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListPhoneNumbersCommand.js
var require_ListPhoneNumbersCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListPhoneNumbersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListPhoneNumbersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListPhoneNumbersCommand = class _ListPhoneNumbersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListPhoneNumbersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListPhoneNumbersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListPhoneNumbersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListPhoneNumbersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListPhoneNumbersCommand)(output, context);
      }
    };
    exports.ListPhoneNumbersCommand = ListPhoneNumbersCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListProxySessionsCommand.js
var require_ListProxySessionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListProxySessionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListProxySessionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListProxySessionsCommand = class _ListProxySessionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListProxySessionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListProxySessionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListProxySessionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListProxySessionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListProxySessionsCommand)(output, context);
      }
    };
    exports.ListProxySessionsCommand = ListProxySessionsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListRoomMembershipsCommand.js
var require_ListRoomMembershipsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListRoomMembershipsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListRoomMembershipsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListRoomMembershipsCommand = class _ListRoomMembershipsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListRoomMembershipsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListRoomMembershipsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListRoomMembershipsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListRoomMembershipsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListRoomMembershipsCommand)(output, context);
      }
    };
    exports.ListRoomMembershipsCommand = ListRoomMembershipsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListRoomsCommand.js
var require_ListRoomsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListRoomsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListRoomsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListRoomsCommand = class _ListRoomsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListRoomsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListRoomsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListRoomsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListRoomsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListRoomsCommand)(output, context);
      }
    };
    exports.ListRoomsCommand = ListRoomsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListSipMediaApplicationsCommand.js
var require_ListSipMediaApplicationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListSipMediaApplicationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSipMediaApplicationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListSipMediaApplicationsCommand = class _ListSipMediaApplicationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListSipMediaApplicationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListSipMediaApplicationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListSipMediaApplicationsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListSipMediaApplicationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListSipMediaApplicationsCommand)(output, context);
      }
    };
    exports.ListSipMediaApplicationsCommand = ListSipMediaApplicationsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListSipRulesCommand.js
var require_ListSipRulesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListSipRulesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSipRulesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListSipRulesCommand = class _ListSipRulesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListSipRulesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListSipRulesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListSipRulesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListSipRulesCommand)(output, context);
      }
    };
    exports.ListSipRulesCommand = ListSipRulesCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListSupportedPhoneNumberCountriesCommand.js
var require_ListSupportedPhoneNumberCountriesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListSupportedPhoneNumberCountriesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSupportedPhoneNumberCountriesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListSupportedPhoneNumberCountriesCommand = class _ListSupportedPhoneNumberCountriesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListSupportedPhoneNumberCountriesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListSupportedPhoneNumberCountriesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListSupportedPhoneNumberCountriesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListSupportedPhoneNumberCountriesCommand)(output, context);
      }
    };
    exports.ListSupportedPhoneNumberCountriesCommand = ListSupportedPhoneNumberCountriesCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListTagsForResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsForResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListTagsForResourceCommand = class _ListTagsForResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListTagsForResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListTagsForResourceResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListTagsForResourceCommand)(output, context);
      }
    };
    exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListUsersCommand.js
var require_ListUsersCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListUsersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListUsersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListUsersCommand = class _ListUsersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListUsersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListUsersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListUsersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListUsersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListUsersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListUsersCommand)(output, context);
      }
    };
    exports.ListUsersCommand = ListUsersCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListVoiceConnectorGroupsCommand.js
var require_ListVoiceConnectorGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListVoiceConnectorGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListVoiceConnectorGroupsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListVoiceConnectorGroupsCommand = class _ListVoiceConnectorGroupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListVoiceConnectorGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListVoiceConnectorGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListVoiceConnectorGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListVoiceConnectorGroupsCommand)(output, context);
      }
    };
    exports.ListVoiceConnectorGroupsCommand = ListVoiceConnectorGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListVoiceConnectorsCommand.js
var require_ListVoiceConnectorsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListVoiceConnectorsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListVoiceConnectorsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListVoiceConnectorsCommand = class _ListVoiceConnectorsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListVoiceConnectorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListVoiceConnectorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListVoiceConnectorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListVoiceConnectorsCommand)(output, context);
      }
    };
    exports.ListVoiceConnectorsCommand = ListVoiceConnectorsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListVoiceConnectorTerminationCredentialsCommand.js
var require_ListVoiceConnectorTerminationCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ListVoiceConnectorTerminationCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListVoiceConnectorTerminationCredentialsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListVoiceConnectorTerminationCredentialsCommand = class _ListVoiceConnectorTerminationCredentialsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListVoiceConnectorTerminationCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ListVoiceConnectorTerminationCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListVoiceConnectorTerminationCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListVoiceConnectorTerminationCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListVoiceConnectorTerminationCredentialsCommand)(output, context);
      }
    };
    exports.ListVoiceConnectorTerminationCredentialsCommand = ListVoiceConnectorTerminationCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/LogoutUserCommand.js
var require_LogoutUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/LogoutUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var LogoutUserCommand = class _LogoutUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _LogoutUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "LogoutUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_LogoutUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_LogoutUserCommand)(output, context);
      }
    };
    exports.LogoutUserCommand = LogoutUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutAppInstanceRetentionSettingsCommand.js
var require_PutAppInstanceRetentionSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutAppInstanceRetentionSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutAppInstanceRetentionSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutAppInstanceRetentionSettingsCommand2 = class _PutAppInstanceRetentionSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutAppInstanceRetentionSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutAppInstanceRetentionSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutAppInstanceRetentionSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutAppInstanceRetentionSettingsCommand)(output, context);
      }
    };
    exports.PutAppInstanceRetentionSettingsCommand = PutAppInstanceRetentionSettingsCommand2;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutAppInstanceStreamingConfigurationsCommand.js
var require_PutAppInstanceStreamingConfigurationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutAppInstanceStreamingConfigurationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutAppInstanceStreamingConfigurationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutAppInstanceStreamingConfigurationsCommand2 = class _PutAppInstanceStreamingConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutAppInstanceStreamingConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutAppInstanceStreamingConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutAppInstanceStreamingConfigurationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutAppInstanceStreamingConfigurationsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutAppInstanceStreamingConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutAppInstanceStreamingConfigurationsCommand)(output, context);
      }
    };
    exports.PutAppInstanceStreamingConfigurationsCommand = PutAppInstanceStreamingConfigurationsCommand2;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutEventsConfigurationCommand.js
var require_PutEventsConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutEventsConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutEventsConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutEventsConfigurationCommand = class _PutEventsConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutEventsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutEventsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutEventsConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutEventsConfigurationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutEventsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutEventsConfigurationCommand)(output, context);
      }
    };
    exports.PutEventsConfigurationCommand = PutEventsConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutRetentionSettingsCommand.js
var require_PutRetentionSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutRetentionSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutRetentionSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutRetentionSettingsCommand = class _PutRetentionSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutRetentionSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutRetentionSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutRetentionSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutRetentionSettingsCommand)(output, context);
      }
    };
    exports.PutRetentionSettingsCommand = PutRetentionSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutSipMediaApplicationLoggingConfigurationCommand.js
var require_PutSipMediaApplicationLoggingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutSipMediaApplicationLoggingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutSipMediaApplicationLoggingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutSipMediaApplicationLoggingConfigurationCommand = class _PutSipMediaApplicationLoggingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutSipMediaApplicationLoggingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutSipMediaApplicationLoggingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutSipMediaApplicationLoggingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutSipMediaApplicationLoggingConfigurationCommand)(output, context);
      }
    };
    exports.PutSipMediaApplicationLoggingConfigurationCommand = PutSipMediaApplicationLoggingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorEmergencyCallingConfigurationCommand.js
var require_PutVoiceConnectorEmergencyCallingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorEmergencyCallingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutVoiceConnectorEmergencyCallingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutVoiceConnectorEmergencyCallingConfigurationCommand = class _PutVoiceConnectorEmergencyCallingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutVoiceConnectorEmergencyCallingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutVoiceConnectorEmergencyCallingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutVoiceConnectorEmergencyCallingConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutVoiceConnectorEmergencyCallingConfigurationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutVoiceConnectorEmergencyCallingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutVoiceConnectorEmergencyCallingConfigurationCommand)(output, context);
      }
    };
    exports.PutVoiceConnectorEmergencyCallingConfigurationCommand = PutVoiceConnectorEmergencyCallingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorLoggingConfigurationCommand.js
var require_PutVoiceConnectorLoggingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorLoggingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutVoiceConnectorLoggingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutVoiceConnectorLoggingConfigurationCommand = class _PutVoiceConnectorLoggingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutVoiceConnectorLoggingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutVoiceConnectorLoggingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutVoiceConnectorLoggingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutVoiceConnectorLoggingConfigurationCommand)(output, context);
      }
    };
    exports.PutVoiceConnectorLoggingConfigurationCommand = PutVoiceConnectorLoggingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorOriginationCommand.js
var require_PutVoiceConnectorOriginationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorOriginationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutVoiceConnectorOriginationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutVoiceConnectorOriginationCommand = class _PutVoiceConnectorOriginationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutVoiceConnectorOriginationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutVoiceConnectorOriginationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutVoiceConnectorOriginationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutVoiceConnectorOriginationCommand)(output, context);
      }
    };
    exports.PutVoiceConnectorOriginationCommand = PutVoiceConnectorOriginationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorProxyCommand.js
var require_PutVoiceConnectorProxyCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorProxyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutVoiceConnectorProxyCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutVoiceConnectorProxyCommand = class _PutVoiceConnectorProxyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutVoiceConnectorProxyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutVoiceConnectorProxyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutVoiceConnectorProxyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutVoiceConnectorProxyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutVoiceConnectorProxyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutVoiceConnectorProxyCommand)(output, context);
      }
    };
    exports.PutVoiceConnectorProxyCommand = PutVoiceConnectorProxyCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorStreamingConfigurationCommand.js
var require_PutVoiceConnectorStreamingConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorStreamingConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutVoiceConnectorStreamingConfigurationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutVoiceConnectorStreamingConfigurationCommand = class _PutVoiceConnectorStreamingConfigurationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutVoiceConnectorStreamingConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutVoiceConnectorStreamingConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutVoiceConnectorStreamingConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutVoiceConnectorStreamingConfigurationCommand)(output, context);
      }
    };
    exports.PutVoiceConnectorStreamingConfigurationCommand = PutVoiceConnectorStreamingConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorTerminationCommand.js
var require_PutVoiceConnectorTerminationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorTerminationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutVoiceConnectorTerminationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutVoiceConnectorTerminationCommand = class _PutVoiceConnectorTerminationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutVoiceConnectorTerminationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutVoiceConnectorTerminationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutVoiceConnectorTerminationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutVoiceConnectorTerminationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutVoiceConnectorTerminationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutVoiceConnectorTerminationCommand)(output, context);
      }
    };
    exports.PutVoiceConnectorTerminationCommand = PutVoiceConnectorTerminationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorTerminationCredentialsCommand.js
var require_PutVoiceConnectorTerminationCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/PutVoiceConnectorTerminationCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutVoiceConnectorTerminationCredentialsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutVoiceConnectorTerminationCredentialsCommand = class _PutVoiceConnectorTerminationCredentialsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutVoiceConnectorTerminationCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "PutVoiceConnectorTerminationCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutVoiceConnectorTerminationCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutVoiceConnectorTerminationCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutVoiceConnectorTerminationCredentialsCommand)(output, context);
      }
    };
    exports.PutVoiceConnectorTerminationCredentialsCommand = PutVoiceConnectorTerminationCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/RedactChannelMessageCommand.js
var require_RedactChannelMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/RedactChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RedactChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var RedactChannelMessageCommand = class _RedactChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RedactChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "RedactChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RedactChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RedactChannelMessageCommand)(output, context);
      }
    };
    exports.RedactChannelMessageCommand = RedactChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/RedactConversationMessageCommand.js
var require_RedactConversationMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/RedactConversationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RedactConversationMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var RedactConversationMessageCommand = class _RedactConversationMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RedactConversationMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "RedactConversationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RedactConversationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RedactConversationMessageCommand)(output, context);
      }
    };
    exports.RedactConversationMessageCommand = RedactConversationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/RedactRoomMessageCommand.js
var require_RedactRoomMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/RedactRoomMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RedactRoomMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var RedactRoomMessageCommand = class _RedactRoomMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RedactRoomMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "RedactRoomMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RedactRoomMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RedactRoomMessageCommand)(output, context);
      }
    };
    exports.RedactRoomMessageCommand = RedactRoomMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/RegenerateSecurityTokenCommand.js
var require_RegenerateSecurityTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/RegenerateSecurityTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegenerateSecurityTokenCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var RegenerateSecurityTokenCommand = class _RegenerateSecurityTokenCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegenerateSecurityTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "RegenerateSecurityTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.RegenerateSecurityTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RegenerateSecurityTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RegenerateSecurityTokenCommand)(output, context);
      }
    };
    exports.RegenerateSecurityTokenCommand = RegenerateSecurityTokenCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ResetPersonalPINCommand.js
var require_ResetPersonalPINCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ResetPersonalPINCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResetPersonalPINCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ResetPersonalPINCommand = class _ResetPersonalPINCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ResetPersonalPINCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ResetPersonalPINCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ResetPersonalPINResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ResetPersonalPINCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ResetPersonalPINCommand)(output, context);
      }
    };
    exports.ResetPersonalPINCommand = ResetPersonalPINCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/RestorePhoneNumberCommand.js
var require_RestorePhoneNumberCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/RestorePhoneNumberCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestorePhoneNumberCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var RestorePhoneNumberCommand = class _RestorePhoneNumberCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RestorePhoneNumberCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "RestorePhoneNumberCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.RestorePhoneNumberResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RestorePhoneNumberCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RestorePhoneNumberCommand)(output, context);
      }
    };
    exports.RestorePhoneNumberCommand = RestorePhoneNumberCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/SearchAvailablePhoneNumbersCommand.js
var require_SearchAvailablePhoneNumbersCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/SearchAvailablePhoneNumbersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SearchAvailablePhoneNumbersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var SearchAvailablePhoneNumbersCommand = class _SearchAvailablePhoneNumbersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SearchAvailablePhoneNumbersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "SearchAvailablePhoneNumbersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.SearchAvailablePhoneNumbersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_SearchAvailablePhoneNumbersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_SearchAvailablePhoneNumbersCommand)(output, context);
      }
    };
    exports.SearchAvailablePhoneNumbersCommand = SearchAvailablePhoneNumbersCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/SendChannelMessageCommand.js
var require_SendChannelMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/SendChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var SendChannelMessageCommand = class _SendChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SendChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "SendChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SendChannelMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_SendChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_SendChannelMessageCommand)(output, context);
      }
    };
    exports.SendChannelMessageCommand = SendChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/StartMeetingTranscriptionCommand.js
var require_StartMeetingTranscriptionCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/StartMeetingTranscriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartMeetingTranscriptionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var StartMeetingTranscriptionCommand = class _StartMeetingTranscriptionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StartMeetingTranscriptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "StartMeetingTranscriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_StartMeetingTranscriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_StartMeetingTranscriptionCommand)(output, context);
      }
    };
    exports.StartMeetingTranscriptionCommand = StartMeetingTranscriptionCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/StopMeetingTranscriptionCommand.js
var require_StopMeetingTranscriptionCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/StopMeetingTranscriptionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopMeetingTranscriptionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var StopMeetingTranscriptionCommand = class _StopMeetingTranscriptionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StopMeetingTranscriptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "StopMeetingTranscriptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_StopMeetingTranscriptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_StopMeetingTranscriptionCommand)(output, context);
      }
    };
    exports.StopMeetingTranscriptionCommand = StopMeetingTranscriptionCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/TagAttendeeCommand.js
var require_TagAttendeeCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/TagAttendeeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagAttendeeCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var TagAttendeeCommand = class _TagAttendeeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TagAttendeeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "TagAttendeeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.TagAttendeeRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_TagAttendeeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_TagAttendeeCommand)(output, context);
      }
    };
    exports.TagAttendeeCommand = TagAttendeeCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/TagMeetingCommand.js
var require_TagMeetingCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/TagMeetingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagMeetingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var TagMeetingCommand = class _TagMeetingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TagMeetingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "TagMeetingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.TagMeetingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_TagMeetingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_TagMeetingCommand)(output, context);
      }
    };
    exports.TagMeetingCommand = TagMeetingCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/TagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var TagResourceCommand = class _TagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.TagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UntagAttendeeCommand.js
var require_UntagAttendeeCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UntagAttendeeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagAttendeeCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UntagAttendeeCommand = class _UntagAttendeeCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UntagAttendeeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UntagAttendeeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UntagAttendeeRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UntagAttendeeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UntagAttendeeCommand)(output, context);
      }
    };
    exports.UntagAttendeeCommand = UntagAttendeeCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UntagMeetingCommand.js
var require_UntagMeetingCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UntagMeetingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagMeetingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UntagMeetingCommand = class _UntagMeetingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UntagMeetingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UntagMeetingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UntagMeetingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UntagMeetingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UntagMeetingCommand)(output, context);
      }
    };
    exports.UntagMeetingCommand = UntagMeetingCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UntagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UntagResourceCommand = class _UntagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UntagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateAccountCommand.js
var require_UpdateAccountCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateAccountCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAccountCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateAccountCommand = class _UpdateAccountCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAccountCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateAccountCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateAccountCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateAccountCommand)(output, context);
      }
    };
    exports.UpdateAccountCommand = UpdateAccountCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateAccountSettingsCommand.js
var require_UpdateAccountSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateAccountSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAccountSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateAccountSettingsCommand = class _UpdateAccountSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAccountSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateAccountSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateAccountSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateAccountSettingsCommand)(output, context);
      }
    };
    exports.UpdateAccountSettingsCommand = UpdateAccountSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateAppInstanceCommand.js
var require_UpdateAppInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateAppInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAppInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateAppInstanceCommand = class _UpdateAppInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAppInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateAppInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAppInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateAppInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateAppInstanceCommand)(output, context);
      }
    };
    exports.UpdateAppInstanceCommand = UpdateAppInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateAppInstanceUserCommand.js
var require_UpdateAppInstanceUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateAppInstanceUserCommand = class _UpdateAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateAppInstanceUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateAppInstanceUserCommand)(output, context);
      }
    };
    exports.UpdateAppInstanceUserCommand = UpdateAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateBotCommand.js
var require_UpdateBotCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateBotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateBotCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateBotCommand = class _UpdateBotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateBotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateBotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.UpdateBotResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateBotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateBotCommand)(output, context);
      }
    };
    exports.UpdateBotCommand = UpdateBotCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateChannelCommand.js
var require_UpdateChannelCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateChannelCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateChannelCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateChannelCommand = class _UpdateChannelCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateChannelCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateChannelCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateChannelRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateChannelCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateChannelCommand)(output, context);
      }
    };
    exports.UpdateChannelCommand = UpdateChannelCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateChannelMessageCommand.js
var require_UpdateChannelMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateChannelMessageCommand = class _UpdateChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateChannelMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateChannelMessageCommand)(output, context);
      }
    };
    exports.UpdateChannelMessageCommand = UpdateChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateChannelReadMarkerCommand.js
var require_UpdateChannelReadMarkerCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateChannelReadMarkerCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateChannelReadMarkerCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateChannelReadMarkerCommand = class _UpdateChannelReadMarkerCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateChannelReadMarkerCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateChannelReadMarkerCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateChannelReadMarkerCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateChannelReadMarkerCommand)(output, context);
      }
    };
    exports.UpdateChannelReadMarkerCommand = UpdateChannelReadMarkerCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateGlobalSettingsCommand.js
var require_UpdateGlobalSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateGlobalSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateGlobalSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateGlobalSettingsCommand = class _UpdateGlobalSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateGlobalSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateGlobalSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateGlobalSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateGlobalSettingsCommand)(output, context);
      }
    };
    exports.UpdateGlobalSettingsCommand = UpdateGlobalSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdatePhoneNumberCommand.js
var require_UpdatePhoneNumberCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdatePhoneNumberCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdatePhoneNumberCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdatePhoneNumberCommand = class _UpdatePhoneNumberCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdatePhoneNumberCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdatePhoneNumberCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdatePhoneNumberRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdatePhoneNumberResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdatePhoneNumberCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdatePhoneNumberCommand)(output, context);
      }
    };
    exports.UpdatePhoneNumberCommand = UpdatePhoneNumberCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdatePhoneNumberSettingsCommand.js
var require_UpdatePhoneNumberSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdatePhoneNumberSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdatePhoneNumberSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdatePhoneNumberSettingsCommand = class _UpdatePhoneNumberSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdatePhoneNumberSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdatePhoneNumberSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdatePhoneNumberSettingsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdatePhoneNumberSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdatePhoneNumberSettingsCommand)(output, context);
      }
    };
    exports.UpdatePhoneNumberSettingsCommand = UpdatePhoneNumberSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateProxySessionCommand.js
var require_UpdateProxySessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateProxySessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateProxySessionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateProxySessionCommand = class _UpdateProxySessionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateProxySessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateProxySessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.UpdateProxySessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateProxySessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateProxySessionCommand)(output, context);
      }
    };
    exports.UpdateProxySessionCommand = UpdateProxySessionCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateRoomCommand.js
var require_UpdateRoomCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateRoomCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateRoomCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateRoomCommand = class _UpdateRoomCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateRoomCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateRoomCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateRoomRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateRoomResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateRoomCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateRoomCommand)(output, context);
      }
    };
    exports.UpdateRoomCommand = UpdateRoomCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateRoomMembershipCommand.js
var require_UpdateRoomMembershipCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateRoomMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateRoomMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateRoomMembershipCommand = class _UpdateRoomMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateRoomMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateRoomMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.UpdateRoomMembershipResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateRoomMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateRoomMembershipCommand)(output, context);
      }
    };
    exports.UpdateRoomMembershipCommand = UpdateRoomMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateSipMediaApplicationCallCommand.js
var require_UpdateSipMediaApplicationCallCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateSipMediaApplicationCallCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateSipMediaApplicationCallCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateSipMediaApplicationCallCommand = class _UpdateSipMediaApplicationCallCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateSipMediaApplicationCallCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateSipMediaApplicationCallCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateSipMediaApplicationCallRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateSipMediaApplicationCallCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateSipMediaApplicationCallCommand)(output, context);
      }
    };
    exports.UpdateSipMediaApplicationCallCommand = UpdateSipMediaApplicationCallCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateSipMediaApplicationCommand.js
var require_UpdateSipMediaApplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateSipMediaApplicationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateSipMediaApplicationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateSipMediaApplicationCommand = class _UpdateSipMediaApplicationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateSipMediaApplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateSipMediaApplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateSipMediaApplicationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateSipMediaApplicationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateSipMediaApplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateSipMediaApplicationCommand)(output, context);
      }
    };
    exports.UpdateSipMediaApplicationCommand = UpdateSipMediaApplicationCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateSipRuleCommand.js
var require_UpdateSipRuleCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateSipRuleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateSipRuleCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateSipRuleCommand = class _UpdateSipRuleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateSipRuleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateSipRuleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateSipRuleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateSipRuleCommand)(output, context);
      }
    };
    exports.UpdateSipRuleCommand = UpdateSipRuleCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateUserCommand.js
var require_UpdateUserCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateUserCommand = class _UpdateUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UpdateUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UpdateUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateUserCommand)(output, context);
      }
    };
    exports.UpdateUserCommand = UpdateUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateUserSettingsCommand.js
var require_UpdateUserSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateUserSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateUserSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateUserSettingsCommand = class _UpdateUserSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateUserSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateUserSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateUserSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateUserSettingsCommand)(output, context);
      }
    };
    exports.UpdateUserSettingsCommand = UpdateUserSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateVoiceConnectorCommand.js
var require_UpdateVoiceConnectorCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateVoiceConnectorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateVoiceConnectorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateVoiceConnectorCommand = class _UpdateVoiceConnectorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateVoiceConnectorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateVoiceConnectorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateVoiceConnectorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateVoiceConnectorCommand)(output, context);
      }
    };
    exports.UpdateVoiceConnectorCommand = UpdateVoiceConnectorCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateVoiceConnectorGroupCommand.js
var require_UpdateVoiceConnectorGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/UpdateVoiceConnectorGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateVoiceConnectorGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateVoiceConnectorGroupCommand = class _UpdateVoiceConnectorGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateVoiceConnectorGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "UpdateVoiceConnectorGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateVoiceConnectorGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateVoiceConnectorGroupCommand)(output, context);
      }
    };
    exports.UpdateVoiceConnectorGroupCommand = UpdateVoiceConnectorGroupCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/ValidateE911AddressCommand.js
var require_ValidateE911AddressCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/ValidateE911AddressCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidateE911AddressCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_1();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ValidateE911AddressCommand = class _ValidateE911AddressCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ValidateE911AddressCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeClient";
        const commandName = "ValidateE911AddressCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ValidateE911AddressRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ValidateE911AddressResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ValidateE911AddressCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ValidateE911AddressCommand)(output, context);
      }
    };
    exports.ValidateE911AddressCommand = ValidateE911AddressCommand;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/Chime.js
var require_Chime = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/Chime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Chime = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var ChimeClient_1 = require_ChimeClient();
    var AssociatePhoneNumbersWithVoiceConnectorCommand_1 = require_AssociatePhoneNumbersWithVoiceConnectorCommand();
    var AssociatePhoneNumbersWithVoiceConnectorGroupCommand_1 = require_AssociatePhoneNumbersWithVoiceConnectorGroupCommand();
    var AssociatePhoneNumberWithUserCommand_1 = require_AssociatePhoneNumberWithUserCommand();
    var AssociateSigninDelegateGroupsWithAccountCommand_1 = require_AssociateSigninDelegateGroupsWithAccountCommand();
    var BatchCreateAttendeeCommand_1 = require_BatchCreateAttendeeCommand();
    var BatchCreateChannelMembershipCommand_1 = require_BatchCreateChannelMembershipCommand();
    var BatchCreateRoomMembershipCommand_1 = require_BatchCreateRoomMembershipCommand();
    var BatchDeletePhoneNumberCommand_1 = require_BatchDeletePhoneNumberCommand();
    var BatchSuspendUserCommand_1 = require_BatchSuspendUserCommand();
    var BatchUnsuspendUserCommand_1 = require_BatchUnsuspendUserCommand();
    var BatchUpdatePhoneNumberCommand_1 = require_BatchUpdatePhoneNumberCommand();
    var BatchUpdateUserCommand_1 = require_BatchUpdateUserCommand();
    var CreateAccountCommand_1 = require_CreateAccountCommand();
    var CreateAppInstanceAdminCommand_1 = require_CreateAppInstanceAdminCommand();
    var CreateAppInstanceCommand_1 = require_CreateAppInstanceCommand();
    var CreateAppInstanceUserCommand_1 = require_CreateAppInstanceUserCommand();
    var CreateAttendeeCommand_1 = require_CreateAttendeeCommand();
    var CreateBotCommand_1 = require_CreateBotCommand();
    var CreateChannelBanCommand_1 = require_CreateChannelBanCommand();
    var CreateChannelCommand_1 = require_CreateChannelCommand();
    var CreateChannelMembershipCommand_1 = require_CreateChannelMembershipCommand();
    var CreateChannelModeratorCommand_1 = require_CreateChannelModeratorCommand();
    var CreateMediaCapturePipelineCommand_1 = require_CreateMediaCapturePipelineCommand();
    var CreateMeetingCommand_1 = require_CreateMeetingCommand();
    var CreateMeetingDialOutCommand_1 = require_CreateMeetingDialOutCommand();
    var CreateMeetingWithAttendeesCommand_1 = require_CreateMeetingWithAttendeesCommand();
    var CreatePhoneNumberOrderCommand_1 = require_CreatePhoneNumberOrderCommand();
    var CreateProxySessionCommand_1 = require_CreateProxySessionCommand();
    var CreateRoomCommand_1 = require_CreateRoomCommand();
    var CreateRoomMembershipCommand_1 = require_CreateRoomMembershipCommand();
    var CreateSipMediaApplicationCallCommand_1 = require_CreateSipMediaApplicationCallCommand();
    var CreateSipMediaApplicationCommand_1 = require_CreateSipMediaApplicationCommand();
    var CreateSipRuleCommand_1 = require_CreateSipRuleCommand();
    var CreateUserCommand_1 = require_CreateUserCommand();
    var CreateVoiceConnectorCommand_1 = require_CreateVoiceConnectorCommand();
    var CreateVoiceConnectorGroupCommand_1 = require_CreateVoiceConnectorGroupCommand();
    var DeleteAccountCommand_1 = require_DeleteAccountCommand();
    var DeleteAppInstanceAdminCommand_1 = require_DeleteAppInstanceAdminCommand();
    var DeleteAppInstanceCommand_1 = require_DeleteAppInstanceCommand();
    var DeleteAppInstanceStreamingConfigurationsCommand_1 = require_DeleteAppInstanceStreamingConfigurationsCommand();
    var DeleteAppInstanceUserCommand_1 = require_DeleteAppInstanceUserCommand();
    var DeleteAttendeeCommand_1 = require_DeleteAttendeeCommand();
    var DeleteChannelBanCommand_1 = require_DeleteChannelBanCommand();
    var DeleteChannelCommand_1 = require_DeleteChannelCommand();
    var DeleteChannelMembershipCommand_1 = require_DeleteChannelMembershipCommand();
    var DeleteChannelMessageCommand_1 = require_DeleteChannelMessageCommand();
    var DeleteChannelModeratorCommand_1 = require_DeleteChannelModeratorCommand();
    var DeleteEventsConfigurationCommand_1 = require_DeleteEventsConfigurationCommand();
    var DeleteMediaCapturePipelineCommand_1 = require_DeleteMediaCapturePipelineCommand();
    var DeleteMeetingCommand_1 = require_DeleteMeetingCommand();
    var DeletePhoneNumberCommand_1 = require_DeletePhoneNumberCommand();
    var DeleteProxySessionCommand_1 = require_DeleteProxySessionCommand();
    var DeleteRoomCommand_1 = require_DeleteRoomCommand();
    var DeleteRoomMembershipCommand_1 = require_DeleteRoomMembershipCommand();
    var DeleteSipMediaApplicationCommand_1 = require_DeleteSipMediaApplicationCommand();
    var DeleteSipRuleCommand_1 = require_DeleteSipRuleCommand();
    var DeleteVoiceConnectorCommand_1 = require_DeleteVoiceConnectorCommand();
    var DeleteVoiceConnectorEmergencyCallingConfigurationCommand_1 = require_DeleteVoiceConnectorEmergencyCallingConfigurationCommand();
    var DeleteVoiceConnectorGroupCommand_1 = require_DeleteVoiceConnectorGroupCommand();
    var DeleteVoiceConnectorOriginationCommand_1 = require_DeleteVoiceConnectorOriginationCommand();
    var DeleteVoiceConnectorProxyCommand_1 = require_DeleteVoiceConnectorProxyCommand();
    var DeleteVoiceConnectorStreamingConfigurationCommand_1 = require_DeleteVoiceConnectorStreamingConfigurationCommand();
    var DeleteVoiceConnectorTerminationCommand_1 = require_DeleteVoiceConnectorTerminationCommand();
    var DeleteVoiceConnectorTerminationCredentialsCommand_1 = require_DeleteVoiceConnectorTerminationCredentialsCommand();
    var DescribeAppInstanceAdminCommand_1 = require_DescribeAppInstanceAdminCommand();
    var DescribeAppInstanceCommand_1 = require_DescribeAppInstanceCommand();
    var DescribeAppInstanceUserCommand_1 = require_DescribeAppInstanceUserCommand();
    var DescribeChannelBanCommand_1 = require_DescribeChannelBanCommand();
    var DescribeChannelCommand_1 = require_DescribeChannelCommand();
    var DescribeChannelMembershipCommand_1 = require_DescribeChannelMembershipCommand();
    var DescribeChannelMembershipForAppInstanceUserCommand_1 = require_DescribeChannelMembershipForAppInstanceUserCommand();
    var DescribeChannelModeratedByAppInstanceUserCommand_1 = require_DescribeChannelModeratedByAppInstanceUserCommand();
    var DescribeChannelModeratorCommand_1 = require_DescribeChannelModeratorCommand();
    var DisassociatePhoneNumberFromUserCommand_1 = require_DisassociatePhoneNumberFromUserCommand();
    var DisassociatePhoneNumbersFromVoiceConnectorCommand_1 = require_DisassociatePhoneNumbersFromVoiceConnectorCommand();
    var DisassociatePhoneNumbersFromVoiceConnectorGroupCommand_1 = require_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand();
    var DisassociateSigninDelegateGroupsFromAccountCommand_1 = require_DisassociateSigninDelegateGroupsFromAccountCommand();
    var GetAccountCommand_1 = require_GetAccountCommand();
    var GetAccountSettingsCommand_1 = require_GetAccountSettingsCommand();
    var GetAppInstanceRetentionSettingsCommand_1 = require_GetAppInstanceRetentionSettingsCommand();
    var GetAppInstanceStreamingConfigurationsCommand_1 = require_GetAppInstanceStreamingConfigurationsCommand();
    var GetAttendeeCommand_1 = require_GetAttendeeCommand();
    var GetBotCommand_1 = require_GetBotCommand();
    var GetChannelMessageCommand_1 = require_GetChannelMessageCommand();
    var GetEventsConfigurationCommand_1 = require_GetEventsConfigurationCommand();
    var GetGlobalSettingsCommand_1 = require_GetGlobalSettingsCommand();
    var GetMediaCapturePipelineCommand_1 = require_GetMediaCapturePipelineCommand();
    var GetMeetingCommand_1 = require_GetMeetingCommand();
    var GetMessagingSessionEndpointCommand_1 = require_GetMessagingSessionEndpointCommand();
    var GetPhoneNumberCommand_1 = require_GetPhoneNumberCommand();
    var GetPhoneNumberOrderCommand_1 = require_GetPhoneNumberOrderCommand();
    var GetPhoneNumberSettingsCommand_1 = require_GetPhoneNumberSettingsCommand();
    var GetProxySessionCommand_1 = require_GetProxySessionCommand();
    var GetRetentionSettingsCommand_1 = require_GetRetentionSettingsCommand();
    var GetRoomCommand_1 = require_GetRoomCommand();
    var GetSipMediaApplicationCommand_1 = require_GetSipMediaApplicationCommand();
    var GetSipMediaApplicationLoggingConfigurationCommand_1 = require_GetSipMediaApplicationLoggingConfigurationCommand();
    var GetSipRuleCommand_1 = require_GetSipRuleCommand();
    var GetUserCommand_1 = require_GetUserCommand();
    var GetUserSettingsCommand_1 = require_GetUserSettingsCommand();
    var GetVoiceConnectorCommand_1 = require_GetVoiceConnectorCommand();
    var GetVoiceConnectorEmergencyCallingConfigurationCommand_1 = require_GetVoiceConnectorEmergencyCallingConfigurationCommand();
    var GetVoiceConnectorGroupCommand_1 = require_GetVoiceConnectorGroupCommand();
    var GetVoiceConnectorLoggingConfigurationCommand_1 = require_GetVoiceConnectorLoggingConfigurationCommand();
    var GetVoiceConnectorOriginationCommand_1 = require_GetVoiceConnectorOriginationCommand();
    var GetVoiceConnectorProxyCommand_1 = require_GetVoiceConnectorProxyCommand();
    var GetVoiceConnectorStreamingConfigurationCommand_1 = require_GetVoiceConnectorStreamingConfigurationCommand();
    var GetVoiceConnectorTerminationCommand_1 = require_GetVoiceConnectorTerminationCommand();
    var GetVoiceConnectorTerminationHealthCommand_1 = require_GetVoiceConnectorTerminationHealthCommand();
    var InviteUsersCommand_1 = require_InviteUsersCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand2();
    var ListAppInstanceAdminsCommand_1 = require_ListAppInstanceAdminsCommand();
    var ListAppInstancesCommand_1 = require_ListAppInstancesCommand();
    var ListAppInstanceUsersCommand_1 = require_ListAppInstanceUsersCommand();
    var ListAttendeesCommand_1 = require_ListAttendeesCommand();
    var ListAttendeeTagsCommand_1 = require_ListAttendeeTagsCommand();
    var ListBotsCommand_1 = require_ListBotsCommand();
    var ListChannelBansCommand_1 = require_ListChannelBansCommand();
    var ListChannelMembershipsCommand_1 = require_ListChannelMembershipsCommand();
    var ListChannelMembershipsForAppInstanceUserCommand_1 = require_ListChannelMembershipsForAppInstanceUserCommand();
    var ListChannelMessagesCommand_1 = require_ListChannelMessagesCommand();
    var ListChannelModeratorsCommand_1 = require_ListChannelModeratorsCommand();
    var ListChannelsCommand_1 = require_ListChannelsCommand();
    var ListChannelsModeratedByAppInstanceUserCommand_1 = require_ListChannelsModeratedByAppInstanceUserCommand();
    var ListMediaCapturePipelinesCommand_1 = require_ListMediaCapturePipelinesCommand();
    var ListMeetingsCommand_1 = require_ListMeetingsCommand();
    var ListMeetingTagsCommand_1 = require_ListMeetingTagsCommand();
    var ListPhoneNumberOrdersCommand_1 = require_ListPhoneNumberOrdersCommand();
    var ListPhoneNumbersCommand_1 = require_ListPhoneNumbersCommand();
    var ListProxySessionsCommand_1 = require_ListProxySessionsCommand();
    var ListRoomMembershipsCommand_1 = require_ListRoomMembershipsCommand();
    var ListRoomsCommand_1 = require_ListRoomsCommand();
    var ListSipMediaApplicationsCommand_1 = require_ListSipMediaApplicationsCommand();
    var ListSipRulesCommand_1 = require_ListSipRulesCommand();
    var ListSupportedPhoneNumberCountriesCommand_1 = require_ListSupportedPhoneNumberCountriesCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand();
    var ListUsersCommand_1 = require_ListUsersCommand();
    var ListVoiceConnectorGroupsCommand_1 = require_ListVoiceConnectorGroupsCommand();
    var ListVoiceConnectorsCommand_1 = require_ListVoiceConnectorsCommand();
    var ListVoiceConnectorTerminationCredentialsCommand_1 = require_ListVoiceConnectorTerminationCredentialsCommand();
    var LogoutUserCommand_1 = require_LogoutUserCommand();
    var PutAppInstanceRetentionSettingsCommand_1 = require_PutAppInstanceRetentionSettingsCommand();
    var PutAppInstanceStreamingConfigurationsCommand_1 = require_PutAppInstanceStreamingConfigurationsCommand();
    var PutEventsConfigurationCommand_1 = require_PutEventsConfigurationCommand();
    var PutRetentionSettingsCommand_1 = require_PutRetentionSettingsCommand();
    var PutSipMediaApplicationLoggingConfigurationCommand_1 = require_PutSipMediaApplicationLoggingConfigurationCommand();
    var PutVoiceConnectorEmergencyCallingConfigurationCommand_1 = require_PutVoiceConnectorEmergencyCallingConfigurationCommand();
    var PutVoiceConnectorLoggingConfigurationCommand_1 = require_PutVoiceConnectorLoggingConfigurationCommand();
    var PutVoiceConnectorOriginationCommand_1 = require_PutVoiceConnectorOriginationCommand();
    var PutVoiceConnectorProxyCommand_1 = require_PutVoiceConnectorProxyCommand();
    var PutVoiceConnectorStreamingConfigurationCommand_1 = require_PutVoiceConnectorStreamingConfigurationCommand();
    var PutVoiceConnectorTerminationCommand_1 = require_PutVoiceConnectorTerminationCommand();
    var PutVoiceConnectorTerminationCredentialsCommand_1 = require_PutVoiceConnectorTerminationCredentialsCommand();
    var RedactChannelMessageCommand_1 = require_RedactChannelMessageCommand();
    var RedactConversationMessageCommand_1 = require_RedactConversationMessageCommand();
    var RedactRoomMessageCommand_1 = require_RedactRoomMessageCommand();
    var RegenerateSecurityTokenCommand_1 = require_RegenerateSecurityTokenCommand();
    var ResetPersonalPINCommand_1 = require_ResetPersonalPINCommand();
    var RestorePhoneNumberCommand_1 = require_RestorePhoneNumberCommand();
    var SearchAvailablePhoneNumbersCommand_1 = require_SearchAvailablePhoneNumbersCommand();
    var SendChannelMessageCommand_1 = require_SendChannelMessageCommand();
    var StartMeetingTranscriptionCommand_1 = require_StartMeetingTranscriptionCommand();
    var StopMeetingTranscriptionCommand_1 = require_StopMeetingTranscriptionCommand();
    var TagAttendeeCommand_1 = require_TagAttendeeCommand();
    var TagMeetingCommand_1 = require_TagMeetingCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var UntagAttendeeCommand_1 = require_UntagAttendeeCommand();
    var UntagMeetingCommand_1 = require_UntagMeetingCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateAccountCommand_1 = require_UpdateAccountCommand();
    var UpdateAccountSettingsCommand_1 = require_UpdateAccountSettingsCommand();
    var UpdateAppInstanceCommand_1 = require_UpdateAppInstanceCommand();
    var UpdateAppInstanceUserCommand_1 = require_UpdateAppInstanceUserCommand();
    var UpdateBotCommand_1 = require_UpdateBotCommand();
    var UpdateChannelCommand_1 = require_UpdateChannelCommand();
    var UpdateChannelMessageCommand_1 = require_UpdateChannelMessageCommand();
    var UpdateChannelReadMarkerCommand_1 = require_UpdateChannelReadMarkerCommand();
    var UpdateGlobalSettingsCommand_1 = require_UpdateGlobalSettingsCommand();
    var UpdatePhoneNumberCommand_1 = require_UpdatePhoneNumberCommand();
    var UpdatePhoneNumberSettingsCommand_1 = require_UpdatePhoneNumberSettingsCommand();
    var UpdateProxySessionCommand_1 = require_UpdateProxySessionCommand();
    var UpdateRoomCommand_1 = require_UpdateRoomCommand();
    var UpdateRoomMembershipCommand_1 = require_UpdateRoomMembershipCommand();
    var UpdateSipMediaApplicationCallCommand_1 = require_UpdateSipMediaApplicationCallCommand();
    var UpdateSipMediaApplicationCommand_1 = require_UpdateSipMediaApplicationCommand();
    var UpdateSipRuleCommand_1 = require_UpdateSipRuleCommand();
    var UpdateUserCommand_1 = require_UpdateUserCommand();
    var UpdateUserSettingsCommand_1 = require_UpdateUserSettingsCommand();
    var UpdateVoiceConnectorCommand_1 = require_UpdateVoiceConnectorCommand();
    var UpdateVoiceConnectorGroupCommand_1 = require_UpdateVoiceConnectorGroupCommand();
    var ValidateE911AddressCommand_1 = require_ValidateE911AddressCommand();
    var commands = {
      AssociatePhoneNumbersWithVoiceConnectorCommand: AssociatePhoneNumbersWithVoiceConnectorCommand_1.AssociatePhoneNumbersWithVoiceConnectorCommand,
      AssociatePhoneNumbersWithVoiceConnectorGroupCommand: AssociatePhoneNumbersWithVoiceConnectorGroupCommand_1.AssociatePhoneNumbersWithVoiceConnectorGroupCommand,
      AssociatePhoneNumberWithUserCommand: AssociatePhoneNumberWithUserCommand_1.AssociatePhoneNumberWithUserCommand,
      AssociateSigninDelegateGroupsWithAccountCommand: AssociateSigninDelegateGroupsWithAccountCommand_1.AssociateSigninDelegateGroupsWithAccountCommand,
      BatchCreateAttendeeCommand: BatchCreateAttendeeCommand_1.BatchCreateAttendeeCommand,
      BatchCreateChannelMembershipCommand: BatchCreateChannelMembershipCommand_1.BatchCreateChannelMembershipCommand,
      BatchCreateRoomMembershipCommand: BatchCreateRoomMembershipCommand_1.BatchCreateRoomMembershipCommand,
      BatchDeletePhoneNumberCommand: BatchDeletePhoneNumberCommand_1.BatchDeletePhoneNumberCommand,
      BatchSuspendUserCommand: BatchSuspendUserCommand_1.BatchSuspendUserCommand,
      BatchUnsuspendUserCommand: BatchUnsuspendUserCommand_1.BatchUnsuspendUserCommand,
      BatchUpdatePhoneNumberCommand: BatchUpdatePhoneNumberCommand_1.BatchUpdatePhoneNumberCommand,
      BatchUpdateUserCommand: BatchUpdateUserCommand_1.BatchUpdateUserCommand,
      CreateAccountCommand: CreateAccountCommand_1.CreateAccountCommand,
      CreateAppInstanceCommand: CreateAppInstanceCommand_1.CreateAppInstanceCommand,
      CreateAppInstanceAdminCommand: CreateAppInstanceAdminCommand_1.CreateAppInstanceAdminCommand,
      CreateAppInstanceUserCommand: CreateAppInstanceUserCommand_1.CreateAppInstanceUserCommand,
      CreateAttendeeCommand: CreateAttendeeCommand_1.CreateAttendeeCommand,
      CreateBotCommand: CreateBotCommand_1.CreateBotCommand,
      CreateChannelCommand: CreateChannelCommand_1.CreateChannelCommand,
      CreateChannelBanCommand: CreateChannelBanCommand_1.CreateChannelBanCommand,
      CreateChannelMembershipCommand: CreateChannelMembershipCommand_1.CreateChannelMembershipCommand,
      CreateChannelModeratorCommand: CreateChannelModeratorCommand_1.CreateChannelModeratorCommand,
      CreateMediaCapturePipelineCommand: CreateMediaCapturePipelineCommand_1.CreateMediaCapturePipelineCommand,
      CreateMeetingCommand: CreateMeetingCommand_1.CreateMeetingCommand,
      CreateMeetingDialOutCommand: CreateMeetingDialOutCommand_1.CreateMeetingDialOutCommand,
      CreateMeetingWithAttendeesCommand: CreateMeetingWithAttendeesCommand_1.CreateMeetingWithAttendeesCommand,
      CreatePhoneNumberOrderCommand: CreatePhoneNumberOrderCommand_1.CreatePhoneNumberOrderCommand,
      CreateProxySessionCommand: CreateProxySessionCommand_1.CreateProxySessionCommand,
      CreateRoomCommand: CreateRoomCommand_1.CreateRoomCommand,
      CreateRoomMembershipCommand: CreateRoomMembershipCommand_1.CreateRoomMembershipCommand,
      CreateSipMediaApplicationCommand: CreateSipMediaApplicationCommand_1.CreateSipMediaApplicationCommand,
      CreateSipMediaApplicationCallCommand: CreateSipMediaApplicationCallCommand_1.CreateSipMediaApplicationCallCommand,
      CreateSipRuleCommand: CreateSipRuleCommand_1.CreateSipRuleCommand,
      CreateUserCommand: CreateUserCommand_1.CreateUserCommand,
      CreateVoiceConnectorCommand: CreateVoiceConnectorCommand_1.CreateVoiceConnectorCommand,
      CreateVoiceConnectorGroupCommand: CreateVoiceConnectorGroupCommand_1.CreateVoiceConnectorGroupCommand,
      DeleteAccountCommand: DeleteAccountCommand_1.DeleteAccountCommand,
      DeleteAppInstanceCommand: DeleteAppInstanceCommand_1.DeleteAppInstanceCommand,
      DeleteAppInstanceAdminCommand: DeleteAppInstanceAdminCommand_1.DeleteAppInstanceAdminCommand,
      DeleteAppInstanceStreamingConfigurationsCommand: DeleteAppInstanceStreamingConfigurationsCommand_1.DeleteAppInstanceStreamingConfigurationsCommand,
      DeleteAppInstanceUserCommand: DeleteAppInstanceUserCommand_1.DeleteAppInstanceUserCommand,
      DeleteAttendeeCommand: DeleteAttendeeCommand_1.DeleteAttendeeCommand,
      DeleteChannelCommand: DeleteChannelCommand_1.DeleteChannelCommand,
      DeleteChannelBanCommand: DeleteChannelBanCommand_1.DeleteChannelBanCommand,
      DeleteChannelMembershipCommand: DeleteChannelMembershipCommand_1.DeleteChannelMembershipCommand,
      DeleteChannelMessageCommand: DeleteChannelMessageCommand_1.DeleteChannelMessageCommand,
      DeleteChannelModeratorCommand: DeleteChannelModeratorCommand_1.DeleteChannelModeratorCommand,
      DeleteEventsConfigurationCommand: DeleteEventsConfigurationCommand_1.DeleteEventsConfigurationCommand,
      DeleteMediaCapturePipelineCommand: DeleteMediaCapturePipelineCommand_1.DeleteMediaCapturePipelineCommand,
      DeleteMeetingCommand: DeleteMeetingCommand_1.DeleteMeetingCommand,
      DeletePhoneNumberCommand: DeletePhoneNumberCommand_1.DeletePhoneNumberCommand,
      DeleteProxySessionCommand: DeleteProxySessionCommand_1.DeleteProxySessionCommand,
      DeleteRoomCommand: DeleteRoomCommand_1.DeleteRoomCommand,
      DeleteRoomMembershipCommand: DeleteRoomMembershipCommand_1.DeleteRoomMembershipCommand,
      DeleteSipMediaApplicationCommand: DeleteSipMediaApplicationCommand_1.DeleteSipMediaApplicationCommand,
      DeleteSipRuleCommand: DeleteSipRuleCommand_1.DeleteSipRuleCommand,
      DeleteVoiceConnectorCommand: DeleteVoiceConnectorCommand_1.DeleteVoiceConnectorCommand,
      DeleteVoiceConnectorEmergencyCallingConfigurationCommand: DeleteVoiceConnectorEmergencyCallingConfigurationCommand_1.DeleteVoiceConnectorEmergencyCallingConfigurationCommand,
      DeleteVoiceConnectorGroupCommand: DeleteVoiceConnectorGroupCommand_1.DeleteVoiceConnectorGroupCommand,
      DeleteVoiceConnectorOriginationCommand: DeleteVoiceConnectorOriginationCommand_1.DeleteVoiceConnectorOriginationCommand,
      DeleteVoiceConnectorProxyCommand: DeleteVoiceConnectorProxyCommand_1.DeleteVoiceConnectorProxyCommand,
      DeleteVoiceConnectorStreamingConfigurationCommand: DeleteVoiceConnectorStreamingConfigurationCommand_1.DeleteVoiceConnectorStreamingConfigurationCommand,
      DeleteVoiceConnectorTerminationCommand: DeleteVoiceConnectorTerminationCommand_1.DeleteVoiceConnectorTerminationCommand,
      DeleteVoiceConnectorTerminationCredentialsCommand: DeleteVoiceConnectorTerminationCredentialsCommand_1.DeleteVoiceConnectorTerminationCredentialsCommand,
      DescribeAppInstanceCommand: DescribeAppInstanceCommand_1.DescribeAppInstanceCommand,
      DescribeAppInstanceAdminCommand: DescribeAppInstanceAdminCommand_1.DescribeAppInstanceAdminCommand,
      DescribeAppInstanceUserCommand: DescribeAppInstanceUserCommand_1.DescribeAppInstanceUserCommand,
      DescribeChannelCommand: DescribeChannelCommand_1.DescribeChannelCommand,
      DescribeChannelBanCommand: DescribeChannelBanCommand_1.DescribeChannelBanCommand,
      DescribeChannelMembershipCommand: DescribeChannelMembershipCommand_1.DescribeChannelMembershipCommand,
      DescribeChannelMembershipForAppInstanceUserCommand: DescribeChannelMembershipForAppInstanceUserCommand_1.DescribeChannelMembershipForAppInstanceUserCommand,
      DescribeChannelModeratedByAppInstanceUserCommand: DescribeChannelModeratedByAppInstanceUserCommand_1.DescribeChannelModeratedByAppInstanceUserCommand,
      DescribeChannelModeratorCommand: DescribeChannelModeratorCommand_1.DescribeChannelModeratorCommand,
      DisassociatePhoneNumberFromUserCommand: DisassociatePhoneNumberFromUserCommand_1.DisassociatePhoneNumberFromUserCommand,
      DisassociatePhoneNumbersFromVoiceConnectorCommand: DisassociatePhoneNumbersFromVoiceConnectorCommand_1.DisassociatePhoneNumbersFromVoiceConnectorCommand,
      DisassociatePhoneNumbersFromVoiceConnectorGroupCommand: DisassociatePhoneNumbersFromVoiceConnectorGroupCommand_1.DisassociatePhoneNumbersFromVoiceConnectorGroupCommand,
      DisassociateSigninDelegateGroupsFromAccountCommand: DisassociateSigninDelegateGroupsFromAccountCommand_1.DisassociateSigninDelegateGroupsFromAccountCommand,
      GetAccountCommand: GetAccountCommand_1.GetAccountCommand,
      GetAccountSettingsCommand: GetAccountSettingsCommand_1.GetAccountSettingsCommand,
      GetAppInstanceRetentionSettingsCommand: GetAppInstanceRetentionSettingsCommand_1.GetAppInstanceRetentionSettingsCommand,
      GetAppInstanceStreamingConfigurationsCommand: GetAppInstanceStreamingConfigurationsCommand_1.GetAppInstanceStreamingConfigurationsCommand,
      GetAttendeeCommand: GetAttendeeCommand_1.GetAttendeeCommand,
      GetBotCommand: GetBotCommand_1.GetBotCommand,
      GetChannelMessageCommand: GetChannelMessageCommand_1.GetChannelMessageCommand,
      GetEventsConfigurationCommand: GetEventsConfigurationCommand_1.GetEventsConfigurationCommand,
      GetGlobalSettingsCommand: GetGlobalSettingsCommand_1.GetGlobalSettingsCommand,
      GetMediaCapturePipelineCommand: GetMediaCapturePipelineCommand_1.GetMediaCapturePipelineCommand,
      GetMeetingCommand: GetMeetingCommand_1.GetMeetingCommand,
      GetMessagingSessionEndpointCommand: GetMessagingSessionEndpointCommand_1.GetMessagingSessionEndpointCommand,
      GetPhoneNumberCommand: GetPhoneNumberCommand_1.GetPhoneNumberCommand,
      GetPhoneNumberOrderCommand: GetPhoneNumberOrderCommand_1.GetPhoneNumberOrderCommand,
      GetPhoneNumberSettingsCommand: GetPhoneNumberSettingsCommand_1.GetPhoneNumberSettingsCommand,
      GetProxySessionCommand: GetProxySessionCommand_1.GetProxySessionCommand,
      GetRetentionSettingsCommand: GetRetentionSettingsCommand_1.GetRetentionSettingsCommand,
      GetRoomCommand: GetRoomCommand_1.GetRoomCommand,
      GetSipMediaApplicationCommand: GetSipMediaApplicationCommand_1.GetSipMediaApplicationCommand,
      GetSipMediaApplicationLoggingConfigurationCommand: GetSipMediaApplicationLoggingConfigurationCommand_1.GetSipMediaApplicationLoggingConfigurationCommand,
      GetSipRuleCommand: GetSipRuleCommand_1.GetSipRuleCommand,
      GetUserCommand: GetUserCommand_1.GetUserCommand,
      GetUserSettingsCommand: GetUserSettingsCommand_1.GetUserSettingsCommand,
      GetVoiceConnectorCommand: GetVoiceConnectorCommand_1.GetVoiceConnectorCommand,
      GetVoiceConnectorEmergencyCallingConfigurationCommand: GetVoiceConnectorEmergencyCallingConfigurationCommand_1.GetVoiceConnectorEmergencyCallingConfigurationCommand,
      GetVoiceConnectorGroupCommand: GetVoiceConnectorGroupCommand_1.GetVoiceConnectorGroupCommand,
      GetVoiceConnectorLoggingConfigurationCommand: GetVoiceConnectorLoggingConfigurationCommand_1.GetVoiceConnectorLoggingConfigurationCommand,
      GetVoiceConnectorOriginationCommand: GetVoiceConnectorOriginationCommand_1.GetVoiceConnectorOriginationCommand,
      GetVoiceConnectorProxyCommand: GetVoiceConnectorProxyCommand_1.GetVoiceConnectorProxyCommand,
      GetVoiceConnectorStreamingConfigurationCommand: GetVoiceConnectorStreamingConfigurationCommand_1.GetVoiceConnectorStreamingConfigurationCommand,
      GetVoiceConnectorTerminationCommand: GetVoiceConnectorTerminationCommand_1.GetVoiceConnectorTerminationCommand,
      GetVoiceConnectorTerminationHealthCommand: GetVoiceConnectorTerminationHealthCommand_1.GetVoiceConnectorTerminationHealthCommand,
      InviteUsersCommand: InviteUsersCommand_1.InviteUsersCommand,
      ListAccountsCommand: ListAccountsCommand_1.ListAccountsCommand,
      ListAppInstanceAdminsCommand: ListAppInstanceAdminsCommand_1.ListAppInstanceAdminsCommand,
      ListAppInstancesCommand: ListAppInstancesCommand_1.ListAppInstancesCommand,
      ListAppInstanceUsersCommand: ListAppInstanceUsersCommand_1.ListAppInstanceUsersCommand,
      ListAttendeesCommand: ListAttendeesCommand_1.ListAttendeesCommand,
      ListAttendeeTagsCommand: ListAttendeeTagsCommand_1.ListAttendeeTagsCommand,
      ListBotsCommand: ListBotsCommand_1.ListBotsCommand,
      ListChannelBansCommand: ListChannelBansCommand_1.ListChannelBansCommand,
      ListChannelMembershipsCommand: ListChannelMembershipsCommand_1.ListChannelMembershipsCommand,
      ListChannelMembershipsForAppInstanceUserCommand: ListChannelMembershipsForAppInstanceUserCommand_1.ListChannelMembershipsForAppInstanceUserCommand,
      ListChannelMessagesCommand: ListChannelMessagesCommand_1.ListChannelMessagesCommand,
      ListChannelModeratorsCommand: ListChannelModeratorsCommand_1.ListChannelModeratorsCommand,
      ListChannelsCommand: ListChannelsCommand_1.ListChannelsCommand,
      ListChannelsModeratedByAppInstanceUserCommand: ListChannelsModeratedByAppInstanceUserCommand_1.ListChannelsModeratedByAppInstanceUserCommand,
      ListMediaCapturePipelinesCommand: ListMediaCapturePipelinesCommand_1.ListMediaCapturePipelinesCommand,
      ListMeetingsCommand: ListMeetingsCommand_1.ListMeetingsCommand,
      ListMeetingTagsCommand: ListMeetingTagsCommand_1.ListMeetingTagsCommand,
      ListPhoneNumberOrdersCommand: ListPhoneNumberOrdersCommand_1.ListPhoneNumberOrdersCommand,
      ListPhoneNumbersCommand: ListPhoneNumbersCommand_1.ListPhoneNumbersCommand,
      ListProxySessionsCommand: ListProxySessionsCommand_1.ListProxySessionsCommand,
      ListRoomMembershipsCommand: ListRoomMembershipsCommand_1.ListRoomMembershipsCommand,
      ListRoomsCommand: ListRoomsCommand_1.ListRoomsCommand,
      ListSipMediaApplicationsCommand: ListSipMediaApplicationsCommand_1.ListSipMediaApplicationsCommand,
      ListSipRulesCommand: ListSipRulesCommand_1.ListSipRulesCommand,
      ListSupportedPhoneNumberCountriesCommand: ListSupportedPhoneNumberCountriesCommand_1.ListSupportedPhoneNumberCountriesCommand,
      ListTagsForResourceCommand: ListTagsForResourceCommand_1.ListTagsForResourceCommand,
      ListUsersCommand: ListUsersCommand_1.ListUsersCommand,
      ListVoiceConnectorGroupsCommand: ListVoiceConnectorGroupsCommand_1.ListVoiceConnectorGroupsCommand,
      ListVoiceConnectorsCommand: ListVoiceConnectorsCommand_1.ListVoiceConnectorsCommand,
      ListVoiceConnectorTerminationCredentialsCommand: ListVoiceConnectorTerminationCredentialsCommand_1.ListVoiceConnectorTerminationCredentialsCommand,
      LogoutUserCommand: LogoutUserCommand_1.LogoutUserCommand,
      PutAppInstanceRetentionSettingsCommand: PutAppInstanceRetentionSettingsCommand_1.PutAppInstanceRetentionSettingsCommand,
      PutAppInstanceStreamingConfigurationsCommand: PutAppInstanceStreamingConfigurationsCommand_1.PutAppInstanceStreamingConfigurationsCommand,
      PutEventsConfigurationCommand: PutEventsConfigurationCommand_1.PutEventsConfigurationCommand,
      PutRetentionSettingsCommand: PutRetentionSettingsCommand_1.PutRetentionSettingsCommand,
      PutSipMediaApplicationLoggingConfigurationCommand: PutSipMediaApplicationLoggingConfigurationCommand_1.PutSipMediaApplicationLoggingConfigurationCommand,
      PutVoiceConnectorEmergencyCallingConfigurationCommand: PutVoiceConnectorEmergencyCallingConfigurationCommand_1.PutVoiceConnectorEmergencyCallingConfigurationCommand,
      PutVoiceConnectorLoggingConfigurationCommand: PutVoiceConnectorLoggingConfigurationCommand_1.PutVoiceConnectorLoggingConfigurationCommand,
      PutVoiceConnectorOriginationCommand: PutVoiceConnectorOriginationCommand_1.PutVoiceConnectorOriginationCommand,
      PutVoiceConnectorProxyCommand: PutVoiceConnectorProxyCommand_1.PutVoiceConnectorProxyCommand,
      PutVoiceConnectorStreamingConfigurationCommand: PutVoiceConnectorStreamingConfigurationCommand_1.PutVoiceConnectorStreamingConfigurationCommand,
      PutVoiceConnectorTerminationCommand: PutVoiceConnectorTerminationCommand_1.PutVoiceConnectorTerminationCommand,
      PutVoiceConnectorTerminationCredentialsCommand: PutVoiceConnectorTerminationCredentialsCommand_1.PutVoiceConnectorTerminationCredentialsCommand,
      RedactChannelMessageCommand: RedactChannelMessageCommand_1.RedactChannelMessageCommand,
      RedactConversationMessageCommand: RedactConversationMessageCommand_1.RedactConversationMessageCommand,
      RedactRoomMessageCommand: RedactRoomMessageCommand_1.RedactRoomMessageCommand,
      RegenerateSecurityTokenCommand: RegenerateSecurityTokenCommand_1.RegenerateSecurityTokenCommand,
      ResetPersonalPINCommand: ResetPersonalPINCommand_1.ResetPersonalPINCommand,
      RestorePhoneNumberCommand: RestorePhoneNumberCommand_1.RestorePhoneNumberCommand,
      SearchAvailablePhoneNumbersCommand: SearchAvailablePhoneNumbersCommand_1.SearchAvailablePhoneNumbersCommand,
      SendChannelMessageCommand: SendChannelMessageCommand_1.SendChannelMessageCommand,
      StartMeetingTranscriptionCommand: StartMeetingTranscriptionCommand_1.StartMeetingTranscriptionCommand,
      StopMeetingTranscriptionCommand: StopMeetingTranscriptionCommand_1.StopMeetingTranscriptionCommand,
      TagAttendeeCommand: TagAttendeeCommand_1.TagAttendeeCommand,
      TagMeetingCommand: TagMeetingCommand_1.TagMeetingCommand,
      TagResourceCommand: TagResourceCommand_1.TagResourceCommand,
      UntagAttendeeCommand: UntagAttendeeCommand_1.UntagAttendeeCommand,
      UntagMeetingCommand: UntagMeetingCommand_1.UntagMeetingCommand,
      UntagResourceCommand: UntagResourceCommand_1.UntagResourceCommand,
      UpdateAccountCommand: UpdateAccountCommand_1.UpdateAccountCommand,
      UpdateAccountSettingsCommand: UpdateAccountSettingsCommand_1.UpdateAccountSettingsCommand,
      UpdateAppInstanceCommand: UpdateAppInstanceCommand_1.UpdateAppInstanceCommand,
      UpdateAppInstanceUserCommand: UpdateAppInstanceUserCommand_1.UpdateAppInstanceUserCommand,
      UpdateBotCommand: UpdateBotCommand_1.UpdateBotCommand,
      UpdateChannelCommand: UpdateChannelCommand_1.UpdateChannelCommand,
      UpdateChannelMessageCommand: UpdateChannelMessageCommand_1.UpdateChannelMessageCommand,
      UpdateChannelReadMarkerCommand: UpdateChannelReadMarkerCommand_1.UpdateChannelReadMarkerCommand,
      UpdateGlobalSettingsCommand: UpdateGlobalSettingsCommand_1.UpdateGlobalSettingsCommand,
      UpdatePhoneNumberCommand: UpdatePhoneNumberCommand_1.UpdatePhoneNumberCommand,
      UpdatePhoneNumberSettingsCommand: UpdatePhoneNumberSettingsCommand_1.UpdatePhoneNumberSettingsCommand,
      UpdateProxySessionCommand: UpdateProxySessionCommand_1.UpdateProxySessionCommand,
      UpdateRoomCommand: UpdateRoomCommand_1.UpdateRoomCommand,
      UpdateRoomMembershipCommand: UpdateRoomMembershipCommand_1.UpdateRoomMembershipCommand,
      UpdateSipMediaApplicationCommand: UpdateSipMediaApplicationCommand_1.UpdateSipMediaApplicationCommand,
      UpdateSipMediaApplicationCallCommand: UpdateSipMediaApplicationCallCommand_1.UpdateSipMediaApplicationCallCommand,
      UpdateSipRuleCommand: UpdateSipRuleCommand_1.UpdateSipRuleCommand,
      UpdateUserCommand: UpdateUserCommand_1.UpdateUserCommand,
      UpdateUserSettingsCommand: UpdateUserSettingsCommand_1.UpdateUserSettingsCommand,
      UpdateVoiceConnectorCommand: UpdateVoiceConnectorCommand_1.UpdateVoiceConnectorCommand,
      UpdateVoiceConnectorGroupCommand: UpdateVoiceConnectorGroupCommand_1.UpdateVoiceConnectorGroupCommand,
      ValidateE911AddressCommand: ValidateE911AddressCommand_1.ValidateE911AddressCommand
    };
    var Chime = class extends ChimeClient_1.ChimeClient {
    };
    exports.Chime = Chime;
    (0, smithy_client_1.createAggregatedClient)(commands, Chime);
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssociatePhoneNumberWithUserCommand(), exports);
    tslib_1.__exportStar(require_AssociatePhoneNumbersWithVoiceConnectorCommand(), exports);
    tslib_1.__exportStar(require_AssociatePhoneNumbersWithVoiceConnectorGroupCommand(), exports);
    tslib_1.__exportStar(require_AssociateSigninDelegateGroupsWithAccountCommand(), exports);
    tslib_1.__exportStar(require_BatchCreateAttendeeCommand(), exports);
    tslib_1.__exportStar(require_BatchCreateChannelMembershipCommand(), exports);
    tslib_1.__exportStar(require_BatchCreateRoomMembershipCommand(), exports);
    tslib_1.__exportStar(require_BatchDeletePhoneNumberCommand(), exports);
    tslib_1.__exportStar(require_BatchSuspendUserCommand(), exports);
    tslib_1.__exportStar(require_BatchUnsuspendUserCommand(), exports);
    tslib_1.__exportStar(require_BatchUpdatePhoneNumberCommand(), exports);
    tslib_1.__exportStar(require_BatchUpdateUserCommand(), exports);
    tslib_1.__exportStar(require_CreateAccountCommand(), exports);
    tslib_1.__exportStar(require_CreateAppInstanceAdminCommand(), exports);
    tslib_1.__exportStar(require_CreateAppInstanceCommand(), exports);
    tslib_1.__exportStar(require_CreateAppInstanceUserCommand(), exports);
    tslib_1.__exportStar(require_CreateAttendeeCommand(), exports);
    tslib_1.__exportStar(require_CreateBotCommand(), exports);
    tslib_1.__exportStar(require_CreateChannelBanCommand(), exports);
    tslib_1.__exportStar(require_CreateChannelCommand(), exports);
    tslib_1.__exportStar(require_CreateChannelMembershipCommand(), exports);
    tslib_1.__exportStar(require_CreateChannelModeratorCommand(), exports);
    tslib_1.__exportStar(require_CreateMediaCapturePipelineCommand(), exports);
    tslib_1.__exportStar(require_CreateMeetingCommand(), exports);
    tslib_1.__exportStar(require_CreateMeetingDialOutCommand(), exports);
    tslib_1.__exportStar(require_CreateMeetingWithAttendeesCommand(), exports);
    tslib_1.__exportStar(require_CreatePhoneNumberOrderCommand(), exports);
    tslib_1.__exportStar(require_CreateProxySessionCommand(), exports);
    tslib_1.__exportStar(require_CreateRoomCommand(), exports);
    tslib_1.__exportStar(require_CreateRoomMembershipCommand(), exports);
    tslib_1.__exportStar(require_CreateSipMediaApplicationCallCommand(), exports);
    tslib_1.__exportStar(require_CreateSipMediaApplicationCommand(), exports);
    tslib_1.__exportStar(require_CreateSipRuleCommand(), exports);
    tslib_1.__exportStar(require_CreateUserCommand(), exports);
    tslib_1.__exportStar(require_CreateVoiceConnectorCommand(), exports);
    tslib_1.__exportStar(require_CreateVoiceConnectorGroupCommand(), exports);
    tslib_1.__exportStar(require_DeleteAccountCommand(), exports);
    tslib_1.__exportStar(require_DeleteAppInstanceAdminCommand(), exports);
    tslib_1.__exportStar(require_DeleteAppInstanceCommand(), exports);
    tslib_1.__exportStar(require_DeleteAppInstanceStreamingConfigurationsCommand(), exports);
    tslib_1.__exportStar(require_DeleteAppInstanceUserCommand(), exports);
    tslib_1.__exportStar(require_DeleteAttendeeCommand(), exports);
    tslib_1.__exportStar(require_DeleteChannelBanCommand(), exports);
    tslib_1.__exportStar(require_DeleteChannelCommand(), exports);
    tslib_1.__exportStar(require_DeleteChannelMembershipCommand(), exports);
    tslib_1.__exportStar(require_DeleteChannelMessageCommand(), exports);
    tslib_1.__exportStar(require_DeleteChannelModeratorCommand(), exports);
    tslib_1.__exportStar(require_DeleteEventsConfigurationCommand(), exports);
    tslib_1.__exportStar(require_DeleteMediaCapturePipelineCommand(), exports);
    tslib_1.__exportStar(require_DeleteMeetingCommand(), exports);
    tslib_1.__exportStar(require_DeletePhoneNumberCommand(), exports);
    tslib_1.__exportStar(require_DeleteProxySessionCommand(), exports);
    tslib_1.__exportStar(require_DeleteRoomCommand(), exports);
    tslib_1.__exportStar(require_DeleteRoomMembershipCommand(), exports);
    tslib_1.__exportStar(require_DeleteSipMediaApplicationCommand(), exports);
    tslib_1.__exportStar(require_DeleteSipRuleCommand(), exports);
    tslib_1.__exportStar(require_DeleteVoiceConnectorCommand(), exports);
    tslib_1.__exportStar(require_DeleteVoiceConnectorEmergencyCallingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_DeleteVoiceConnectorGroupCommand(), exports);
    tslib_1.__exportStar(require_DeleteVoiceConnectorOriginationCommand(), exports);
    tslib_1.__exportStar(require_DeleteVoiceConnectorProxyCommand(), exports);
    tslib_1.__exportStar(require_DeleteVoiceConnectorStreamingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_DeleteVoiceConnectorTerminationCommand(), exports);
    tslib_1.__exportStar(require_DeleteVoiceConnectorTerminationCredentialsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAppInstanceAdminCommand(), exports);
    tslib_1.__exportStar(require_DescribeAppInstanceCommand(), exports);
    tslib_1.__exportStar(require_DescribeAppInstanceUserCommand(), exports);
    tslib_1.__exportStar(require_DescribeChannelBanCommand(), exports);
    tslib_1.__exportStar(require_DescribeChannelCommand(), exports);
    tslib_1.__exportStar(require_DescribeChannelMembershipCommand(), exports);
    tslib_1.__exportStar(require_DescribeChannelMembershipForAppInstanceUserCommand(), exports);
    tslib_1.__exportStar(require_DescribeChannelModeratedByAppInstanceUserCommand(), exports);
    tslib_1.__exportStar(require_DescribeChannelModeratorCommand(), exports);
    tslib_1.__exportStar(require_DisassociatePhoneNumberFromUserCommand(), exports);
    tslib_1.__exportStar(require_DisassociatePhoneNumbersFromVoiceConnectorCommand(), exports);
    tslib_1.__exportStar(require_DisassociatePhoneNumbersFromVoiceConnectorGroupCommand(), exports);
    tslib_1.__exportStar(require_DisassociateSigninDelegateGroupsFromAccountCommand(), exports);
    tslib_1.__exportStar(require_GetAccountCommand(), exports);
    tslib_1.__exportStar(require_GetAccountSettingsCommand(), exports);
    tslib_1.__exportStar(require_GetAppInstanceRetentionSettingsCommand(), exports);
    tslib_1.__exportStar(require_GetAppInstanceStreamingConfigurationsCommand(), exports);
    tslib_1.__exportStar(require_GetAttendeeCommand(), exports);
    tslib_1.__exportStar(require_GetBotCommand(), exports);
    tslib_1.__exportStar(require_GetChannelMessageCommand(), exports);
    tslib_1.__exportStar(require_GetEventsConfigurationCommand(), exports);
    tslib_1.__exportStar(require_GetGlobalSettingsCommand(), exports);
    tslib_1.__exportStar(require_GetMediaCapturePipelineCommand(), exports);
    tslib_1.__exportStar(require_GetMeetingCommand(), exports);
    tslib_1.__exportStar(require_GetMessagingSessionEndpointCommand(), exports);
    tslib_1.__exportStar(require_GetPhoneNumberCommand(), exports);
    tslib_1.__exportStar(require_GetPhoneNumberOrderCommand(), exports);
    tslib_1.__exportStar(require_GetPhoneNumberSettingsCommand(), exports);
    tslib_1.__exportStar(require_GetProxySessionCommand(), exports);
    tslib_1.__exportStar(require_GetRetentionSettingsCommand(), exports);
    tslib_1.__exportStar(require_GetRoomCommand(), exports);
    tslib_1.__exportStar(require_GetSipMediaApplicationCommand(), exports);
    tslib_1.__exportStar(require_GetSipMediaApplicationLoggingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_GetSipRuleCommand(), exports);
    tslib_1.__exportStar(require_GetUserCommand(), exports);
    tslib_1.__exportStar(require_GetUserSettingsCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorEmergencyCallingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorGroupCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorLoggingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorOriginationCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorProxyCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorStreamingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorTerminationCommand(), exports);
    tslib_1.__exportStar(require_GetVoiceConnectorTerminationHealthCommand(), exports);
    tslib_1.__exportStar(require_InviteUsersCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand2(), exports);
    tslib_1.__exportStar(require_ListAppInstanceAdminsCommand(), exports);
    tslib_1.__exportStar(require_ListAppInstanceUsersCommand(), exports);
    tslib_1.__exportStar(require_ListAppInstancesCommand(), exports);
    tslib_1.__exportStar(require_ListAttendeeTagsCommand(), exports);
    tslib_1.__exportStar(require_ListAttendeesCommand(), exports);
    tslib_1.__exportStar(require_ListBotsCommand(), exports);
    tslib_1.__exportStar(require_ListChannelBansCommand(), exports);
    tslib_1.__exportStar(require_ListChannelMembershipsCommand(), exports);
    tslib_1.__exportStar(require_ListChannelMembershipsForAppInstanceUserCommand(), exports);
    tslib_1.__exportStar(require_ListChannelMessagesCommand(), exports);
    tslib_1.__exportStar(require_ListChannelModeratorsCommand(), exports);
    tslib_1.__exportStar(require_ListChannelsCommand(), exports);
    tslib_1.__exportStar(require_ListChannelsModeratedByAppInstanceUserCommand(), exports);
    tslib_1.__exportStar(require_ListMediaCapturePipelinesCommand(), exports);
    tslib_1.__exportStar(require_ListMeetingTagsCommand(), exports);
    tslib_1.__exportStar(require_ListMeetingsCommand(), exports);
    tslib_1.__exportStar(require_ListPhoneNumberOrdersCommand(), exports);
    tslib_1.__exportStar(require_ListPhoneNumbersCommand(), exports);
    tslib_1.__exportStar(require_ListProxySessionsCommand(), exports);
    tslib_1.__exportStar(require_ListRoomMembershipsCommand(), exports);
    tslib_1.__exportStar(require_ListRoomsCommand(), exports);
    tslib_1.__exportStar(require_ListSipMediaApplicationsCommand(), exports);
    tslib_1.__exportStar(require_ListSipRulesCommand(), exports);
    tslib_1.__exportStar(require_ListSupportedPhoneNumberCountriesCommand(), exports);
    tslib_1.__exportStar(require_ListTagsForResourceCommand(), exports);
    tslib_1.__exportStar(require_ListUsersCommand(), exports);
    tslib_1.__exportStar(require_ListVoiceConnectorGroupsCommand(), exports);
    tslib_1.__exportStar(require_ListVoiceConnectorTerminationCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListVoiceConnectorsCommand(), exports);
    tslib_1.__exportStar(require_LogoutUserCommand(), exports);
    tslib_1.__exportStar(require_PutAppInstanceRetentionSettingsCommand(), exports);
    tslib_1.__exportStar(require_PutAppInstanceStreamingConfigurationsCommand(), exports);
    tslib_1.__exportStar(require_PutEventsConfigurationCommand(), exports);
    tslib_1.__exportStar(require_PutRetentionSettingsCommand(), exports);
    tslib_1.__exportStar(require_PutSipMediaApplicationLoggingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_PutVoiceConnectorEmergencyCallingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_PutVoiceConnectorLoggingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_PutVoiceConnectorOriginationCommand(), exports);
    tslib_1.__exportStar(require_PutVoiceConnectorProxyCommand(), exports);
    tslib_1.__exportStar(require_PutVoiceConnectorStreamingConfigurationCommand(), exports);
    tslib_1.__exportStar(require_PutVoiceConnectorTerminationCommand(), exports);
    tslib_1.__exportStar(require_PutVoiceConnectorTerminationCredentialsCommand(), exports);
    tslib_1.__exportStar(require_RedactChannelMessageCommand(), exports);
    tslib_1.__exportStar(require_RedactConversationMessageCommand(), exports);
    tslib_1.__exportStar(require_RedactRoomMessageCommand(), exports);
    tslib_1.__exportStar(require_RegenerateSecurityTokenCommand(), exports);
    tslib_1.__exportStar(require_ResetPersonalPINCommand(), exports);
    tslib_1.__exportStar(require_RestorePhoneNumberCommand(), exports);
    tslib_1.__exportStar(require_SearchAvailablePhoneNumbersCommand(), exports);
    tslib_1.__exportStar(require_SendChannelMessageCommand(), exports);
    tslib_1.__exportStar(require_StartMeetingTranscriptionCommand(), exports);
    tslib_1.__exportStar(require_StopMeetingTranscriptionCommand(), exports);
    tslib_1.__exportStar(require_TagAttendeeCommand(), exports);
    tslib_1.__exportStar(require_TagMeetingCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_UntagAttendeeCommand(), exports);
    tslib_1.__exportStar(require_UntagMeetingCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateAccountCommand(), exports);
    tslib_1.__exportStar(require_UpdateAccountSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdateAppInstanceCommand(), exports);
    tslib_1.__exportStar(require_UpdateAppInstanceUserCommand(), exports);
    tslib_1.__exportStar(require_UpdateBotCommand(), exports);
    tslib_1.__exportStar(require_UpdateChannelCommand(), exports);
    tslib_1.__exportStar(require_UpdateChannelMessageCommand(), exports);
    tslib_1.__exportStar(require_UpdateChannelReadMarkerCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdatePhoneNumberCommand(), exports);
    tslib_1.__exportStar(require_UpdatePhoneNumberSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdateProxySessionCommand(), exports);
    tslib_1.__exportStar(require_UpdateRoomCommand(), exports);
    tslib_1.__exportStar(require_UpdateRoomMembershipCommand(), exports);
    tslib_1.__exportStar(require_UpdateSipMediaApplicationCallCommand(), exports);
    tslib_1.__exportStar(require_UpdateSipMediaApplicationCommand(), exports);
    tslib_1.__exportStar(require_UpdateSipRuleCommand(), exports);
    tslib_1.__exportStar(require_UpdateUserCommand(), exports);
    tslib_1.__exportStar(require_UpdateUserSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdateVoiceConnectorCommand(), exports);
    tslib_1.__exportStar(require_UpdateVoiceConnectorGroupCommand(), exports);
    tslib_1.__exportStar(require_ValidateE911AddressCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListAccountsCommand_1 = require_ListAccountsCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAppInstanceAdminsPaginator.js
var require_ListAppInstanceAdminsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAppInstanceAdminsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAppInstanceAdmins = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListAppInstanceAdminsCommand_1 = require_ListAppInstanceAdminsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAppInstanceAdminsCommand_1.ListAppInstanceAdminsCommand(input), ...args);
    };
    async function* paginateListAppInstanceAdmins(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAppInstanceAdmins = paginateListAppInstanceAdmins;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAppInstanceUsersPaginator.js
var require_ListAppInstanceUsersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAppInstanceUsersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAppInstanceUsers = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListAppInstanceUsersCommand_1 = require_ListAppInstanceUsersCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAppInstanceUsersCommand_1.ListAppInstanceUsersCommand(input), ...args);
    };
    async function* paginateListAppInstanceUsers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAppInstanceUsers = paginateListAppInstanceUsers;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAppInstancesPaginator.js
var require_ListAppInstancesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAppInstancesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAppInstances = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListAppInstancesCommand_1 = require_ListAppInstancesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAppInstancesCommand_1.ListAppInstancesCommand(input), ...args);
    };
    async function* paginateListAppInstances(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAppInstances = paginateListAppInstances;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAttendeesPaginator.js
var require_ListAttendeesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListAttendeesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAttendees = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListAttendeesCommand_1 = require_ListAttendeesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAttendeesCommand_1.ListAttendeesCommand(input), ...args);
    };
    async function* paginateListAttendees(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAttendees = paginateListAttendees;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListBotsPaginator.js
var require_ListBotsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListBotsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListBots = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListBotsCommand_1 = require_ListBotsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListBotsCommand_1.ListBotsCommand(input), ...args);
    };
    async function* paginateListBots(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListBots = paginateListBots;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelBansPaginator.js
var require_ListChannelBansPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelBansPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelBans = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListChannelBansCommand_1 = require_ListChannelBansCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelBansCommand_1.ListChannelBansCommand(input), ...args);
    };
    async function* paginateListChannelBans(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelBans = paginateListChannelBans;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelMembershipsForAppInstanceUserPaginator.js
var require_ListChannelMembershipsForAppInstanceUserPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelMembershipsForAppInstanceUserPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelMembershipsForAppInstanceUser = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListChannelMembershipsForAppInstanceUserCommand_1 = require_ListChannelMembershipsForAppInstanceUserCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelMembershipsForAppInstanceUserCommand_1.ListChannelMembershipsForAppInstanceUserCommand(input), ...args);
    };
    async function* paginateListChannelMembershipsForAppInstanceUser(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelMembershipsForAppInstanceUser = paginateListChannelMembershipsForAppInstanceUser;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelMembershipsPaginator.js
var require_ListChannelMembershipsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelMembershipsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelMemberships = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListChannelMembershipsCommand_1 = require_ListChannelMembershipsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelMembershipsCommand_1.ListChannelMembershipsCommand(input), ...args);
    };
    async function* paginateListChannelMemberships(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelMemberships = paginateListChannelMemberships;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelMessagesPaginator.js
var require_ListChannelMessagesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelMessagesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelMessages = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListChannelMessagesCommand_1 = require_ListChannelMessagesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelMessagesCommand_1.ListChannelMessagesCommand(input), ...args);
    };
    async function* paginateListChannelMessages(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelMessages = paginateListChannelMessages;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelModeratorsPaginator.js
var require_ListChannelModeratorsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelModeratorsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelModerators = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListChannelModeratorsCommand_1 = require_ListChannelModeratorsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelModeratorsCommand_1.ListChannelModeratorsCommand(input), ...args);
    };
    async function* paginateListChannelModerators(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelModerators = paginateListChannelModerators;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelsModeratedByAppInstanceUserPaginator.js
var require_ListChannelsModeratedByAppInstanceUserPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelsModeratedByAppInstanceUserPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelsModeratedByAppInstanceUser = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListChannelsModeratedByAppInstanceUserCommand_1 = require_ListChannelsModeratedByAppInstanceUserCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelsModeratedByAppInstanceUserCommand_1.ListChannelsModeratedByAppInstanceUserCommand(input), ...args);
    };
    async function* paginateListChannelsModeratedByAppInstanceUser(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelsModeratedByAppInstanceUser = paginateListChannelsModeratedByAppInstanceUser;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelsPaginator.js
var require_ListChannelsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListChannelsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannels = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListChannelsCommand_1 = require_ListChannelsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelsCommand_1.ListChannelsCommand(input), ...args);
    };
    async function* paginateListChannels(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannels = paginateListChannels;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListMediaCapturePipelinesPaginator.js
var require_ListMediaCapturePipelinesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListMediaCapturePipelinesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListMediaCapturePipelines = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListMediaCapturePipelinesCommand_1 = require_ListMediaCapturePipelinesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListMediaCapturePipelinesCommand_1.ListMediaCapturePipelinesCommand(input), ...args);
    };
    async function* paginateListMediaCapturePipelines(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListMediaCapturePipelines = paginateListMediaCapturePipelines;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListMeetingsPaginator.js
var require_ListMeetingsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListMeetingsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListMeetings = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListMeetingsCommand_1 = require_ListMeetingsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListMeetingsCommand_1.ListMeetingsCommand(input), ...args);
    };
    async function* paginateListMeetings(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListMeetings = paginateListMeetings;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListPhoneNumberOrdersPaginator.js
var require_ListPhoneNumberOrdersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListPhoneNumberOrdersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListPhoneNumberOrders = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListPhoneNumberOrdersCommand_1 = require_ListPhoneNumberOrdersCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListPhoneNumberOrdersCommand_1.ListPhoneNumberOrdersCommand(input), ...args);
    };
    async function* paginateListPhoneNumberOrders(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListPhoneNumberOrders = paginateListPhoneNumberOrders;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListPhoneNumbersPaginator.js
var require_ListPhoneNumbersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListPhoneNumbersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListPhoneNumbers = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListPhoneNumbersCommand_1 = require_ListPhoneNumbersCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListPhoneNumbersCommand_1.ListPhoneNumbersCommand(input), ...args);
    };
    async function* paginateListPhoneNumbers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListPhoneNumbers = paginateListPhoneNumbers;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListProxySessionsPaginator.js
var require_ListProxySessionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListProxySessionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListProxySessions = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListProxySessionsCommand_1 = require_ListProxySessionsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListProxySessionsCommand_1.ListProxySessionsCommand(input), ...args);
    };
    async function* paginateListProxySessions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListProxySessions = paginateListProxySessions;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListRoomMembershipsPaginator.js
var require_ListRoomMembershipsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListRoomMembershipsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListRoomMemberships = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListRoomMembershipsCommand_1 = require_ListRoomMembershipsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListRoomMembershipsCommand_1.ListRoomMembershipsCommand(input), ...args);
    };
    async function* paginateListRoomMemberships(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListRoomMemberships = paginateListRoomMemberships;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListRoomsPaginator.js
var require_ListRoomsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListRoomsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListRooms = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListRoomsCommand_1 = require_ListRoomsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListRoomsCommand_1.ListRoomsCommand(input), ...args);
    };
    async function* paginateListRooms(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListRooms = paginateListRooms;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListSipMediaApplicationsPaginator.js
var require_ListSipMediaApplicationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListSipMediaApplicationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListSipMediaApplications = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListSipMediaApplicationsCommand_1 = require_ListSipMediaApplicationsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListSipMediaApplicationsCommand_1.ListSipMediaApplicationsCommand(input), ...args);
    };
    async function* paginateListSipMediaApplications(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListSipMediaApplications = paginateListSipMediaApplications;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListSipRulesPaginator.js
var require_ListSipRulesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListSipRulesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListSipRules = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListSipRulesCommand_1 = require_ListSipRulesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListSipRulesCommand_1.ListSipRulesCommand(input), ...args);
    };
    async function* paginateListSipRules(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListSipRules = paginateListSipRules;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListUsersPaginator.js
var require_ListUsersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListUsersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListUsers = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListUsersCommand_1 = require_ListUsersCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListUsersCommand_1.ListUsersCommand(input), ...args);
    };
    async function* paginateListUsers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListUsers = paginateListUsers;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListVoiceConnectorGroupsPaginator.js
var require_ListVoiceConnectorGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListVoiceConnectorGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListVoiceConnectorGroups = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListVoiceConnectorGroupsCommand_1 = require_ListVoiceConnectorGroupsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListVoiceConnectorGroupsCommand_1.ListVoiceConnectorGroupsCommand(input), ...args);
    };
    async function* paginateListVoiceConnectorGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListVoiceConnectorGroups = paginateListVoiceConnectorGroups;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListVoiceConnectorsPaginator.js
var require_ListVoiceConnectorsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/ListVoiceConnectorsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListVoiceConnectors = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var ListVoiceConnectorsCommand_1 = require_ListVoiceConnectorsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListVoiceConnectorsCommand_1.ListVoiceConnectorsCommand(input), ...args);
    };
    async function* paginateListVoiceConnectors(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListVoiceConnectors = paginateListVoiceConnectors;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/SearchAvailablePhoneNumbersPaginator.js
var require_SearchAvailablePhoneNumbersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/SearchAvailablePhoneNumbersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateSearchAvailablePhoneNumbers = void 0;
    var ChimeClient_1 = require_ChimeClient();
    var SearchAvailablePhoneNumbersCommand_1 = require_SearchAvailablePhoneNumbersCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new SearchAvailablePhoneNumbersCommand_1.SearchAvailablePhoneNumbersCommand(input), ...args);
    };
    async function* paginateSearchAvailablePhoneNumbers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeClient_1.ChimeClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Chime | ChimeClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateSearchAvailablePhoneNumbers = paginateSearchAvailablePhoneNumbers;
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/pagination/index.js
var require_pagination4 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator2(), exports);
    tslib_1.__exportStar(require_ListAppInstanceAdminsPaginator(), exports);
    tslib_1.__exportStar(require_ListAppInstanceUsersPaginator(), exports);
    tslib_1.__exportStar(require_ListAppInstancesPaginator(), exports);
    tslib_1.__exportStar(require_ListAttendeesPaginator(), exports);
    tslib_1.__exportStar(require_ListBotsPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelBansPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelMembershipsForAppInstanceUserPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelMembershipsPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelMessagesPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelModeratorsPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelsModeratedByAppInstanceUserPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelsPaginator(), exports);
    tslib_1.__exportStar(require_ListMediaCapturePipelinesPaginator(), exports);
    tslib_1.__exportStar(require_ListMeetingsPaginator(), exports);
    tslib_1.__exportStar(require_ListPhoneNumberOrdersPaginator(), exports);
    tslib_1.__exportStar(require_ListPhoneNumbersPaginator(), exports);
    tslib_1.__exportStar(require_ListProxySessionsPaginator(), exports);
    tslib_1.__exportStar(require_ListRoomMembershipsPaginator(), exports);
    tslib_1.__exportStar(require_ListRoomsPaginator(), exports);
    tslib_1.__exportStar(require_ListSipMediaApplicationsPaginator(), exports);
    tslib_1.__exportStar(require_ListSipRulesPaginator(), exports);
    tslib_1.__exportStar(require_ListUsersPaginator(), exports);
    tslib_1.__exportStar(require_ListVoiceConnectorGroupsPaginator(), exports);
    tslib_1.__exportStar(require_ListVoiceConnectorsPaginator(), exports);
    tslib_1.__exportStar(require_SearchAvailablePhoneNumbersPaginator(), exports);
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/models/index.js
var require_models4 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_04(), exports);
    tslib_1.__exportStar(require_models_1(), exports);
  }
});

// node_modules/@aws-sdk/client-chime/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  "node_modules/@aws-sdk/client-chime/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_ChimeClient(), exports);
    tslib_1.__exportStar(require_Chime(), exports);
    tslib_1.__exportStar(require_commands4(), exports);
    tslib_1.__exportStar(require_pagination4(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    var ChimeServiceException_1 = require_ChimeServiceException();
    Object.defineProperty(exports, "ChimeServiceException", { enumerable: true, get: function() {
      return ChimeServiceException_1.ChimeServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "ssm"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-ssm/package.json
var require_package5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-ssm",
      description: "AWS SDK for JavaScript Ssm Client for Node.js, Browser and React Native",
      version: "3.370.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo ssm"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.370.0",
        "@aws-sdk/credential-provider-node": "3.370.0",
        "@aws-sdk/middleware-host-header": "3.370.0",
        "@aws-sdk/middleware-logger": "3.370.0",
        "@aws-sdk/middleware-recursion-detection": "3.370.0",
        "@aws-sdk/middleware-signing": "3.370.0",
        "@aws-sdk/middleware-user-agent": "3.370.0",
        "@aws-sdk/types": "3.370.0",
        "@aws-sdk/util-endpoints": "3.370.0",
        "@aws-sdk/util-user-agent-browser": "3.370.0",
        "@aws-sdk/util-user-agent-node": "3.370.0",
        "@smithy/config-resolver": "^1.0.1",
        "@smithy/fetch-http-handler": "^1.0.1",
        "@smithy/hash-node": "^1.0.1",
        "@smithy/invalid-dependency": "^1.0.1",
        "@smithy/middleware-content-length": "^1.0.1",
        "@smithy/middleware-endpoint": "^1.0.2",
        "@smithy/middleware-retry": "^1.0.3",
        "@smithy/middleware-serde": "^1.0.1",
        "@smithy/middleware-stack": "^1.0.1",
        "@smithy/node-config-provider": "^1.0.1",
        "@smithy/node-http-handler": "^1.0.2",
        "@smithy/protocol-http": "^1.1.0",
        "@smithy/smithy-client": "^1.0.3",
        "@smithy/types": "^1.1.0",
        "@smithy/url-parser": "^1.0.1",
        "@smithy/util-base64": "^1.0.1",
        "@smithy/util-body-length-browser": "^1.0.1",
        "@smithy/util-body-length-node": "^1.0.1",
        "@smithy/util-defaults-mode-browser": "^1.0.1",
        "@smithy/util-defaults-mode-node": "^1.0.1",
        "@smithy/util-retry": "^1.0.3",
        "@smithy/util-utf8": "^1.0.1",
        "@smithy/util-waiter": "^1.0.1",
        tslib: "^2.5.0",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^1.0.1",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ssm",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-ssm"
      }
    };
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/ruleset.js
var require_ruleset5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var s = "required";
    var t = "fn";
    var u = "argv";
    var v = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = "getAttr";
    var g = { [s]: false, "type": "String" };
    var h = { [s]: true, "default": false, "type": "Boolean" };
    var i = { [v]: "Endpoint" };
    var j = { [t]: "booleanEquals", [u]: [{ [v]: "UseFIPS" }, true] };
    var k = { [t]: "booleanEquals", [u]: [{ [v]: "UseDualStack" }, true] };
    var l = {};
    var m = { [t]: "booleanEquals", [u]: [true, { [t]: f, [u]: [{ [v]: e }, "supportsFIPS"] }] };
    var n = { [v]: e };
    var o = { [t]: "booleanEquals", [u]: [true, { [t]: f, [u]: [n, "supportsDualStack"] }] };
    var p = [j];
    var q = [k];
    var r = [{ [v]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: g, UseDualStack: h, UseFIPS: h, Endpoint: g }, rules: [{ conditions: [{ [t]: a, [u]: [i] }], type: b, rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: i, properties: l, headers: l }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [t]: a, [u]: r }], type: b, rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: e }], type: b, rules: [{ conditions: [j, k], type: b, rules: [{ conditions: [m, o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://ssm-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: p, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ conditions: [{ [t]: "stringEquals", [u]: ["aws-us-gov", { [t]: f, [u]: [n, "name"] }] }], endpoint: { url: "https://ssm.{Region}.amazonaws.com", properties: l, headers: l }, type: d }, { endpoint: { url: "https://ssm-fips.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: q, type: b, rules: [{ conditions: [o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://ssm.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { type: b, rules: [{ endpoint: { url: "https://ssm.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l }, type: d }] }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset5();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver5();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2014-11-06",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSM",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js
var require_runtimeConfig5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package5());
    var client_sts_1 = require_dist_cjs53();
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared5();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/SSMClient.js
var require_SSMClient = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/SSMClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters5();
    var runtimeConfig_1 = require_runtimeConfig5();
    var SSMClient6 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSMClient = SSMClient6;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/SSMServiceException.js
var require_SSMServiceException = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/SSMServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var SSMServiceException = class _SSMServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSMServiceException.prototype);
      }
    };
    exports.SSMServiceException = SSMServiceException;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_0.js
var require_models_05 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpsMetadataAlreadyExistsException = exports.OpsItemAlreadyExistsException = exports.OpsItemAccessDeniedException = exports.OpsItemDataType = exports.ResourceLimitExceededException = exports.IdempotentParameterMismatch = exports.MaxDocumentSizeExceeded = exports.InvalidDocumentSchemaVersion = exports.InvalidDocumentContent = exports.DocumentLimitExceeded = exports.DocumentAlreadyExists = exports.DocumentStatus = exports.ReviewStatus = exports.PlatformType = exports.DocumentParameterType = exports.DocumentHashType = exports.DocumentType = exports.DocumentFormat = exports.AttachmentsSourceKey = exports.Fault = exports.UnsupportedPlatformType = exports.InvalidTargetMaps = exports.InvalidTarget = exports.InvalidTag = exports.InvalidSchedule = exports.InvalidOutputLocation = exports.InvalidDocumentVersion = exports.InvalidDocument = exports.AssociationStatusName = exports.AssociationSyncCompliance = exports.AssociationComplianceSeverity = exports.AssociationLimitExceeded = exports.AssociationAlreadyExists = exports.InvalidParameters = exports.DoesNotExistException = exports.InvalidInstanceId = exports.InvalidCommandId = exports.DuplicateInstanceId = exports.OpsItemRelatedItemAlreadyExistsException = exports.OpsItemNotFoundException = exports.OpsItemLimitExceededException = exports.OpsItemInvalidParameterException = exports.AlreadyExistsException = exports.ExternalAlarmState = exports.TooManyUpdates = exports.TooManyTagsError = exports.InvalidResourceType = exports.InvalidResourceId = exports.InternalServerError = exports.ResourceTypeForTagging = void 0;
    exports.InstanceInformationFilterKey = exports.UnsupportedOperatingSystem = exports.PatchDeploymentStatus = exports.InvalidPermissionType = exports.DocumentPermissionType = exports.StepExecutionFilterKey = exports.AutomationExecutionNotFoundException = exports.InvalidFilterValue = exports.InvalidFilterKey = exports.ExecutionMode = exports.AutomationType = exports.AutomationSubtype = exports.AutomationExecutionStatus = exports.AutomationExecutionFilterKey = exports.AssociationExecutionTargetsFilterKey = exports.AssociationExecutionDoesNotExist = exports.AssociationFilterOperatorType = exports.AssociationExecutionFilterKey = exports.InvalidAssociationVersion = exports.InvalidNextToken = exports.InvalidFilter = exports.DescribeActivationsFilterKeys = exports.TargetInUseException = exports.ResourcePolicyInvalidParameterException = exports.ResourcePolicyConflictException = exports.ResourceDataSyncNotFoundException = exports.ResourceInUseException = exports.ParameterNotFound = exports.OpsMetadataNotFoundException = exports.InvalidTypeNameException = exports.InvalidOptionException = exports.InvalidInventoryRequestException = exports.InvalidDeleteInventoryParametersException = exports.InventorySchemaDeleteOption = exports.InvalidDocumentOperation = exports.AssociatedInstances = exports.AssociationDoesNotExist = exports.InvalidActivationId = exports.InvalidActivation = exports.ResourceDataSyncInvalidConfigurationException = exports.ResourceDataSyncCountExceededException = exports.ResourceDataSyncAlreadyExistsException = exports.ResourceDataSyncS3Format = exports.PatchAction = exports.OperatingSystem = exports.PatchFilterKey = exports.PatchComplianceLevel = exports.OpsMetadataTooManyUpdatesException = exports.OpsMetadataLimitExceededException = exports.OpsMetadataInvalidArgumentException = void 0;
    exports.DescribeMaintenanceWindowTasksResultFilterSensitiveLog = exports.MaintenanceWindowTaskFilterSensitiveLog = exports.MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = exports.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = exports.MaintenanceWindowTargetFilterSensitiveLog = exports.DescribeMaintenanceWindowsResultFilterSensitiveLog = exports.MaintenanceWindowIdentityFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = exports.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = exports.DescribeInstancePatchStatesResultFilterSensitiveLog = exports.InstancePatchStateFilterSensitiveLog = exports.DescribeAssociationResultFilterSensitiveLog = exports.CreatePatchBaselineRequestFilterSensitiveLog = exports.PatchSourceFilterSensitiveLog = exports.CreateMaintenanceWindowRequestFilterSensitiveLog = exports.CreateAssociationBatchResultFilterSensitiveLog = exports.FailedCreateAssociationFilterSensitiveLog = exports.CreateAssociationBatchRequestFilterSensitiveLog = exports.CreateAssociationBatchRequestEntryFilterSensitiveLog = exports.CreateAssociationResultFilterSensitiveLog = exports.AssociationDescriptionFilterSensitiveLog = exports.CreateAssociationRequestFilterSensitiveLog = exports.OpsItemFilterOperator = exports.OpsItemFilterKey = exports.MaintenanceWindowTaskCutoffBehavior = exports.MaintenanceWindowResourceType = exports.MaintenanceWindowTaskType = exports.MaintenanceWindowExecutionStatus = exports.InvalidDeletionIdException = exports.InventoryDeletionStatus = exports.InstancePatchStateOperatorType = exports.RebootOption = exports.PatchOperationType = exports.PatchComplianceDataState = exports.InvalidInstanceInformationFilterValue = exports.SourceType = exports.ResourceType = exports.PingStatus = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var SSMServiceException_1 = require_SSMServiceException();
    exports.ResourceTypeForTagging = {
      ASSOCIATION: "Association",
      AUTOMATION: "Automation",
      DOCUMENT: "Document",
      MAINTENANCE_WINDOW: "MaintenanceWindow",
      MANAGED_INSTANCE: "ManagedInstance",
      OPSMETADATA: "OpsMetadata",
      OPS_ITEM: "OpsItem",
      PARAMETER: "Parameter",
      PATCH_BASELINE: "PatchBaseline"
    };
    var InternalServerError = class _InternalServerError extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InternalServerError",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerError.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InternalServerError = InternalServerError;
    var InvalidResourceId = class _InvalidResourceId extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResourceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidResourceId.prototype);
      }
    };
    exports.InvalidResourceId = InvalidResourceId;
    var InvalidResourceType = class _InvalidResourceType extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResourceType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidResourceType.prototype);
      }
    };
    exports.InvalidResourceType = InvalidResourceType;
    var TooManyTagsError = class _TooManyTagsError extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TooManyTagsError",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyTagsError";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyTagsError.prototype);
      }
    };
    exports.TooManyTagsError = TooManyTagsError;
    var TooManyUpdates = class _TooManyUpdates extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TooManyUpdates",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyUpdates";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyUpdates.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TooManyUpdates = TooManyUpdates;
    exports.ExternalAlarmState = {
      ALARM: "ALARM",
      UNKNOWN: "UNKNOWN"
    };
    var AlreadyExistsException = class _AlreadyExistsException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AlreadyExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AlreadyExistsException = AlreadyExistsException;
    var OpsItemInvalidParameterException = class _OpsItemInvalidParameterException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemInvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemInvalidParameterException.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
      }
    };
    exports.OpsItemInvalidParameterException = OpsItemInvalidParameterException;
    var OpsItemLimitExceededException = class _OpsItemLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemLimitExceededException.prototype);
        this.ResourceTypes = opts.ResourceTypes;
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
      }
    };
    exports.OpsItemLimitExceededException = OpsItemLimitExceededException;
    var OpsItemNotFoundException = class _OpsItemNotFoundException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OpsItemNotFoundException = OpsItemNotFoundException;
    var OpsItemRelatedItemAlreadyExistsException = class _OpsItemRelatedItemAlreadyExistsException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemRelatedItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.ResourceUri = opts.ResourceUri;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    exports.OpsItemRelatedItemAlreadyExistsException = OpsItemRelatedItemAlreadyExistsException;
    var DuplicateInstanceId = class _DuplicateInstanceId extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateInstanceId.prototype);
      }
    };
    exports.DuplicateInstanceId = DuplicateInstanceId;
    var InvalidCommandId = class _InvalidCommandId extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidCommandId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCommandId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidCommandId.prototype);
      }
    };
    exports.InvalidCommandId = InvalidCommandId;
    var InvalidInstanceId = class _InvalidInstanceId extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInstanceId.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInstanceId = InvalidInstanceId;
    var DoesNotExistException = class _DoesNotExistException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DoesNotExistException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DoesNotExistException = DoesNotExistException;
    var InvalidParameters = class _InvalidParameters extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameters",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameters";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidParameters.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidParameters = InvalidParameters;
    var AssociationAlreadyExists = class _AssociationAlreadyExists extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationAlreadyExists.prototype);
      }
    };
    exports.AssociationAlreadyExists = AssociationAlreadyExists;
    var AssociationLimitExceeded = class _AssociationLimitExceeded extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationLimitExceeded.prototype);
      }
    };
    exports.AssociationLimitExceeded = AssociationLimitExceeded;
    exports.AssociationComplianceSeverity = {
      Critical: "CRITICAL",
      High: "HIGH",
      Low: "LOW",
      Medium: "MEDIUM",
      Unspecified: "UNSPECIFIED"
    };
    exports.AssociationSyncCompliance = {
      Auto: "AUTO",
      Manual: "MANUAL"
    };
    exports.AssociationStatusName = {
      Failed: "Failed",
      Pending: "Pending",
      Success: "Success"
    };
    var InvalidDocument = class _InvalidDocument extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocument",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocument";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocument.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocument = InvalidDocument;
    var InvalidDocumentVersion = class _InvalidDocumentVersion extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentVersion = InvalidDocumentVersion;
    var InvalidOutputLocation = class _InvalidOutputLocation extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOutputLocation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputLocation";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidOutputLocation.prototype);
      }
    };
    exports.InvalidOutputLocation = InvalidOutputLocation;
    var InvalidSchedule = class _InvalidSchedule extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidSchedule",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSchedule";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidSchedule.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidSchedule = InvalidSchedule;
    var InvalidTag = class _InvalidTag extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTag",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTag";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidTag.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTag = InvalidTag;
    var InvalidTarget = class _InvalidTarget extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTarget",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTarget";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidTarget.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTarget = InvalidTarget;
    var InvalidTargetMaps = class _InvalidTargetMaps extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTargetMaps",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTargetMaps";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidTargetMaps.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTargetMaps = InvalidTargetMaps;
    var UnsupportedPlatformType = class _UnsupportedPlatformType extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedPlatformType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedPlatformType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedPlatformType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedPlatformType = UnsupportedPlatformType;
    exports.Fault = {
      Client: "Client",
      Server: "Server",
      Unknown: "Unknown"
    };
    exports.AttachmentsSourceKey = {
      AttachmentReference: "AttachmentReference",
      S3FileUrl: "S3FileUrl",
      SourceUrl: "SourceUrl"
    };
    exports.DocumentFormat = {
      JSON: "JSON",
      TEXT: "TEXT",
      YAML: "YAML"
    };
    exports.DocumentType = {
      ApplicationConfiguration: "ApplicationConfiguration",
      ApplicationConfigurationSchema: "ApplicationConfigurationSchema",
      Automation: "Automation",
      ChangeCalendar: "ChangeCalendar",
      ChangeTemplate: "Automation.ChangeTemplate",
      CloudFormation: "CloudFormation",
      Command: "Command",
      ConformancePackTemplate: "ConformancePackTemplate",
      DeploymentStrategy: "DeploymentStrategy",
      Package: "Package",
      Policy: "Policy",
      ProblemAnalysis: "ProblemAnalysis",
      ProblemAnalysisTemplate: "ProblemAnalysisTemplate",
      QuickSetup: "QuickSetup",
      Session: "Session"
    };
    exports.DocumentHashType = {
      SHA1: "Sha1",
      SHA256: "Sha256"
    };
    exports.DocumentParameterType = {
      String: "String",
      StringList: "StringList"
    };
    exports.PlatformType = {
      LINUX: "Linux",
      MACOS: "MacOS",
      WINDOWS: "Windows"
    };
    exports.ReviewStatus = {
      APPROVED: "APPROVED",
      NOT_REVIEWED: "NOT_REVIEWED",
      PENDING: "PENDING",
      REJECTED: "REJECTED"
    };
    exports.DocumentStatus = {
      Active: "Active",
      Creating: "Creating",
      Deleting: "Deleting",
      Failed: "Failed",
      Updating: "Updating"
    };
    var DocumentAlreadyExists = class _DocumentAlreadyExists extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DocumentAlreadyExists.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentAlreadyExists = DocumentAlreadyExists;
    var DocumentLimitExceeded = class _DocumentLimitExceeded extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DocumentLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentLimitExceeded = DocumentLimitExceeded;
    var InvalidDocumentContent = class _InvalidDocumentContent extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentContent.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentContent = InvalidDocumentContent;
    var InvalidDocumentSchemaVersion = class _InvalidDocumentSchemaVersion extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentSchemaVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentSchemaVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentSchemaVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentSchemaVersion = InvalidDocumentSchemaVersion;
    var MaxDocumentSizeExceeded = class _MaxDocumentSizeExceeded extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "MaxDocumentSizeExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "MaxDocumentSizeExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MaxDocumentSizeExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.MaxDocumentSizeExceeded = MaxDocumentSizeExceeded;
    var IdempotentParameterMismatch = class _IdempotentParameterMismatch extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "IdempotentParameterMismatch",
          $fault: "client",
          ...opts
        });
        this.name = "IdempotentParameterMismatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IdempotentParameterMismatch.prototype);
        this.Message = opts.Message;
      }
    };
    exports.IdempotentParameterMismatch = IdempotentParameterMismatch;
    var ResourceLimitExceededException = class _ResourceLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceLimitExceededException = ResourceLimitExceededException;
    exports.OpsItemDataType = {
      SEARCHABLE_STRING: "SearchableString",
      STRING: "String"
    };
    var OpsItemAccessDeniedException = class _OpsItemAccessDeniedException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemAccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemAccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemAccessDeniedException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OpsItemAccessDeniedException = OpsItemAccessDeniedException;
    var OpsItemAlreadyExistsException = class _OpsItemAlreadyExistsException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    exports.OpsItemAlreadyExistsException = OpsItemAlreadyExistsException;
    var OpsMetadataAlreadyExistsException = class _OpsMetadataAlreadyExistsException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataAlreadyExistsException.prototype);
      }
    };
    exports.OpsMetadataAlreadyExistsException = OpsMetadataAlreadyExistsException;
    var OpsMetadataInvalidArgumentException = class _OpsMetadataInvalidArgumentException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataInvalidArgumentException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataInvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataInvalidArgumentException.prototype);
      }
    };
    exports.OpsMetadataInvalidArgumentException = OpsMetadataInvalidArgumentException;
    var OpsMetadataLimitExceededException = class _OpsMetadataLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataLimitExceededException.prototype);
      }
    };
    exports.OpsMetadataLimitExceededException = OpsMetadataLimitExceededException;
    var OpsMetadataTooManyUpdatesException = class _OpsMetadataTooManyUpdatesException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataTooManyUpdatesException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataTooManyUpdatesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataTooManyUpdatesException.prototype);
      }
    };
    exports.OpsMetadataTooManyUpdatesException = OpsMetadataTooManyUpdatesException;
    exports.PatchComplianceLevel = {
      Critical: "CRITICAL",
      High: "HIGH",
      Informational: "INFORMATIONAL",
      Low: "LOW",
      Medium: "MEDIUM",
      Unspecified: "UNSPECIFIED"
    };
    exports.PatchFilterKey = {
      AdvisoryId: "ADVISORY_ID",
      Arch: "ARCH",
      BugzillaId: "BUGZILLA_ID",
      CVEId: "CVE_ID",
      Classification: "CLASSIFICATION",
      Epoch: "EPOCH",
      MsrcSeverity: "MSRC_SEVERITY",
      Name: "NAME",
      PatchId: "PATCH_ID",
      PatchSet: "PATCH_SET",
      Priority: "PRIORITY",
      Product: "PRODUCT",
      ProductFamily: "PRODUCT_FAMILY",
      Release: "RELEASE",
      Repository: "REPOSITORY",
      Section: "SECTION",
      Security: "SECURITY",
      Severity: "SEVERITY",
      Version: "VERSION"
    };
    exports.OperatingSystem = {
      AlmaLinux: "ALMA_LINUX",
      AmazonLinux: "AMAZON_LINUX",
      AmazonLinux2: "AMAZON_LINUX_2",
      AmazonLinux2022: "AMAZON_LINUX_2022",
      AmazonLinux2023: "AMAZON_LINUX_2023",
      CentOS: "CENTOS",
      Debian: "DEBIAN",
      MacOS: "MACOS",
      OracleLinux: "ORACLE_LINUX",
      Raspbian: "RASPBIAN",
      RedhatEnterpriseLinux: "REDHAT_ENTERPRISE_LINUX",
      Rocky_Linux: "ROCKY_LINUX",
      Suse: "SUSE",
      Ubuntu: "UBUNTU",
      Windows: "WINDOWS"
    };
    exports.PatchAction = {
      AllowAsDependency: "ALLOW_AS_DEPENDENCY",
      Block: "BLOCK"
    };
    exports.ResourceDataSyncS3Format = {
      JSON_SERDE: "JsonSerDe"
    };
    var ResourceDataSyncAlreadyExistsException = class _ResourceDataSyncAlreadyExistsException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncAlreadyExistsException.prototype);
        this.SyncName = opts.SyncName;
      }
    };
    exports.ResourceDataSyncAlreadyExistsException = ResourceDataSyncAlreadyExistsException;
    var ResourceDataSyncCountExceededException = class _ResourceDataSyncCountExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncCountExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncCountExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncCountExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncCountExceededException = ResourceDataSyncCountExceededException;
    var ResourceDataSyncInvalidConfigurationException = class _ResourceDataSyncInvalidConfigurationException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncInvalidConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncInvalidConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncInvalidConfigurationException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncInvalidConfigurationException = ResourceDataSyncInvalidConfigurationException;
    var InvalidActivation = class _InvalidActivation extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidActivation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivation";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidActivation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidActivation = InvalidActivation;
    var InvalidActivationId = class _InvalidActivationId extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidActivationId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivationId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidActivationId.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidActivationId = InvalidActivationId;
    var AssociationDoesNotExist = class _AssociationDoesNotExist extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationDoesNotExist.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationDoesNotExist = AssociationDoesNotExist;
    var AssociatedInstances = class _AssociatedInstances extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociatedInstances",
          $fault: "client",
          ...opts
        });
        this.name = "AssociatedInstances";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociatedInstances.prototype);
      }
    };
    exports.AssociatedInstances = AssociatedInstances;
    var InvalidDocumentOperation = class _InvalidDocumentOperation extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentOperation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentOperation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentOperation = InvalidDocumentOperation;
    exports.InventorySchemaDeleteOption = {
      DELETE_SCHEMA: "DeleteSchema",
      DISABLE_SCHEMA: "DisableSchema"
    };
    var InvalidDeleteInventoryParametersException = class _InvalidDeleteInventoryParametersException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeleteInventoryParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeleteInventoryParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDeleteInventoryParametersException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDeleteInventoryParametersException = InvalidDeleteInventoryParametersException;
    var InvalidInventoryRequestException = class _InvalidInventoryRequestException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInventoryRequestException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryRequestException = InvalidInventoryRequestException;
    var InvalidOptionException = class _InvalidOptionException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOptionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidOptionException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidOptionException = InvalidOptionException;
    var InvalidTypeNameException = class _InvalidTypeNameException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTypeNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTypeNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidTypeNameException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTypeNameException = InvalidTypeNameException;
    var OpsMetadataNotFoundException = class _OpsMetadataNotFoundException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataNotFoundException.prototype);
      }
    };
    exports.OpsMetadataNotFoundException = OpsMetadataNotFoundException;
    var ParameterNotFound = class _ParameterNotFound extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterNotFound.prototype);
      }
    };
    exports.ParameterNotFound = ParameterNotFound;
    var ResourceInUseException = class _ResourceInUseException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceInUseException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    var ResourceDataSyncNotFoundException = class _ResourceDataSyncNotFoundException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncNotFoundException.prototype);
        this.SyncName = opts.SyncName;
        this.SyncType = opts.SyncType;
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncNotFoundException = ResourceDataSyncNotFoundException;
    var ResourcePolicyConflictException = class _ResourcePolicyConflictException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourcePolicyConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourcePolicyConflictException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourcePolicyConflictException = ResourcePolicyConflictException;
    var ResourcePolicyInvalidParameterException = class _ResourcePolicyInvalidParameterException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourcePolicyInvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourcePolicyInvalidParameterException.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
      }
    };
    exports.ResourcePolicyInvalidParameterException = ResourcePolicyInvalidParameterException;
    var TargetInUseException = class _TargetInUseException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TargetInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "TargetInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TargetInUseException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TargetInUseException = TargetInUseException;
    exports.DescribeActivationsFilterKeys = {
      ACTIVATION_IDS: "ActivationIds",
      DEFAULT_INSTANCE_NAME: "DefaultInstanceName",
      IAM_ROLE: "IamRole"
    };
    var InvalidFilter = class _InvalidFilter extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilter",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilter";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidFilter.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidFilter = InvalidFilter;
    var InvalidNextToken = class _InvalidNextToken extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidNextToken",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidNextToken.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidNextToken = InvalidNextToken;
    var InvalidAssociationVersion = class _InvalidAssociationVersion extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAssociationVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociationVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAssociationVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAssociationVersion = InvalidAssociationVersion;
    exports.AssociationExecutionFilterKey = {
      CreatedTime: "CreatedTime",
      ExecutionId: "ExecutionId",
      Status: "Status"
    };
    exports.AssociationFilterOperatorType = {
      Equal: "EQUAL",
      GreaterThan: "GREATER_THAN",
      LessThan: "LESS_THAN"
    };
    var AssociationExecutionDoesNotExist = class _AssociationExecutionDoesNotExist extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationExecutionDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationExecutionDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationExecutionDoesNotExist.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationExecutionDoesNotExist = AssociationExecutionDoesNotExist;
    exports.AssociationExecutionTargetsFilterKey = {
      ResourceId: "ResourceId",
      ResourceType: "ResourceType",
      Status: "Status"
    };
    exports.AutomationExecutionFilterKey = {
      AUTOMATION_SUBTYPE: "AutomationSubtype",
      AUTOMATION_TYPE: "AutomationType",
      CURRENT_ACTION: "CurrentAction",
      DOCUMENT_NAME_PREFIX: "DocumentNamePrefix",
      EXECUTION_ID: "ExecutionId",
      EXECUTION_STATUS: "ExecutionStatus",
      OPS_ITEM_ID: "OpsItemId",
      PARENT_EXECUTION_ID: "ParentExecutionId",
      START_TIME_AFTER: "StartTimeAfter",
      START_TIME_BEFORE: "StartTimeBefore",
      TAG_KEY: "TagKey",
      TARGET_RESOURCE_GROUP: "TargetResourceGroup"
    };
    exports.AutomationExecutionStatus = {
      APPROVED: "Approved",
      CANCELLED: "Cancelled",
      CANCELLING: "Cancelling",
      CHANGE_CALENDAR_OVERRIDE_APPROVED: "ChangeCalendarOverrideApproved",
      CHANGE_CALENDAR_OVERRIDE_REJECTED: "ChangeCalendarOverrideRejected",
      COMPLETED_WITH_FAILURE: "CompletedWithFailure",
      COMPLETED_WITH_SUCCESS: "CompletedWithSuccess",
      FAILED: "Failed",
      INPROGRESS: "InProgress",
      PENDING: "Pending",
      PENDING_APPROVAL: "PendingApproval",
      PENDING_CHANGE_CALENDAR_OVERRIDE: "PendingChangeCalendarOverride",
      REJECTED: "Rejected",
      RUNBOOK_INPROGRESS: "RunbookInProgress",
      SCHEDULED: "Scheduled",
      SUCCESS: "Success",
      TIMEDOUT: "TimedOut",
      WAITING: "Waiting"
    };
    exports.AutomationSubtype = {
      ChangeRequest: "ChangeRequest"
    };
    exports.AutomationType = {
      CrossAccount: "CrossAccount",
      Local: "Local"
    };
    exports.ExecutionMode = {
      Auto: "Auto",
      Interactive: "Interactive"
    };
    var InvalidFilterKey = class _InvalidFilterKey extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterKey",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidFilterKey.prototype);
      }
    };
    exports.InvalidFilterKey = InvalidFilterKey;
    var InvalidFilterValue = class _InvalidFilterValue extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidFilterValue.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidFilterValue = InvalidFilterValue;
    var AutomationExecutionNotFoundException = class _AutomationExecutionNotFoundException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationExecutionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationExecutionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationExecutionNotFoundException = AutomationExecutionNotFoundException;
    exports.StepExecutionFilterKey = {
      ACTION: "Action",
      START_TIME_AFTER: "StartTimeAfter",
      START_TIME_BEFORE: "StartTimeBefore",
      STEP_EXECUTION_ID: "StepExecutionId",
      STEP_EXECUTION_STATUS: "StepExecutionStatus",
      STEP_NAME: "StepName"
    };
    exports.DocumentPermissionType = {
      SHARE: "Share"
    };
    var InvalidPermissionType = class _InvalidPermissionType extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPermissionType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPermissionType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidPermissionType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidPermissionType = InvalidPermissionType;
    exports.PatchDeploymentStatus = {
      Approved: "APPROVED",
      ExplicitApproved: "EXPLICIT_APPROVED",
      ExplicitRejected: "EXPLICIT_REJECTED",
      PendingApproval: "PENDING_APPROVAL"
    };
    var UnsupportedOperatingSystem = class _UnsupportedOperatingSystem extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedOperatingSystem",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedOperatingSystem";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedOperatingSystem.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedOperatingSystem = UnsupportedOperatingSystem;
    exports.InstanceInformationFilterKey = {
      ACTIVATION_IDS: "ActivationIds",
      AGENT_VERSION: "AgentVersion",
      ASSOCIATION_STATUS: "AssociationStatus",
      IAM_ROLE: "IamRole",
      INSTANCE_IDS: "InstanceIds",
      PING_STATUS: "PingStatus",
      PLATFORM_TYPES: "PlatformTypes",
      RESOURCE_TYPE: "ResourceType"
    };
    exports.PingStatus = {
      CONNECTION_LOST: "ConnectionLost",
      INACTIVE: "Inactive",
      ONLINE: "Online"
    };
    exports.ResourceType = {
      DOCUMENT: "Document",
      EC2_INSTANCE: "EC2Instance",
      MANAGED_INSTANCE: "ManagedInstance"
    };
    exports.SourceType = {
      AWS_EC2_INSTANCE: "AWS::EC2::Instance",
      AWS_IOT_THING: "AWS::IoT::Thing",
      AWS_SSM_MANAGEDINSTANCE: "AWS::SSM::ManagedInstance"
    };
    var InvalidInstanceInformationFilterValue = class _InvalidInstanceInformationFilterValue extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceInformationFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceInformationFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInstanceInformationFilterValue.prototype);
      }
    };
    exports.InvalidInstanceInformationFilterValue = InvalidInstanceInformationFilterValue;
    exports.PatchComplianceDataState = {
      Failed: "FAILED",
      Installed: "INSTALLED",
      InstalledOther: "INSTALLED_OTHER",
      InstalledPendingReboot: "INSTALLED_PENDING_REBOOT",
      InstalledRejected: "INSTALLED_REJECTED",
      Missing: "MISSING",
      NotApplicable: "NOT_APPLICABLE"
    };
    exports.PatchOperationType = {
      INSTALL: "Install",
      SCAN: "Scan"
    };
    exports.RebootOption = {
      NO_REBOOT: "NoReboot",
      REBOOT_IF_NEEDED: "RebootIfNeeded"
    };
    exports.InstancePatchStateOperatorType = {
      EQUAL: "Equal",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan",
      NOT_EQUAL: "NotEqual"
    };
    exports.InventoryDeletionStatus = {
      COMPLETE: "Complete",
      IN_PROGRESS: "InProgress"
    };
    var InvalidDeletionIdException = class _InvalidDeletionIdException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeletionIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeletionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDeletionIdException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDeletionIdException = InvalidDeletionIdException;
    exports.MaintenanceWindowExecutionStatus = {
      Cancelled: "CANCELLED",
      Cancelling: "CANCELLING",
      Failed: "FAILED",
      InProgress: "IN_PROGRESS",
      Pending: "PENDING",
      SkippedOverlapping: "SKIPPED_OVERLAPPING",
      Success: "SUCCESS",
      TimedOut: "TIMED_OUT"
    };
    exports.MaintenanceWindowTaskType = {
      Automation: "AUTOMATION",
      Lambda: "LAMBDA",
      RunCommand: "RUN_COMMAND",
      StepFunctions: "STEP_FUNCTIONS"
    };
    exports.MaintenanceWindowResourceType = {
      Instance: "INSTANCE",
      ResourceGroup: "RESOURCE_GROUP"
    };
    exports.MaintenanceWindowTaskCutoffBehavior = {
      CancelTask: "CANCEL_TASK",
      ContinueTask: "CONTINUE_TASK"
    };
    exports.OpsItemFilterKey = {
      ACCOUNT_ID: "AccountId",
      ACTUAL_END_TIME: "ActualEndTime",
      ACTUAL_START_TIME: "ActualStartTime",
      AUTOMATION_ID: "AutomationId",
      CATEGORY: "Category",
      CHANGE_REQUEST_APPROVER_ARN: "ChangeRequestByApproverArn",
      CHANGE_REQUEST_APPROVER_NAME: "ChangeRequestByApproverName",
      CHANGE_REQUEST_REQUESTER_ARN: "ChangeRequestByRequesterArn",
      CHANGE_REQUEST_REQUESTER_NAME: "ChangeRequestByRequesterName",
      CHANGE_REQUEST_TARGETS_RESOURCE_GROUP: "ChangeRequestByTargetsResourceGroup",
      CHANGE_REQUEST_TEMPLATE: "ChangeRequestByTemplate",
      CREATED_BY: "CreatedBy",
      CREATED_TIME: "CreatedTime",
      INSIGHT_TYPE: "InsightByType",
      LAST_MODIFIED_TIME: "LastModifiedTime",
      OPERATIONAL_DATA: "OperationalData",
      OPERATIONAL_DATA_KEY: "OperationalDataKey",
      OPERATIONAL_DATA_VALUE: "OperationalDataValue",
      OPSITEM_ID: "OpsItemId",
      OPSITEM_TYPE: "OpsItemType",
      PLANNED_END_TIME: "PlannedEndTime",
      PLANNED_START_TIME: "PlannedStartTime",
      PRIORITY: "Priority",
      RESOURCE_ID: "ResourceId",
      SEVERITY: "Severity",
      SOURCE: "Source",
      STATUS: "Status",
      TITLE: "Title"
    };
    exports.OpsItemFilterOperator = {
      CONTAINS: "Contains",
      EQUAL: "Equal",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan"
    };
    var CreateAssociationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateAssociationRequestFilterSensitiveLog = CreateAssociationRequestFilterSensitiveLog;
    var AssociationDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssociationDescriptionFilterSensitiveLog = AssociationDescriptionFilterSensitiveLog;
    var CreateAssociationResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, exports.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    });
    exports.CreateAssociationResultFilterSensitiveLog = CreateAssociationResultFilterSensitiveLog;
    var CreateAssociationBatchRequestEntryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateAssociationBatchRequestEntryFilterSensitiveLog = CreateAssociationBatchRequestEntryFilterSensitiveLog;
    var CreateAssociationBatchRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Entries && {
        Entries: obj.Entries.map((item) => (0, exports.CreateAssociationBatchRequestEntryFilterSensitiveLog)(item))
      }
    });
    exports.CreateAssociationBatchRequestFilterSensitiveLog = CreateAssociationBatchRequestFilterSensitiveLog;
    var FailedCreateAssociationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Entry && { Entry: (0, exports.CreateAssociationBatchRequestEntryFilterSensitiveLog)(obj.Entry) }
    });
    exports.FailedCreateAssociationFilterSensitiveLog = FailedCreateAssociationFilterSensitiveLog;
    var CreateAssociationBatchResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Successful && { Successful: obj.Successful.map((item) => (0, exports.AssociationDescriptionFilterSensitiveLog)(item)) },
      ...obj.Failed && { Failed: obj.Failed.map((item) => (0, exports.FailedCreateAssociationFilterSensitiveLog)(item)) }
    });
    exports.CreateAssociationBatchResultFilterSensitiveLog = CreateAssociationBatchResultFilterSensitiveLog;
    var CreateMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateMaintenanceWindowRequestFilterSensitiveLog = CreateMaintenanceWindowRequestFilterSensitiveLog;
    var PatchSourceFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Configuration && { Configuration: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PatchSourceFilterSensitiveLog = PatchSourceFilterSensitiveLog;
    var CreatePatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, exports.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.CreatePatchBaselineRequestFilterSensitiveLog = CreatePatchBaselineRequestFilterSensitiveLog;
    var DescribeAssociationResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, exports.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    });
    exports.DescribeAssociationResultFilterSensitiveLog = DescribeAssociationResultFilterSensitiveLog;
    var InstancePatchStateFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    });
    exports.InstancePatchStateFilterSensitiveLog = InstancePatchStateFilterSensitiveLog;
    var DescribeInstancePatchStatesResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InstancePatchStates && {
        InstancePatchStates: obj.InstancePatchStates.map((item) => (0, exports.InstancePatchStateFilterSensitiveLog)(item))
      }
    });
    exports.DescribeInstancePatchStatesResultFilterSensitiveLog = DescribeInstancePatchStatesResultFilterSensitiveLog;
    var DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InstancePatchStates && {
        InstancePatchStates: obj.InstancePatchStates.map((item) => (0, exports.InstancePatchStateFilterSensitiveLog)(item))
      }
    });
    exports.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog;
    var MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WindowExecutionTaskInvocationIdentities && {
        WindowExecutionTaskInvocationIdentities: obj.WindowExecutionTaskInvocationIdentities.map((item) => (0, exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog)(item))
      }
    });
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog;
    var MaintenanceWindowIdentityFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowIdentityFilterSensitiveLog = MaintenanceWindowIdentityFilterSensitiveLog;
    var DescribeMaintenanceWindowsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WindowIdentities && {
        WindowIdentities: obj.WindowIdentities.map((item) => (0, exports.MaintenanceWindowIdentityFilterSensitiveLog)(item))
      }
    });
    exports.DescribeMaintenanceWindowsResultFilterSensitiveLog = DescribeMaintenanceWindowsResultFilterSensitiveLog;
    var MaintenanceWindowTargetFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowTargetFilterSensitiveLog = MaintenanceWindowTargetFilterSensitiveLog;
    var DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Targets && { Targets: obj.Targets.map((item) => (0, exports.MaintenanceWindowTargetFilterSensitiveLog)(item)) }
    });
    exports.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = DescribeMaintenanceWindowTargetsResultFilterSensitiveLog;
    var MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Values && { Values: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog;
    var MaintenanceWindowTaskFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowTaskFilterSensitiveLog = MaintenanceWindowTaskFilterSensitiveLog;
    var DescribeMaintenanceWindowTasksResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tasks && { Tasks: obj.Tasks.map((item) => (0, exports.MaintenanceWindowTaskFilterSensitiveLog)(item)) }
    });
    exports.DescribeMaintenanceWindowTasksResultFilterSensitiveLog = DescribeMaintenanceWindowTasksResultFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_1.js
var require_models_12 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidItemContentException = exports.ComplianceTypeCountLimitExceededException = exports.DocumentPermissionLimit = exports.LastResourceDataSyncStatus = exports.OpsItemRelatedItemsFilterOperator = exports.OpsItemRelatedItemsFilterKey = exports.OpsItemEventFilterOperator = exports.OpsItemEventFilterKey = exports.DocumentFilterKey = exports.DocumentReviewCommentType = exports.DocumentMetadataEnum = exports.ComplianceStatus = exports.ComplianceSeverity = exports.ComplianceQueryOperatorType = exports.CommandStatus = exports.CommandPluginStatus = exports.CommandFilterKey = exports.AssociationFilterKey = exports.ParameterVersionLabelLimitExceeded = exports.ServiceSettingNotFound = exports.ParameterVersionNotFound = exports.InvalidKeyId = exports.OpsFilterOperatorType = exports.NotificationType = exports.NotificationEvent = exports.InventoryAttributeDataType = exports.InvalidResultAttributeException = exports.InvalidInventoryGroupException = exports.InvalidAggregatorException = exports.InventoryQueryOperatorType = exports.AttachmentHashType = exports.UnsupportedFeatureRequiredException = exports.ConnectionStatus = exports.InvocationDoesNotExist = exports.InvalidPluginName = exports.CommandInvocationStatus = exports.UnsupportedCalendarException = exports.InvalidDocumentType = exports.CalendarState = exports.OpsItemRelatedItemAssociationNotFoundException = exports.SessionStatus = exports.SessionState = exports.SessionFilterKey = exports.PatchProperty = exports.PatchSet = exports.InvalidFilterOption = exports.ParameterType = exports.ParameterTier = exports.ParametersFilterKey = exports.OpsItemStatus = void 0;
    exports.ParameterFilterSensitiveLog = exports.GetMaintenanceWindowTaskResultFilterSensitiveLog = exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog = exports.MaintenanceWindowLambdaParametersFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = exports.GetMaintenanceWindowResultFilterSensitiveLog = exports.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = exports.BaselineOverrideFilterSensitiveLog = exports.AssociationVersionLimitExceeded = exports.StopType = exports.InvalidAutomationStatusUpdateException = exports.TargetNotConnected = exports.AutomationDefinitionNotApprovedException = exports.InvalidAutomationExecutionParametersException = exports.AutomationExecutionLimitExceededException = exports.AutomationDefinitionVersionNotFoundException = exports.AutomationDefinitionNotFoundException = exports.InvalidAssociation = exports.InvalidRole = exports.InvalidOutputFolder = exports.InvalidNotificationConfig = exports.SignalType = exports.InvalidAutomationSignalException = exports.AutomationStepNotFoundException = exports.FeatureNotAvailableException = exports.ResourcePolicyLimitExceededException = exports.UnsupportedParameterType = exports.PoliciesLimitExceededException = exports.ParameterPatternMismatchException = exports.ParameterMaxVersionLimitExceeded = exports.ParameterLimitExceeded = exports.ParameterAlreadyExists = exports.InvalidPolicyTypeException = exports.InvalidPolicyAttributeException = exports.InvalidAllowedPatternException = exports.IncompatiblePolicyException = exports.HierarchyTypeMismatchException = exports.HierarchyLevelLimitExceededException = exports.UnsupportedInventorySchemaVersionException = exports.UnsupportedInventoryItemContextException = exports.SubTypeCountLimitExceededException = exports.ItemContentMismatchException = exports.InvalidInventoryItemContextException = exports.CustomSchemaCountLimitExceededException = exports.TotalSizeLimitExceededException = exports.ComplianceUploadType = exports.ItemSizeLimitExceededException = void 0;
    exports.SendCommandResultFilterSensitiveLog = exports.SendCommandRequestFilterSensitiveLog = exports.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = exports.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = exports.PutParameterRequestFilterSensitiveLog = exports.ListCommandsResultFilterSensitiveLog = exports.CommandFilterSensitiveLog = exports.ListAssociationVersionsResultFilterSensitiveLog = exports.AssociationVersionInfoFilterSensitiveLog = exports.GetPatchBaselineResultFilterSensitiveLog = exports.GetParametersByPathResultFilterSensitiveLog = exports.GetParametersResultFilterSensitiveLog = exports.GetParameterHistoryResultFilterSensitiveLog = exports.ParameterHistoryFilterSensitiveLog = exports.GetParameterResultFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var models_0_1 = require_models_05();
    var SSMServiceException_1 = require_SSMServiceException();
    exports.OpsItemStatus = {
      APPROVED: "Approved",
      CANCELLED: "Cancelled",
      CANCELLING: "Cancelling",
      CHANGE_CALENDAR_OVERRIDE_APPROVED: "ChangeCalendarOverrideApproved",
      CHANGE_CALENDAR_OVERRIDE_REJECTED: "ChangeCalendarOverrideRejected",
      CLOSED: "Closed",
      COMPLETED_WITH_FAILURE: "CompletedWithFailure",
      COMPLETED_WITH_SUCCESS: "CompletedWithSuccess",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      OPEN: "Open",
      PENDING: "Pending",
      PENDING_APPROVAL: "PendingApproval",
      PENDING_CHANGE_CALENDAR_OVERRIDE: "PendingChangeCalendarOverride",
      REJECTED: "Rejected",
      RESOLVED: "Resolved",
      RUNBOOK_IN_PROGRESS: "RunbookInProgress",
      SCHEDULED: "Scheduled",
      TIMED_OUT: "TimedOut"
    };
    exports.ParametersFilterKey = {
      KEY_ID: "KeyId",
      NAME: "Name",
      TYPE: "Type"
    };
    exports.ParameterTier = {
      ADVANCED: "Advanced",
      INTELLIGENT_TIERING: "Intelligent-Tiering",
      STANDARD: "Standard"
    };
    exports.ParameterType = {
      SECURE_STRING: "SecureString",
      STRING: "String",
      STRING_LIST: "StringList"
    };
    var InvalidFilterOption = class _InvalidFilterOption extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterOption",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterOption";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidFilterOption.prototype);
      }
    };
    exports.InvalidFilterOption = InvalidFilterOption;
    exports.PatchSet = {
      Application: "APPLICATION",
      Os: "OS"
    };
    exports.PatchProperty = {
      PatchClassification: "CLASSIFICATION",
      PatchMsrcSeverity: "MSRC_SEVERITY",
      PatchPriority: "PRIORITY",
      PatchProductFamily: "PRODUCT_FAMILY",
      PatchSeverity: "SEVERITY",
      Product: "PRODUCT"
    };
    exports.SessionFilterKey = {
      INVOKED_AFTER: "InvokedAfter",
      INVOKED_BEFORE: "InvokedBefore",
      OWNER: "Owner",
      SESSION_ID: "SessionId",
      STATUS: "Status",
      TARGET_ID: "Target"
    };
    exports.SessionState = {
      ACTIVE: "Active",
      HISTORY: "History"
    };
    exports.SessionStatus = {
      CONNECTED: "Connected",
      CONNECTING: "Connecting",
      DISCONNECTED: "Disconnected",
      FAILED: "Failed",
      TERMINATED: "Terminated",
      TERMINATING: "Terminating"
    };
    var OpsItemRelatedItemAssociationNotFoundException = class _OpsItemRelatedItemAssociationNotFoundException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAssociationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAssociationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsItemRelatedItemAssociationNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OpsItemRelatedItemAssociationNotFoundException = OpsItemRelatedItemAssociationNotFoundException;
    exports.CalendarState = {
      CLOSED: "CLOSED",
      OPEN: "OPEN"
    };
    var InvalidDocumentType = class _InvalidDocumentType extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidDocumentType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentType = InvalidDocumentType;
    var UnsupportedCalendarException = class _UnsupportedCalendarException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedCalendarException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedCalendarException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedCalendarException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedCalendarException = UnsupportedCalendarException;
    exports.CommandInvocationStatus = {
      CANCELLED: "Cancelled",
      CANCELLING: "Cancelling",
      DELAYED: "Delayed",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      PENDING: "Pending",
      SUCCESS: "Success",
      TIMED_OUT: "TimedOut"
    };
    var InvalidPluginName = class _InvalidPluginName extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPluginName",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPluginName";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidPluginName.prototype);
      }
    };
    exports.InvalidPluginName = InvalidPluginName;
    var InvocationDoesNotExist = class _InvocationDoesNotExist extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvocationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "InvocationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvocationDoesNotExist.prototype);
      }
    };
    exports.InvocationDoesNotExist = InvocationDoesNotExist;
    exports.ConnectionStatus = {
      CONNECTED: "Connected",
      NOT_CONNECTED: "NotConnected"
    };
    var UnsupportedFeatureRequiredException = class _UnsupportedFeatureRequiredException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedFeatureRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedFeatureRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedFeatureRequiredException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedFeatureRequiredException = UnsupportedFeatureRequiredException;
    exports.AttachmentHashType = {
      SHA256: "Sha256"
    };
    exports.InventoryQueryOperatorType = {
      BEGIN_WITH: "BeginWith",
      EQUAL: "Equal",
      EXISTS: "Exists",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan",
      NOT_EQUAL: "NotEqual"
    };
    var InvalidAggregatorException = class _InvalidAggregatorException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAggregatorException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAggregatorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAggregatorException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAggregatorException = InvalidAggregatorException;
    var InvalidInventoryGroupException = class _InvalidInventoryGroupException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryGroupException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInventoryGroupException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryGroupException = InvalidInventoryGroupException;
    var InvalidResultAttributeException = class _InvalidResultAttributeException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResultAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResultAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidResultAttributeException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidResultAttributeException = InvalidResultAttributeException;
    exports.InventoryAttributeDataType = {
      NUMBER: "number",
      STRING: "string"
    };
    exports.NotificationEvent = {
      ALL: "All",
      CANCELLED: "Cancelled",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      SUCCESS: "Success",
      TIMED_OUT: "TimedOut"
    };
    exports.NotificationType = {
      Command: "Command",
      Invocation: "Invocation"
    };
    exports.OpsFilterOperatorType = {
      BEGIN_WITH: "BeginWith",
      EQUAL: "Equal",
      EXISTS: "Exists",
      GREATER_THAN: "GreaterThan",
      LESS_THAN: "LessThan",
      NOT_EQUAL: "NotEqual"
    };
    var InvalidKeyId = class _InvalidKeyId extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidKeyId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidKeyId";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidKeyId.prototype);
      }
    };
    exports.InvalidKeyId = InvalidKeyId;
    var ParameterVersionNotFound = class _ParameterVersionNotFound extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterVersionNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterVersionNotFound.prototype);
      }
    };
    exports.ParameterVersionNotFound = ParameterVersionNotFound;
    var ServiceSettingNotFound = class _ServiceSettingNotFound extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ServiceSettingNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceSettingNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ServiceSettingNotFound.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ServiceSettingNotFound = ServiceSettingNotFound;
    var ParameterVersionLabelLimitExceeded = class _ParameterVersionLabelLimitExceeded extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterVersionLabelLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionLabelLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterVersionLabelLimitExceeded.prototype);
      }
    };
    exports.ParameterVersionLabelLimitExceeded = ParameterVersionLabelLimitExceeded;
    exports.AssociationFilterKey = {
      AssociationId: "AssociationId",
      AssociationName: "AssociationName",
      InstanceId: "InstanceId",
      LastExecutedAfter: "LastExecutedAfter",
      LastExecutedBefore: "LastExecutedBefore",
      Name: "Name",
      ResourceGroupName: "ResourceGroupName",
      Status: "AssociationStatusName"
    };
    exports.CommandFilterKey = {
      DOCUMENT_NAME: "DocumentName",
      EXECUTION_STAGE: "ExecutionStage",
      INVOKED_AFTER: "InvokedAfter",
      INVOKED_BEFORE: "InvokedBefore",
      STATUS: "Status"
    };
    exports.CommandPluginStatus = {
      CANCELLED: "Cancelled",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      PENDING: "Pending",
      SUCCESS: "Success",
      TIMED_OUT: "TimedOut"
    };
    exports.CommandStatus = {
      CANCELLED: "Cancelled",
      CANCELLING: "Cancelling",
      FAILED: "Failed",
      IN_PROGRESS: "InProgress",
      PENDING: "Pending",
      SUCCESS: "Success",
      TIMED_OUT: "TimedOut"
    };
    exports.ComplianceQueryOperatorType = {
      BeginWith: "BEGIN_WITH",
      Equal: "EQUAL",
      GreaterThan: "GREATER_THAN",
      LessThan: "LESS_THAN",
      NotEqual: "NOT_EQUAL"
    };
    exports.ComplianceSeverity = {
      Critical: "CRITICAL",
      High: "HIGH",
      Informational: "INFORMATIONAL",
      Low: "LOW",
      Medium: "MEDIUM",
      Unspecified: "UNSPECIFIED"
    };
    exports.ComplianceStatus = {
      Compliant: "COMPLIANT",
      NonCompliant: "NON_COMPLIANT"
    };
    exports.DocumentMetadataEnum = {
      DocumentReviews: "DocumentReviews"
    };
    exports.DocumentReviewCommentType = {
      Comment: "Comment"
    };
    exports.DocumentFilterKey = {
      DocumentType: "DocumentType",
      Name: "Name",
      Owner: "Owner",
      PlatformTypes: "PlatformTypes"
    };
    exports.OpsItemEventFilterKey = {
      OPSITEM_ID: "OpsItemId"
    };
    exports.OpsItemEventFilterOperator = {
      EQUAL: "Equal"
    };
    exports.OpsItemRelatedItemsFilterKey = {
      ASSOCIATION_ID: "AssociationId",
      RESOURCE_TYPE: "ResourceType",
      RESOURCE_URI: "ResourceUri"
    };
    exports.OpsItemRelatedItemsFilterOperator = {
      EQUAL: "Equal"
    };
    exports.LastResourceDataSyncStatus = {
      FAILED: "Failed",
      INPROGRESS: "InProgress",
      SUCCESSFUL: "Successful"
    };
    var DocumentPermissionLimit = class _DocumentPermissionLimit extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentPermissionLimit",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentPermissionLimit";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DocumentPermissionLimit.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentPermissionLimit = DocumentPermissionLimit;
    var ComplianceTypeCountLimitExceededException = class _ComplianceTypeCountLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ComplianceTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ComplianceTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ComplianceTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ComplianceTypeCountLimitExceededException = ComplianceTypeCountLimitExceededException;
    var InvalidItemContentException = class _InvalidItemContentException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidItemContentException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidItemContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidItemContentException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.InvalidItemContentException = InvalidItemContentException;
    var ItemSizeLimitExceededException = class _ItemSizeLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ItemSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ItemSizeLimitExceededException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.ItemSizeLimitExceededException = ItemSizeLimitExceededException;
    exports.ComplianceUploadType = {
      Complete: "COMPLETE",
      Partial: "PARTIAL"
    };
    var TotalSizeLimitExceededException = class _TotalSizeLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TotalSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TotalSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TotalSizeLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TotalSizeLimitExceededException = TotalSizeLimitExceededException;
    var CustomSchemaCountLimitExceededException = class _CustomSchemaCountLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "CustomSchemaCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomSchemaCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CustomSchemaCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.CustomSchemaCountLimitExceededException = CustomSchemaCountLimitExceededException;
    var InvalidInventoryItemContextException = class _InvalidInventoryItemContextException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidInventoryItemContextException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryItemContextException = InvalidInventoryItemContextException;
    var ItemContentMismatchException = class _ItemContentMismatchException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ItemContentMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemContentMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ItemContentMismatchException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.ItemContentMismatchException = ItemContentMismatchException;
    var SubTypeCountLimitExceededException = class _SubTypeCountLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "SubTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "SubTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SubTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.SubTypeCountLimitExceededException = SubTypeCountLimitExceededException;
    var UnsupportedInventoryItemContextException = class _UnsupportedInventoryItemContextException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedInventoryItemContextException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedInventoryItemContextException = UnsupportedInventoryItemContextException;
    var UnsupportedInventorySchemaVersionException = class _UnsupportedInventorySchemaVersionException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedInventorySchemaVersionException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventorySchemaVersionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedInventorySchemaVersionException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedInventorySchemaVersionException = UnsupportedInventorySchemaVersionException;
    var HierarchyLevelLimitExceededException = class _HierarchyLevelLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "HierarchyLevelLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyLevelLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _HierarchyLevelLimitExceededException.prototype);
      }
    };
    exports.HierarchyLevelLimitExceededException = HierarchyLevelLimitExceededException;
    var HierarchyTypeMismatchException = class _HierarchyTypeMismatchException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "HierarchyTypeMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _HierarchyTypeMismatchException.prototype);
      }
    };
    exports.HierarchyTypeMismatchException = HierarchyTypeMismatchException;
    var IncompatiblePolicyException = class _IncompatiblePolicyException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "IncompatiblePolicyException",
          $fault: "client",
          ...opts
        });
        this.name = "IncompatiblePolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IncompatiblePolicyException.prototype);
      }
    };
    exports.IncompatiblePolicyException = IncompatiblePolicyException;
    var InvalidAllowedPatternException = class _InvalidAllowedPatternException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAllowedPatternException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAllowedPatternException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAllowedPatternException.prototype);
      }
    };
    exports.InvalidAllowedPatternException = InvalidAllowedPatternException;
    var InvalidPolicyAttributeException = class _InvalidPolicyAttributeException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPolicyAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidPolicyAttributeException.prototype);
      }
    };
    exports.InvalidPolicyAttributeException = InvalidPolicyAttributeException;
    var InvalidPolicyTypeException = class _InvalidPolicyTypeException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPolicyTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidPolicyTypeException.prototype);
      }
    };
    exports.InvalidPolicyTypeException = InvalidPolicyTypeException;
    var ParameterAlreadyExists = class _ParameterAlreadyExists extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterAlreadyExists.prototype);
      }
    };
    exports.ParameterAlreadyExists = ParameterAlreadyExists;
    var ParameterLimitExceeded = class _ParameterLimitExceeded extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterLimitExceeded.prototype);
      }
    };
    exports.ParameterLimitExceeded = ParameterLimitExceeded;
    var ParameterMaxVersionLimitExceeded = class _ParameterMaxVersionLimitExceeded extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterMaxVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterMaxVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterMaxVersionLimitExceeded.prototype);
      }
    };
    exports.ParameterMaxVersionLimitExceeded = ParameterMaxVersionLimitExceeded;
    var ParameterPatternMismatchException = class _ParameterPatternMismatchException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterPatternMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterPatternMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ParameterPatternMismatchException.prototype);
      }
    };
    exports.ParameterPatternMismatchException = ParameterPatternMismatchException;
    var PoliciesLimitExceededException = class _PoliciesLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "PoliciesLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "PoliciesLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PoliciesLimitExceededException.prototype);
      }
    };
    exports.PoliciesLimitExceededException = PoliciesLimitExceededException;
    var UnsupportedParameterType = class _UnsupportedParameterType extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedParameterType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedParameterType";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedParameterType.prototype);
      }
    };
    exports.UnsupportedParameterType = UnsupportedParameterType;
    var ResourcePolicyLimitExceededException = class _ResourcePolicyLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourcePolicyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourcePolicyLimitExceededException.prototype);
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
      }
    };
    exports.ResourcePolicyLimitExceededException = ResourcePolicyLimitExceededException;
    var FeatureNotAvailableException = class _FeatureNotAvailableException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "FeatureNotAvailableException",
          $fault: "client",
          ...opts
        });
        this.name = "FeatureNotAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _FeatureNotAvailableException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.FeatureNotAvailableException = FeatureNotAvailableException;
    var AutomationStepNotFoundException = class _AutomationStepNotFoundException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationStepNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationStepNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationStepNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationStepNotFoundException = AutomationStepNotFoundException;
    var InvalidAutomationSignalException = class _InvalidAutomationSignalException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationSignalException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationSignalException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAutomationSignalException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationSignalException = InvalidAutomationSignalException;
    exports.SignalType = {
      APPROVE: "Approve",
      REJECT: "Reject",
      RESUME: "Resume",
      START_STEP: "StartStep",
      STOP_STEP: "StopStep"
    };
    var InvalidNotificationConfig = class _InvalidNotificationConfig extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidNotificationConfig",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNotificationConfig";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidNotificationConfig.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidNotificationConfig = InvalidNotificationConfig;
    var InvalidOutputFolder = class _InvalidOutputFolder extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOutputFolder",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputFolder";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidOutputFolder.prototype);
      }
    };
    exports.InvalidOutputFolder = InvalidOutputFolder;
    var InvalidRole = class _InvalidRole extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidRole",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRole";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRole.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidRole = InvalidRole;
    var InvalidAssociation = class _InvalidAssociation extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAssociation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociation";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAssociation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAssociation = InvalidAssociation;
    var AutomationDefinitionNotFoundException = class _AutomationDefinitionNotFoundException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationDefinitionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionNotFoundException = AutomationDefinitionNotFoundException;
    var AutomationDefinitionVersionNotFoundException = class _AutomationDefinitionVersionNotFoundException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionVersionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionVersionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationDefinitionVersionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionVersionNotFoundException = AutomationDefinitionVersionNotFoundException;
    var AutomationExecutionLimitExceededException = class _AutomationExecutionLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationExecutionLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationExecutionLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationExecutionLimitExceededException = AutomationExecutionLimitExceededException;
    var InvalidAutomationExecutionParametersException = class _InvalidAutomationExecutionParametersException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationExecutionParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationExecutionParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAutomationExecutionParametersException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationExecutionParametersException = InvalidAutomationExecutionParametersException;
    var AutomationDefinitionNotApprovedException = class _AutomationDefinitionNotApprovedException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotApprovedException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotApprovedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AutomationDefinitionNotApprovedException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionNotApprovedException = AutomationDefinitionNotApprovedException;
    var TargetNotConnected = class _TargetNotConnected extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TargetNotConnected",
          $fault: "client",
          ...opts
        });
        this.name = "TargetNotConnected";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TargetNotConnected.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TargetNotConnected = TargetNotConnected;
    var InvalidAutomationStatusUpdateException = class _InvalidAutomationStatusUpdateException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationStatusUpdateException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationStatusUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAutomationStatusUpdateException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationStatusUpdateException = InvalidAutomationStatusUpdateException;
    exports.StopType = {
      CANCEL: "Cancel",
      COMPLETE: "Complete"
    };
    var AssociationVersionLimitExceeded = class _AssociationVersionLimitExceeded extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AssociationVersionLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationVersionLimitExceeded = AssociationVersionLimitExceeded;
    var BaselineOverrideFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.BaselineOverrideFilterSensitiveLog = BaselineOverrideFilterSensitiveLog;
    var GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog;
    var GetMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetMaintenanceWindowResultFilterSensitiveLog = GetMaintenanceWindowResultFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog;
    var MaintenanceWindowLambdaParametersFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowLambdaParametersFilterSensitiveLog = MaintenanceWindowLambdaParametersFilterSensitiveLog;
    var MaintenanceWindowRunCommandParametersFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog = MaintenanceWindowRunCommandParametersFilterSensitiveLog;
    var MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Input && { Input: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = MaintenanceWindowStepFunctionsParametersFilterSensitiveLog;
    var MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RunCommand && { RunCommand: (0, exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog)(obj.RunCommand) },
      ...obj.StepFunctions && {
        StepFunctions: (0, exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog)(obj.StepFunctions)
      },
      ...obj.Lambda && { Lambda: (0, exports.MaintenanceWindowLambdaParametersFilterSensitiveLog)(obj.Lambda) }
    });
    exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = MaintenanceWindowTaskInvocationParametersFilterSensitiveLog;
    var GetMaintenanceWindowTaskResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetMaintenanceWindowTaskResultFilterSensitiveLog = GetMaintenanceWindowTaskResultFilterSensitiveLog;
    var ParameterFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ParameterFilterSensitiveLog = ParameterFilterSensitiveLog;
    var GetParameterResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameter && { Parameter: (0, exports.ParameterFilterSensitiveLog)(obj.Parameter) }
    });
    exports.GetParameterResultFilterSensitiveLog = GetParameterResultFilterSensitiveLog;
    var ParameterHistoryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ParameterHistoryFilterSensitiveLog = ParameterHistoryFilterSensitiveLog;
    var GetParameterHistoryResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterHistoryFilterSensitiveLog)(item)) }
    });
    exports.GetParameterHistoryResultFilterSensitiveLog = GetParameterHistoryResultFilterSensitiveLog;
    var GetParametersResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterFilterSensitiveLog)(item)) }
    });
    exports.GetParametersResultFilterSensitiveLog = GetParametersResultFilterSensitiveLog;
    var GetParametersByPathResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterFilterSensitiveLog)(item)) }
    });
    exports.GetParametersByPathResultFilterSensitiveLog = GetParametersByPathResultFilterSensitiveLog;
    var GetPatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.GetPatchBaselineResultFilterSensitiveLog = GetPatchBaselineResultFilterSensitiveLog;
    var AssociationVersionInfoFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssociationVersionInfoFilterSensitiveLog = AssociationVersionInfoFilterSensitiveLog;
    var ListAssociationVersionsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationVersions && {
        AssociationVersions: obj.AssociationVersions.map((item) => (0, exports.AssociationVersionInfoFilterSensitiveLog)(item))
      }
    });
    exports.ListAssociationVersionsResultFilterSensitiveLog = ListAssociationVersionsResultFilterSensitiveLog;
    var CommandFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CommandFilterSensitiveLog = CommandFilterSensitiveLog;
    var ListCommandsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Commands && { Commands: obj.Commands.map((item) => (0, exports.CommandFilterSensitiveLog)(item)) }
    });
    exports.ListCommandsResultFilterSensitiveLog = ListCommandsResultFilterSensitiveLog;
    var PutParameterRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PutParameterRequestFilterSensitiveLog = PutParameterRequestFilterSensitiveLog;
    var RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog;
    var RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog;
    var SendCommandRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SendCommandRequestFilterSensitiveLog = SendCommandRequestFilterSensitiveLog;
    var SendCommandResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Command && { Command: (0, exports.CommandFilterSensitiveLog)(obj.Command) }
    });
    exports.SendCommandResultFilterSensitiveLog = SendCommandResultFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_2.js
var require_models_2 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdatePatchBaselineResultFilterSensitiveLog = exports.UpdatePatchBaselineRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowTaskResultFilterSensitiveLog = exports.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowTargetResultFilterSensitiveLog = exports.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowResultFilterSensitiveLog = exports.UpdateMaintenanceWindowRequestFilterSensitiveLog = exports.UpdateAssociationStatusResultFilterSensitiveLog = exports.UpdateAssociationResultFilterSensitiveLog = exports.UpdateAssociationRequestFilterSensitiveLog = exports.ResourceDataSyncConflictException = exports.OpsMetadataKeyLimitExceededException = exports.DocumentReviewAction = exports.DuplicateDocumentVersionName = exports.DuplicateDocumentContent = exports.DocumentVersionLimitExceeded = exports.StatusUnchanged = exports.InvalidUpdate = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var models_0_1 = require_models_05();
    var models_1_1 = require_models_12();
    var SSMServiceException_1 = require_SSMServiceException();
    var InvalidUpdate = class _InvalidUpdate extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidUpdate",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUpdate";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidUpdate.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidUpdate = InvalidUpdate;
    var StatusUnchanged = class _StatusUnchanged extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "StatusUnchanged",
          $fault: "client",
          ...opts
        });
        this.name = "StatusUnchanged";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StatusUnchanged.prototype);
      }
    };
    exports.StatusUnchanged = StatusUnchanged;
    var DocumentVersionLimitExceeded = class _DocumentVersionLimitExceeded extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DocumentVersionLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentVersionLimitExceeded = DocumentVersionLimitExceeded;
    var DuplicateDocumentContent = class _DuplicateDocumentContent extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateDocumentContent.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DuplicateDocumentContent = DuplicateDocumentContent;
    var DuplicateDocumentVersionName = class _DuplicateDocumentVersionName extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateDocumentVersionName",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentVersionName";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DuplicateDocumentVersionName.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DuplicateDocumentVersionName = DuplicateDocumentVersionName;
    exports.DocumentReviewAction = {
      Approve: "Approve",
      Reject: "Reject",
      SendForReview: "SendForReview",
      UpdateReview: "UpdateReview"
    };
    var OpsMetadataKeyLimitExceededException = class _OpsMetadataKeyLimitExceededException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataKeyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataKeyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OpsMetadataKeyLimitExceededException.prototype);
      }
    };
    exports.OpsMetadataKeyLimitExceededException = OpsMetadataKeyLimitExceededException;
    var ResourceDataSyncConflictException = class _ResourceDataSyncConflictException extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceDataSyncConflictException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncConflictException = ResourceDataSyncConflictException;
    var UpdateAssociationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateAssociationRequestFilterSensitiveLog = UpdateAssociationRequestFilterSensitiveLog;
    var UpdateAssociationResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, models_0_1.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    });
    exports.UpdateAssociationResultFilterSensitiveLog = UpdateAssociationResultFilterSensitiveLog;
    var UpdateAssociationStatusResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, models_0_1.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    });
    exports.UpdateAssociationStatusResultFilterSensitiveLog = UpdateAssociationStatusResultFilterSensitiveLog;
    var UpdateMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowRequestFilterSensitiveLog = UpdateMaintenanceWindowRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowResultFilterSensitiveLog = UpdateMaintenanceWindowResultFilterSensitiveLog;
    var UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = UpdateMaintenanceWindowTargetRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowTargetResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowTargetResultFilterSensitiveLog = UpdateMaintenanceWindowTargetResultFilterSensitiveLog;
    var UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, models_1_1.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = UpdateMaintenanceWindowTaskRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowTaskResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, models_1_1.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowTaskResultFilterSensitiveLog = UpdateMaintenanceWindowTaskResultFilterSensitiveLog;
    var UpdatePatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.UpdatePatchBaselineRequestFilterSensitiveLog = UpdatePatchBaselineRequestFilterSensitiveLog;
    var UpdatePatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.UpdatePatchBaselineResultFilterSensitiveLog = UpdatePatchBaselineResultFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/protocols/Aws_json1_1.js
var require_Aws_json1_1 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/protocols/Aws_json1_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.se_DescribeMaintenanceWindowScheduleCommand = exports.se_DescribeMaintenanceWindowsCommand = exports.se_DescribeMaintenanceWindowExecutionTasksCommand = exports.se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.se_DescribeMaintenanceWindowExecutionsCommand = exports.se_DescribeInventoryDeletionsCommand = exports.se_DescribeInstancePatchStatesForPatchGroupCommand = exports.se_DescribeInstancePatchStatesCommand = exports.se_DescribeInstancePatchesCommand = exports.se_DescribeInstanceInformationCommand = exports.se_DescribeInstanceAssociationsStatusCommand = exports.se_DescribeEffectivePatchesForPatchBaselineCommand = exports.se_DescribeEffectiveInstanceAssociationsCommand = exports.se_DescribeDocumentPermissionCommand = exports.se_DescribeDocumentCommand = exports.se_DescribeAvailablePatchesCommand = exports.se_DescribeAutomationStepExecutionsCommand = exports.se_DescribeAutomationExecutionsCommand = exports.se_DescribeAssociationExecutionTargetsCommand = exports.se_DescribeAssociationExecutionsCommand = exports.se_DescribeAssociationCommand = exports.se_DescribeActivationsCommand = exports.se_DeregisterTaskFromMaintenanceWindowCommand = exports.se_DeregisterTargetFromMaintenanceWindowCommand = exports.se_DeregisterPatchBaselineForPatchGroupCommand = exports.se_DeregisterManagedInstanceCommand = exports.se_DeleteResourcePolicyCommand = exports.se_DeleteResourceDataSyncCommand = exports.se_DeletePatchBaselineCommand = exports.se_DeleteParametersCommand = exports.se_DeleteParameterCommand = exports.se_DeleteOpsMetadataCommand = exports.se_DeleteMaintenanceWindowCommand = exports.se_DeleteInventoryCommand = exports.se_DeleteDocumentCommand = exports.se_DeleteAssociationCommand = exports.se_DeleteActivationCommand = exports.se_CreateResourceDataSyncCommand = exports.se_CreatePatchBaselineCommand = exports.se_CreateOpsMetadataCommand = exports.se_CreateOpsItemCommand = exports.se_CreateMaintenanceWindowCommand = exports.se_CreateDocumentCommand = exports.se_CreateAssociationBatchCommand = exports.se_CreateAssociationCommand = exports.se_CreateActivationCommand = exports.se_CancelMaintenanceWindowExecutionCommand = exports.se_CancelCommandCommand = exports.se_AssociateOpsItemRelatedItemCommand = exports.se_AddTagsToResourceCommand = void 0;
    exports.se_ListOpsMetadataCommand = exports.se_ListOpsItemRelatedItemsCommand = exports.se_ListOpsItemEventsCommand = exports.se_ListInventoryEntriesCommand = exports.se_ListDocumentVersionsCommand = exports.se_ListDocumentsCommand = exports.se_ListDocumentMetadataHistoryCommand = exports.se_ListComplianceSummariesCommand = exports.se_ListComplianceItemsCommand = exports.se_ListCommandsCommand = exports.se_ListCommandInvocationsCommand = exports.se_ListAssociationVersionsCommand = exports.se_ListAssociationsCommand = exports.se_LabelParameterVersionCommand = exports.se_GetServiceSettingCommand = exports.se_GetResourcePoliciesCommand = exports.se_GetPatchBaselineForPatchGroupCommand = exports.se_GetPatchBaselineCommand = exports.se_GetParametersByPathCommand = exports.se_GetParametersCommand = exports.se_GetParameterHistoryCommand = exports.se_GetParameterCommand = exports.se_GetOpsSummaryCommand = exports.se_GetOpsMetadataCommand = exports.se_GetOpsItemCommand = exports.se_GetMaintenanceWindowTaskCommand = exports.se_GetMaintenanceWindowExecutionTaskInvocationCommand = exports.se_GetMaintenanceWindowExecutionTaskCommand = exports.se_GetMaintenanceWindowExecutionCommand = exports.se_GetMaintenanceWindowCommand = exports.se_GetInventorySchemaCommand = exports.se_GetInventoryCommand = exports.se_GetDocumentCommand = exports.se_GetDeployablePatchSnapshotForInstanceCommand = exports.se_GetDefaultPatchBaselineCommand = exports.se_GetConnectionStatusCommand = exports.se_GetCommandInvocationCommand = exports.se_GetCalendarStateCommand = exports.se_GetAutomationExecutionCommand = exports.se_DisassociateOpsItemRelatedItemCommand = exports.se_DescribeSessionsCommand = exports.se_DescribePatchPropertiesCommand = exports.se_DescribePatchGroupStateCommand = exports.se_DescribePatchGroupsCommand = exports.se_DescribePatchBaselinesCommand = exports.se_DescribeParametersCommand = exports.se_DescribeOpsItemsCommand = exports.se_DescribeMaintenanceWindowTasksCommand = exports.se_DescribeMaintenanceWindowTargetsCommand = exports.se_DescribeMaintenanceWindowsForTargetCommand = void 0;
    exports.de_CreatePatchBaselineCommand = exports.de_CreateOpsMetadataCommand = exports.de_CreateOpsItemCommand = exports.de_CreateMaintenanceWindowCommand = exports.de_CreateDocumentCommand = exports.de_CreateAssociationBatchCommand = exports.de_CreateAssociationCommand = exports.de_CreateActivationCommand = exports.de_CancelMaintenanceWindowExecutionCommand = exports.de_CancelCommandCommand = exports.de_AssociateOpsItemRelatedItemCommand = exports.de_AddTagsToResourceCommand = exports.se_UpdateServiceSettingCommand = exports.se_UpdateResourceDataSyncCommand = exports.se_UpdatePatchBaselineCommand = exports.se_UpdateOpsMetadataCommand = exports.se_UpdateOpsItemCommand = exports.se_UpdateManagedInstanceRoleCommand = exports.se_UpdateMaintenanceWindowTaskCommand = exports.se_UpdateMaintenanceWindowTargetCommand = exports.se_UpdateMaintenanceWindowCommand = exports.se_UpdateDocumentMetadataCommand = exports.se_UpdateDocumentDefaultVersionCommand = exports.se_UpdateDocumentCommand = exports.se_UpdateAssociationStatusCommand = exports.se_UpdateAssociationCommand = exports.se_UnlabelParameterVersionCommand = exports.se_TerminateSessionCommand = exports.se_StopAutomationExecutionCommand = exports.se_StartSessionCommand = exports.se_StartChangeRequestExecutionCommand = exports.se_StartAutomationExecutionCommand = exports.se_StartAssociationsOnceCommand = exports.se_SendCommandCommand = exports.se_SendAutomationSignalCommand = exports.se_ResumeSessionCommand = exports.se_ResetServiceSettingCommand = exports.se_RemoveTagsFromResourceCommand = exports.se_RegisterTaskWithMaintenanceWindowCommand = exports.se_RegisterTargetWithMaintenanceWindowCommand = exports.se_RegisterPatchBaselineForPatchGroupCommand = exports.se_RegisterDefaultPatchBaselineCommand = exports.se_PutResourcePolicyCommand = exports.se_PutParameterCommand = exports.se_PutInventoryCommand = exports.se_PutComplianceItemsCommand = exports.se_ModifyDocumentPermissionCommand = exports.se_ListTagsForResourceCommand = exports.se_ListResourceDataSyncCommand = exports.se_ListResourceComplianceSummariesCommand = void 0;
    exports.de_GetAutomationExecutionCommand = exports.de_DisassociateOpsItemRelatedItemCommand = exports.de_DescribeSessionsCommand = exports.de_DescribePatchPropertiesCommand = exports.de_DescribePatchGroupStateCommand = exports.de_DescribePatchGroupsCommand = exports.de_DescribePatchBaselinesCommand = exports.de_DescribeParametersCommand = exports.de_DescribeOpsItemsCommand = exports.de_DescribeMaintenanceWindowTasksCommand = exports.de_DescribeMaintenanceWindowTargetsCommand = exports.de_DescribeMaintenanceWindowsForTargetCommand = exports.de_DescribeMaintenanceWindowScheduleCommand = exports.de_DescribeMaintenanceWindowsCommand = exports.de_DescribeMaintenanceWindowExecutionTasksCommand = exports.de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.de_DescribeMaintenanceWindowExecutionsCommand = exports.de_DescribeInventoryDeletionsCommand = exports.de_DescribeInstancePatchStatesForPatchGroupCommand = exports.de_DescribeInstancePatchStatesCommand = exports.de_DescribeInstancePatchesCommand = exports.de_DescribeInstanceInformationCommand = exports.de_DescribeInstanceAssociationsStatusCommand = exports.de_DescribeEffectivePatchesForPatchBaselineCommand = exports.de_DescribeEffectiveInstanceAssociationsCommand = exports.de_DescribeDocumentPermissionCommand = exports.de_DescribeDocumentCommand = exports.de_DescribeAvailablePatchesCommand = exports.de_DescribeAutomationStepExecutionsCommand = exports.de_DescribeAutomationExecutionsCommand = exports.de_DescribeAssociationExecutionTargetsCommand = exports.de_DescribeAssociationExecutionsCommand = exports.de_DescribeAssociationCommand = exports.de_DescribeActivationsCommand = exports.de_DeregisterTaskFromMaintenanceWindowCommand = exports.de_DeregisterTargetFromMaintenanceWindowCommand = exports.de_DeregisterPatchBaselineForPatchGroupCommand = exports.de_DeregisterManagedInstanceCommand = exports.de_DeleteResourcePolicyCommand = exports.de_DeleteResourceDataSyncCommand = exports.de_DeletePatchBaselineCommand = exports.de_DeleteParametersCommand = exports.de_DeleteParameterCommand = exports.de_DeleteOpsMetadataCommand = exports.de_DeleteMaintenanceWindowCommand = exports.de_DeleteInventoryCommand = exports.de_DeleteDocumentCommand = exports.de_DeleteAssociationCommand = exports.de_DeleteActivationCommand = exports.de_CreateResourceDataSyncCommand = void 0;
    exports.de_RegisterTaskWithMaintenanceWindowCommand = exports.de_RegisterTargetWithMaintenanceWindowCommand = exports.de_RegisterPatchBaselineForPatchGroupCommand = exports.de_RegisterDefaultPatchBaselineCommand = exports.de_PutResourcePolicyCommand = exports.de_PutParameterCommand = exports.de_PutInventoryCommand = exports.de_PutComplianceItemsCommand = exports.de_ModifyDocumentPermissionCommand = exports.de_ListTagsForResourceCommand = exports.de_ListResourceDataSyncCommand = exports.de_ListResourceComplianceSummariesCommand = exports.de_ListOpsMetadataCommand = exports.de_ListOpsItemRelatedItemsCommand = exports.de_ListOpsItemEventsCommand = exports.de_ListInventoryEntriesCommand = exports.de_ListDocumentVersionsCommand = exports.de_ListDocumentsCommand = exports.de_ListDocumentMetadataHistoryCommand = exports.de_ListComplianceSummariesCommand = exports.de_ListComplianceItemsCommand = exports.de_ListCommandsCommand = exports.de_ListCommandInvocationsCommand = exports.de_ListAssociationVersionsCommand = exports.de_ListAssociationsCommand = exports.de_LabelParameterVersionCommand = exports.de_GetServiceSettingCommand = exports.de_GetResourcePoliciesCommand = exports.de_GetPatchBaselineForPatchGroupCommand = exports.de_GetPatchBaselineCommand = exports.de_GetParametersByPathCommand = exports.de_GetParametersCommand = exports.de_GetParameterHistoryCommand = exports.de_GetParameterCommand = exports.de_GetOpsSummaryCommand = exports.de_GetOpsMetadataCommand = exports.de_GetOpsItemCommand = exports.de_GetMaintenanceWindowTaskCommand = exports.de_GetMaintenanceWindowExecutionTaskInvocationCommand = exports.de_GetMaintenanceWindowExecutionTaskCommand = exports.de_GetMaintenanceWindowExecutionCommand = exports.de_GetMaintenanceWindowCommand = exports.de_GetInventorySchemaCommand = exports.de_GetInventoryCommand = exports.de_GetDocumentCommand = exports.de_GetDeployablePatchSnapshotForInstanceCommand = exports.de_GetDefaultPatchBaselineCommand = exports.de_GetConnectionStatusCommand = exports.de_GetCommandInvocationCommand = exports.de_GetCalendarStateCommand = void 0;
    exports.de_UpdateServiceSettingCommand = exports.de_UpdateResourceDataSyncCommand = exports.de_UpdatePatchBaselineCommand = exports.de_UpdateOpsMetadataCommand = exports.de_UpdateOpsItemCommand = exports.de_UpdateManagedInstanceRoleCommand = exports.de_UpdateMaintenanceWindowTaskCommand = exports.de_UpdateMaintenanceWindowTargetCommand = exports.de_UpdateMaintenanceWindowCommand = exports.de_UpdateDocumentMetadataCommand = exports.de_UpdateDocumentDefaultVersionCommand = exports.de_UpdateDocumentCommand = exports.de_UpdateAssociationStatusCommand = exports.de_UpdateAssociationCommand = exports.de_UnlabelParameterVersionCommand = exports.de_TerminateSessionCommand = exports.de_StopAutomationExecutionCommand = exports.de_StartSessionCommand = exports.de_StartChangeRequestExecutionCommand = exports.de_StartAutomationExecutionCommand = exports.de_StartAssociationsOnceCommand = exports.de_SendCommandCommand = exports.de_SendAutomationSignalCommand = exports.de_ResumeSessionCommand = exports.de_ResetServiceSettingCommand = exports.de_RemoveTagsFromResourceCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var models_0_1 = require_models_05();
    var models_1_1 = require_models_12();
    var models_2_1 = require_models_2();
    var SSMServiceException_1 = require_SSMServiceException();
    var se_AddTagsToResourceCommand = async (input, context) => {
      const headers = sharedHeaders("AddTagsToResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_AddTagsToResourceCommand = se_AddTagsToResourceCommand;
    var se_AssociateOpsItemRelatedItemCommand = async (input, context) => {
      const headers = sharedHeaders("AssociateOpsItemRelatedItem");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_AssociateOpsItemRelatedItemCommand = se_AssociateOpsItemRelatedItemCommand;
    var se_CancelCommandCommand = async (input, context) => {
      const headers = sharedHeaders("CancelCommand");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CancelCommandCommand = se_CancelCommandCommand;
    var se_CancelMaintenanceWindowExecutionCommand = async (input, context) => {
      const headers = sharedHeaders("CancelMaintenanceWindowExecution");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CancelMaintenanceWindowExecutionCommand = se_CancelMaintenanceWindowExecutionCommand;
    var se_CreateActivationCommand = async (input, context) => {
      const headers = sharedHeaders("CreateActivation");
      let body;
      body = JSON.stringify(se_CreateActivationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateActivationCommand = se_CreateActivationCommand;
    var se_CreateAssociationCommand = async (input, context) => {
      const headers = sharedHeaders("CreateAssociation");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateAssociationCommand = se_CreateAssociationCommand;
    var se_CreateAssociationBatchCommand = async (input, context) => {
      const headers = sharedHeaders("CreateAssociationBatch");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateAssociationBatchCommand = se_CreateAssociationBatchCommand;
    var se_CreateDocumentCommand = async (input, context) => {
      const headers = sharedHeaders("CreateDocument");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateDocumentCommand = se_CreateDocumentCommand;
    var se_CreateMaintenanceWindowCommand = async (input, context) => {
      const headers = sharedHeaders("CreateMaintenanceWindow");
      let body;
      body = JSON.stringify(se_CreateMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateMaintenanceWindowCommand = se_CreateMaintenanceWindowCommand;
    var se_CreateOpsItemCommand = async (input, context) => {
      const headers = sharedHeaders("CreateOpsItem");
      let body;
      body = JSON.stringify(se_CreateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateOpsItemCommand = se_CreateOpsItemCommand;
    var se_CreateOpsMetadataCommand = async (input, context) => {
      const headers = sharedHeaders("CreateOpsMetadata");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateOpsMetadataCommand = se_CreateOpsMetadataCommand;
    var se_CreatePatchBaselineCommand = async (input, context) => {
      const headers = sharedHeaders("CreatePatchBaseline");
      let body;
      body = JSON.stringify(se_CreatePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreatePatchBaselineCommand = se_CreatePatchBaselineCommand;
    var se_CreateResourceDataSyncCommand = async (input, context) => {
      const headers = sharedHeaders("CreateResourceDataSync");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_CreateResourceDataSyncCommand = se_CreateResourceDataSyncCommand;
    var se_DeleteActivationCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteActivation");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteActivationCommand = se_DeleteActivationCommand;
    var se_DeleteAssociationCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteAssociation");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteAssociationCommand = se_DeleteAssociationCommand;
    var se_DeleteDocumentCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteDocument");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteDocumentCommand = se_DeleteDocumentCommand;
    var se_DeleteInventoryCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteInventory");
      let body;
      body = JSON.stringify(se_DeleteInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteInventoryCommand = se_DeleteInventoryCommand;
    var se_DeleteMaintenanceWindowCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteMaintenanceWindow");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteMaintenanceWindowCommand = se_DeleteMaintenanceWindowCommand;
    var se_DeleteOpsMetadataCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteOpsMetadata");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteOpsMetadataCommand = se_DeleteOpsMetadataCommand;
    var se_DeleteParameterCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteParameter");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteParameterCommand = se_DeleteParameterCommand;
    var se_DeleteParametersCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteParameters");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteParametersCommand = se_DeleteParametersCommand;
    var se_DeletePatchBaselineCommand = async (input, context) => {
      const headers = sharedHeaders("DeletePatchBaseline");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeletePatchBaselineCommand = se_DeletePatchBaselineCommand;
    var se_DeleteResourceDataSyncCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteResourceDataSync");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteResourceDataSyncCommand = se_DeleteResourceDataSyncCommand;
    var se_DeleteResourcePolicyCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteResourcePolicy");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeleteResourcePolicyCommand = se_DeleteResourcePolicyCommand;
    var se_DeregisterManagedInstanceCommand = async (input, context) => {
      const headers = sharedHeaders("DeregisterManagedInstance");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeregisterManagedInstanceCommand = se_DeregisterManagedInstanceCommand;
    var se_DeregisterPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = sharedHeaders("DeregisterPatchBaselineForPatchGroup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeregisterPatchBaselineForPatchGroupCommand = se_DeregisterPatchBaselineForPatchGroupCommand;
    var se_DeregisterTargetFromMaintenanceWindowCommand = async (input, context) => {
      const headers = sharedHeaders("DeregisterTargetFromMaintenanceWindow");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeregisterTargetFromMaintenanceWindowCommand = se_DeregisterTargetFromMaintenanceWindowCommand;
    var se_DeregisterTaskFromMaintenanceWindowCommand = async (input, context) => {
      const headers = sharedHeaders("DeregisterTaskFromMaintenanceWindow");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DeregisterTaskFromMaintenanceWindowCommand = se_DeregisterTaskFromMaintenanceWindowCommand;
    var se_DescribeActivationsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeActivations");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeActivationsCommand = se_DescribeActivationsCommand;
    var se_DescribeAssociationCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeAssociation");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeAssociationCommand = se_DescribeAssociationCommand;
    var se_DescribeAssociationExecutionsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeAssociationExecutions");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeAssociationExecutionsCommand = se_DescribeAssociationExecutionsCommand;
    var se_DescribeAssociationExecutionTargetsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeAssociationExecutionTargets");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeAssociationExecutionTargetsCommand = se_DescribeAssociationExecutionTargetsCommand;
    var se_DescribeAutomationExecutionsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeAutomationExecutions");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeAutomationExecutionsCommand = se_DescribeAutomationExecutionsCommand;
    var se_DescribeAutomationStepExecutionsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeAutomationStepExecutions");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeAutomationStepExecutionsCommand = se_DescribeAutomationStepExecutionsCommand;
    var se_DescribeAvailablePatchesCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeAvailablePatches");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeAvailablePatchesCommand = se_DescribeAvailablePatchesCommand;
    var se_DescribeDocumentCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeDocument");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeDocumentCommand = se_DescribeDocumentCommand;
    var se_DescribeDocumentPermissionCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeDocumentPermission");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeDocumentPermissionCommand = se_DescribeDocumentPermissionCommand;
    var se_DescribeEffectiveInstanceAssociationsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeEffectiveInstanceAssociations");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeEffectiveInstanceAssociationsCommand = se_DescribeEffectiveInstanceAssociationsCommand;
    var se_DescribeEffectivePatchesForPatchBaselineCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeEffectivePatchesForPatchBaseline");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeEffectivePatchesForPatchBaselineCommand = se_DescribeEffectivePatchesForPatchBaselineCommand;
    var se_DescribeInstanceAssociationsStatusCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeInstanceAssociationsStatus");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeInstanceAssociationsStatusCommand = se_DescribeInstanceAssociationsStatusCommand;
    var se_DescribeInstanceInformationCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeInstanceInformation");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeInstanceInformationCommand = se_DescribeInstanceInformationCommand;
    var se_DescribeInstancePatchesCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeInstancePatches");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeInstancePatchesCommand = se_DescribeInstancePatchesCommand;
    var se_DescribeInstancePatchStatesCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeInstancePatchStates");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeInstancePatchStatesCommand = se_DescribeInstancePatchStatesCommand;
    var se_DescribeInstancePatchStatesForPatchGroupCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeInstancePatchStatesForPatchGroup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeInstancePatchStatesForPatchGroupCommand = se_DescribeInstancePatchStatesForPatchGroupCommand;
    var se_DescribeInventoryDeletionsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeInventoryDeletions");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeInventoryDeletionsCommand = se_DescribeInventoryDeletionsCommand;
    var se_DescribeMaintenanceWindowExecutionsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowExecutions");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeMaintenanceWindowExecutionsCommand = se_DescribeMaintenanceWindowExecutionsCommand;
    var se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowExecutionTaskInvocations");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var se_DescribeMaintenanceWindowExecutionTasksCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowExecutionTasks");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeMaintenanceWindowExecutionTasksCommand = se_DescribeMaintenanceWindowExecutionTasksCommand;
    var se_DescribeMaintenanceWindowsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindows");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeMaintenanceWindowsCommand = se_DescribeMaintenanceWindowsCommand;
    var se_DescribeMaintenanceWindowScheduleCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowSchedule");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeMaintenanceWindowScheduleCommand = se_DescribeMaintenanceWindowScheduleCommand;
    var se_DescribeMaintenanceWindowsForTargetCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowsForTarget");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeMaintenanceWindowsForTargetCommand = se_DescribeMaintenanceWindowsForTargetCommand;
    var se_DescribeMaintenanceWindowTargetsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowTargets");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeMaintenanceWindowTargetsCommand = se_DescribeMaintenanceWindowTargetsCommand;
    var se_DescribeMaintenanceWindowTasksCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeMaintenanceWindowTasks");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeMaintenanceWindowTasksCommand = se_DescribeMaintenanceWindowTasksCommand;
    var se_DescribeOpsItemsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeOpsItems");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeOpsItemsCommand = se_DescribeOpsItemsCommand;
    var se_DescribeParametersCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeParameters");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeParametersCommand = se_DescribeParametersCommand;
    var se_DescribePatchBaselinesCommand = async (input, context) => {
      const headers = sharedHeaders("DescribePatchBaselines");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribePatchBaselinesCommand = se_DescribePatchBaselinesCommand;
    var se_DescribePatchGroupsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribePatchGroups");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribePatchGroupsCommand = se_DescribePatchGroupsCommand;
    var se_DescribePatchGroupStateCommand = async (input, context) => {
      const headers = sharedHeaders("DescribePatchGroupState");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribePatchGroupStateCommand = se_DescribePatchGroupStateCommand;
    var se_DescribePatchPropertiesCommand = async (input, context) => {
      const headers = sharedHeaders("DescribePatchProperties");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribePatchPropertiesCommand = se_DescribePatchPropertiesCommand;
    var se_DescribeSessionsCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeSessions");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DescribeSessionsCommand = se_DescribeSessionsCommand;
    var se_DisassociateOpsItemRelatedItemCommand = async (input, context) => {
      const headers = sharedHeaders("DisassociateOpsItemRelatedItem");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_DisassociateOpsItemRelatedItemCommand = se_DisassociateOpsItemRelatedItemCommand;
    var se_GetAutomationExecutionCommand = async (input, context) => {
      const headers = sharedHeaders("GetAutomationExecution");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetAutomationExecutionCommand = se_GetAutomationExecutionCommand;
    var se_GetCalendarStateCommand = async (input, context) => {
      const headers = sharedHeaders("GetCalendarState");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetCalendarStateCommand = se_GetCalendarStateCommand;
    var se_GetCommandInvocationCommand = async (input, context) => {
      const headers = sharedHeaders("GetCommandInvocation");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetCommandInvocationCommand = se_GetCommandInvocationCommand;
    var se_GetConnectionStatusCommand = async (input, context) => {
      const headers = sharedHeaders("GetConnectionStatus");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetConnectionStatusCommand = se_GetConnectionStatusCommand;
    var se_GetDefaultPatchBaselineCommand = async (input, context) => {
      const headers = sharedHeaders("GetDefaultPatchBaseline");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetDefaultPatchBaselineCommand = se_GetDefaultPatchBaselineCommand;
    var se_GetDeployablePatchSnapshotForInstanceCommand = async (input, context) => {
      const headers = sharedHeaders("GetDeployablePatchSnapshotForInstance");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetDeployablePatchSnapshotForInstanceCommand = se_GetDeployablePatchSnapshotForInstanceCommand;
    var se_GetDocumentCommand = async (input, context) => {
      const headers = sharedHeaders("GetDocument");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetDocumentCommand = se_GetDocumentCommand;
    var se_GetInventoryCommand = async (input, context) => {
      const headers = sharedHeaders("GetInventory");
      let body;
      body = JSON.stringify(se_GetInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetInventoryCommand = se_GetInventoryCommand;
    var se_GetInventorySchemaCommand = async (input, context) => {
      const headers = sharedHeaders("GetInventorySchema");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetInventorySchemaCommand = se_GetInventorySchemaCommand;
    var se_GetMaintenanceWindowCommand = async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindow");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetMaintenanceWindowCommand = se_GetMaintenanceWindowCommand;
    var se_GetMaintenanceWindowExecutionCommand = async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindowExecution");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetMaintenanceWindowExecutionCommand = se_GetMaintenanceWindowExecutionCommand;
    var se_GetMaintenanceWindowExecutionTaskCommand = async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindowExecutionTask");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetMaintenanceWindowExecutionTaskCommand = se_GetMaintenanceWindowExecutionTaskCommand;
    var se_GetMaintenanceWindowExecutionTaskInvocationCommand = async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindowExecutionTaskInvocation");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetMaintenanceWindowExecutionTaskInvocationCommand = se_GetMaintenanceWindowExecutionTaskInvocationCommand;
    var se_GetMaintenanceWindowTaskCommand = async (input, context) => {
      const headers = sharedHeaders("GetMaintenanceWindowTask");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetMaintenanceWindowTaskCommand = se_GetMaintenanceWindowTaskCommand;
    var se_GetOpsItemCommand = async (input, context) => {
      const headers = sharedHeaders("GetOpsItem");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetOpsItemCommand = se_GetOpsItemCommand;
    var se_GetOpsMetadataCommand = async (input, context) => {
      const headers = sharedHeaders("GetOpsMetadata");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetOpsMetadataCommand = se_GetOpsMetadataCommand;
    var se_GetOpsSummaryCommand = async (input, context) => {
      const headers = sharedHeaders("GetOpsSummary");
      let body;
      body = JSON.stringify(se_GetOpsSummaryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetOpsSummaryCommand = se_GetOpsSummaryCommand;
    var se_GetParameterCommand = async (input, context) => {
      const headers = sharedHeaders("GetParameter");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetParameterCommand = se_GetParameterCommand;
    var se_GetParameterHistoryCommand = async (input, context) => {
      const headers = sharedHeaders("GetParameterHistory");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetParameterHistoryCommand = se_GetParameterHistoryCommand;
    var se_GetParametersCommand = async (input, context) => {
      const headers = sharedHeaders("GetParameters");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetParametersCommand = se_GetParametersCommand;
    var se_GetParametersByPathCommand = async (input, context) => {
      const headers = sharedHeaders("GetParametersByPath");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetParametersByPathCommand = se_GetParametersByPathCommand;
    var se_GetPatchBaselineCommand = async (input, context) => {
      const headers = sharedHeaders("GetPatchBaseline");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetPatchBaselineCommand = se_GetPatchBaselineCommand;
    var se_GetPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = sharedHeaders("GetPatchBaselineForPatchGroup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetPatchBaselineForPatchGroupCommand = se_GetPatchBaselineForPatchGroupCommand;
    var se_GetResourcePoliciesCommand = async (input, context) => {
      const headers = sharedHeaders("GetResourcePolicies");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetResourcePoliciesCommand = se_GetResourcePoliciesCommand;
    var se_GetServiceSettingCommand = async (input, context) => {
      const headers = sharedHeaders("GetServiceSetting");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_GetServiceSettingCommand = se_GetServiceSettingCommand;
    var se_LabelParameterVersionCommand = async (input, context) => {
      const headers = sharedHeaders("LabelParameterVersion");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_LabelParameterVersionCommand = se_LabelParameterVersionCommand;
    var se_ListAssociationsCommand = async (input, context) => {
      const headers = sharedHeaders("ListAssociations");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListAssociationsCommand = se_ListAssociationsCommand;
    var se_ListAssociationVersionsCommand = async (input, context) => {
      const headers = sharedHeaders("ListAssociationVersions");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListAssociationVersionsCommand = se_ListAssociationVersionsCommand;
    var se_ListCommandInvocationsCommand = async (input, context) => {
      const headers = sharedHeaders("ListCommandInvocations");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListCommandInvocationsCommand = se_ListCommandInvocationsCommand;
    var se_ListCommandsCommand = async (input, context) => {
      const headers = sharedHeaders("ListCommands");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListCommandsCommand = se_ListCommandsCommand;
    var se_ListComplianceItemsCommand = async (input, context) => {
      const headers = sharedHeaders("ListComplianceItems");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListComplianceItemsCommand = se_ListComplianceItemsCommand;
    var se_ListComplianceSummariesCommand = async (input, context) => {
      const headers = sharedHeaders("ListComplianceSummaries");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListComplianceSummariesCommand = se_ListComplianceSummariesCommand;
    var se_ListDocumentMetadataHistoryCommand = async (input, context) => {
      const headers = sharedHeaders("ListDocumentMetadataHistory");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListDocumentMetadataHistoryCommand = se_ListDocumentMetadataHistoryCommand;
    var se_ListDocumentsCommand = async (input, context) => {
      const headers = sharedHeaders("ListDocuments");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListDocumentsCommand = se_ListDocumentsCommand;
    var se_ListDocumentVersionsCommand = async (input, context) => {
      const headers = sharedHeaders("ListDocumentVersions");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListDocumentVersionsCommand = se_ListDocumentVersionsCommand;
    var se_ListInventoryEntriesCommand = async (input, context) => {
      const headers = sharedHeaders("ListInventoryEntries");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListInventoryEntriesCommand = se_ListInventoryEntriesCommand;
    var se_ListOpsItemEventsCommand = async (input, context) => {
      const headers = sharedHeaders("ListOpsItemEvents");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListOpsItemEventsCommand = se_ListOpsItemEventsCommand;
    var se_ListOpsItemRelatedItemsCommand = async (input, context) => {
      const headers = sharedHeaders("ListOpsItemRelatedItems");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListOpsItemRelatedItemsCommand = se_ListOpsItemRelatedItemsCommand;
    var se_ListOpsMetadataCommand = async (input, context) => {
      const headers = sharedHeaders("ListOpsMetadata");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListOpsMetadataCommand = se_ListOpsMetadataCommand;
    var se_ListResourceComplianceSummariesCommand = async (input, context) => {
      const headers = sharedHeaders("ListResourceComplianceSummaries");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListResourceComplianceSummariesCommand = se_ListResourceComplianceSummariesCommand;
    var se_ListResourceDataSyncCommand = async (input, context) => {
      const headers = sharedHeaders("ListResourceDataSync");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListResourceDataSyncCommand = se_ListResourceDataSyncCommand;
    var se_ListTagsForResourceCommand = async (input, context) => {
      const headers = sharedHeaders("ListTagsForResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
    var se_ModifyDocumentPermissionCommand = async (input, context) => {
      const headers = sharedHeaders("ModifyDocumentPermission");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ModifyDocumentPermissionCommand = se_ModifyDocumentPermissionCommand;
    var se_PutComplianceItemsCommand = async (input, context) => {
      const headers = sharedHeaders("PutComplianceItems");
      let body;
      body = JSON.stringify(se_PutComplianceItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_PutComplianceItemsCommand = se_PutComplianceItemsCommand;
    var se_PutInventoryCommand = async (input, context) => {
      const headers = sharedHeaders("PutInventory");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_PutInventoryCommand = se_PutInventoryCommand;
    var se_PutParameterCommand = async (input, context) => {
      const headers = sharedHeaders("PutParameter");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_PutParameterCommand = se_PutParameterCommand;
    var se_PutResourcePolicyCommand = async (input, context) => {
      const headers = sharedHeaders("PutResourcePolicy");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_PutResourcePolicyCommand = se_PutResourcePolicyCommand;
    var se_RegisterDefaultPatchBaselineCommand = async (input, context) => {
      const headers = sharedHeaders("RegisterDefaultPatchBaseline");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_RegisterDefaultPatchBaselineCommand = se_RegisterDefaultPatchBaselineCommand;
    var se_RegisterPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = sharedHeaders("RegisterPatchBaselineForPatchGroup");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_RegisterPatchBaselineForPatchGroupCommand = se_RegisterPatchBaselineForPatchGroupCommand;
    var se_RegisterTargetWithMaintenanceWindowCommand = async (input, context) => {
      const headers = sharedHeaders("RegisterTargetWithMaintenanceWindow");
      let body;
      body = JSON.stringify(se_RegisterTargetWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_RegisterTargetWithMaintenanceWindowCommand = se_RegisterTargetWithMaintenanceWindowCommand;
    var se_RegisterTaskWithMaintenanceWindowCommand = async (input, context) => {
      const headers = sharedHeaders("RegisterTaskWithMaintenanceWindow");
      let body;
      body = JSON.stringify(se_RegisterTaskWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_RegisterTaskWithMaintenanceWindowCommand = se_RegisterTaskWithMaintenanceWindowCommand;
    var se_RemoveTagsFromResourceCommand = async (input, context) => {
      const headers = sharedHeaders("RemoveTagsFromResource");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_RemoveTagsFromResourceCommand = se_RemoveTagsFromResourceCommand;
    var se_ResetServiceSettingCommand = async (input, context) => {
      const headers = sharedHeaders("ResetServiceSetting");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ResetServiceSettingCommand = se_ResetServiceSettingCommand;
    var se_ResumeSessionCommand = async (input, context) => {
      const headers = sharedHeaders("ResumeSession");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_ResumeSessionCommand = se_ResumeSessionCommand;
    var se_SendAutomationSignalCommand = async (input, context) => {
      const headers = sharedHeaders("SendAutomationSignal");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_SendAutomationSignalCommand = se_SendAutomationSignalCommand;
    var se_SendCommandCommand = async (input, context) => {
      const headers = sharedHeaders("SendCommand");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_SendCommandCommand = se_SendCommandCommand;
    var se_StartAssociationsOnceCommand = async (input, context) => {
      const headers = sharedHeaders("StartAssociationsOnce");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_StartAssociationsOnceCommand = se_StartAssociationsOnceCommand;
    var se_StartAutomationExecutionCommand = async (input, context) => {
      const headers = sharedHeaders("StartAutomationExecution");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_StartAutomationExecutionCommand = se_StartAutomationExecutionCommand;
    var se_StartChangeRequestExecutionCommand = async (input, context) => {
      const headers = sharedHeaders("StartChangeRequestExecution");
      let body;
      body = JSON.stringify(se_StartChangeRequestExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_StartChangeRequestExecutionCommand = se_StartChangeRequestExecutionCommand;
    var se_StartSessionCommand = async (input, context) => {
      const headers = sharedHeaders("StartSession");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_StartSessionCommand = se_StartSessionCommand;
    var se_StopAutomationExecutionCommand = async (input, context) => {
      const headers = sharedHeaders("StopAutomationExecution");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_StopAutomationExecutionCommand = se_StopAutomationExecutionCommand;
    var se_TerminateSessionCommand = async (input, context) => {
      const headers = sharedHeaders("TerminateSession");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_TerminateSessionCommand = se_TerminateSessionCommand;
    var se_UnlabelParameterVersionCommand = async (input, context) => {
      const headers = sharedHeaders("UnlabelParameterVersion");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UnlabelParameterVersionCommand = se_UnlabelParameterVersionCommand;
    var se_UpdateAssociationCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateAssociation");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateAssociationCommand = se_UpdateAssociationCommand;
    var se_UpdateAssociationStatusCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateAssociationStatus");
      let body;
      body = JSON.stringify(se_UpdateAssociationStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateAssociationStatusCommand = se_UpdateAssociationStatusCommand;
    var se_UpdateDocumentCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateDocument");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateDocumentCommand = se_UpdateDocumentCommand;
    var se_UpdateDocumentDefaultVersionCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateDocumentDefaultVersion");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateDocumentDefaultVersionCommand = se_UpdateDocumentDefaultVersionCommand;
    var se_UpdateDocumentMetadataCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateDocumentMetadata");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateDocumentMetadataCommand = se_UpdateDocumentMetadataCommand;
    var se_UpdateMaintenanceWindowCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateMaintenanceWindow");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateMaintenanceWindowCommand = se_UpdateMaintenanceWindowCommand;
    var se_UpdateMaintenanceWindowTargetCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateMaintenanceWindowTarget");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateMaintenanceWindowTargetCommand = se_UpdateMaintenanceWindowTargetCommand;
    var se_UpdateMaintenanceWindowTaskCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateMaintenanceWindowTask");
      let body;
      body = JSON.stringify(se_UpdateMaintenanceWindowTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateMaintenanceWindowTaskCommand = se_UpdateMaintenanceWindowTaskCommand;
    var se_UpdateManagedInstanceRoleCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateManagedInstanceRole");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateManagedInstanceRoleCommand = se_UpdateManagedInstanceRoleCommand;
    var se_UpdateOpsItemCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateOpsItem");
      let body;
      body = JSON.stringify(se_UpdateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateOpsItemCommand = se_UpdateOpsItemCommand;
    var se_UpdateOpsMetadataCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateOpsMetadata");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateOpsMetadataCommand = se_UpdateOpsMetadataCommand;
    var se_UpdatePatchBaselineCommand = async (input, context) => {
      const headers = sharedHeaders("UpdatePatchBaseline");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdatePatchBaselineCommand = se_UpdatePatchBaselineCommand;
    var se_UpdateResourceDataSyncCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateResourceDataSync");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateResourceDataSyncCommand = se_UpdateResourceDataSyncCommand;
    var se_UpdateServiceSettingCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateServiceSetting");
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.se_UpdateServiceSettingCommand = se_UpdateServiceSettingCommand;
    var de_AddTagsToResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AddTagsToResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_AddTagsToResourceCommand = de_AddTagsToResourceCommand;
    var de_AddTagsToResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await de_InvalidResourceTypeRes(parsedOutput, context);
        case "TooManyTagsError":
        case "com.amazonaws.ssm#TooManyTagsError":
          throw await de_TooManyTagsErrorRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_AssociateOpsItemRelatedItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssociateOpsItemRelatedItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_AssociateOpsItemRelatedItemCommand = de_AssociateOpsItemRelatedItemCommand;
    var de_AssociateOpsItemRelatedItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        case "OpsItemRelatedItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException":
          throw await de_OpsItemRelatedItemAlreadyExistsExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CancelCommandCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CancelCommandCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CancelCommandCommand = de_CancelCommandCommand;
    var de_CancelCommandCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await de_DuplicateInstanceIdRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CancelMaintenanceWindowExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CancelMaintenanceWindowExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CancelMaintenanceWindowExecutionCommand = de_CancelMaintenanceWindowExecutionCommand;
    var de_CancelMaintenanceWindowExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateActivationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateActivationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreateActivationCommand = de_CreateActivationCommand;
    var de_CreateActivationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await de_InvalidParametersRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateAssociationResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreateAssociationCommand = de_CreateAssociationCommand;
    var de_CreateAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationAlreadyExists":
        case "com.amazonaws.ssm#AssociationAlreadyExists":
          throw await de_AssociationAlreadyExistsRes(parsedOutput, context);
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await de_AssociationLimitExceededRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await de_InvalidOutputLocationRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await de_InvalidParametersRes(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await de_InvalidScheduleRes(parsedOutput, context);
        case "InvalidTag":
        case "com.amazonaws.ssm#InvalidTag":
          throw await de_InvalidTagRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await de_InvalidTargetRes(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await de_InvalidTargetMapsRes(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAssociationBatchCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateAssociationBatchCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateAssociationBatchResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreateAssociationBatchCommand = de_CreateAssociationBatchCommand;
    var de_CreateAssociationBatchCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await de_AssociationLimitExceededRes(parsedOutput, context);
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await de_DuplicateInstanceIdRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await de_InvalidOutputLocationRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await de_InvalidParametersRes(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await de_InvalidScheduleRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await de_InvalidTargetRes(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await de_InvalidTargetMapsRes(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateDocumentResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreateDocumentCommand = de_CreateDocumentCommand;
    var de_CreateDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentAlreadyExists":
        case "com.amazonaws.ssm#DocumentAlreadyExists":
          throw await de_DocumentAlreadyExistsRes(parsedOutput, context);
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await de_DocumentLimitExceededRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await de_InvalidDocumentContentRes(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreateMaintenanceWindowCommand = de_CreateMaintenanceWindowCommand;
    var de_CreateMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreateOpsItemCommand = de_CreateOpsItemCommand;
    var de_CreateOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
          throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreateOpsMetadataCommand = de_CreateOpsMetadataCommand;
    var de_CreateOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataAlreadyExistsException":
        case "com.amazonaws.ssm#OpsMetadataAlreadyExistsException":
          throw await de_OpsMetadataAlreadyExistsExceptionRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataLimitExceededException":
          throw await de_OpsMetadataLimitExceededExceptionRes(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreatePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreatePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreatePatchBaselineCommand = de_CreatePatchBaselineCommand;
    var de_CreatePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_CreateResourceDataSyncCommand = de_CreateResourceDataSyncCommand;
    var de_CreateResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceDataSyncAlreadyExistsException":
        case "com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException":
          throw await de_ResourceDataSyncAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceDataSyncCountExceededException":
        case "com.amazonaws.ssm#ResourceDataSyncCountExceededException":
          throw await de_ResourceDataSyncCountExceededExceptionRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteActivationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteActivationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteActivationCommand = de_DeleteActivationCommand;
    var de_DeleteActivationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidActivation":
        case "com.amazonaws.ssm#InvalidActivation":
          throw await de_InvalidActivationRes(parsedOutput, context);
        case "InvalidActivationId":
        case "com.amazonaws.ssm#InvalidActivationId":
          throw await de_InvalidActivationIdRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteAssociationCommand = de_DeleteAssociationCommand;
    var de_DeleteAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteDocumentCommand = de_DeleteDocumentCommand;
    var de_DeleteDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociatedInstances":
        case "com.amazonaws.ssm#AssociatedInstances":
          throw await de_AssociatedInstancesRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteInventoryCommand = de_DeleteInventoryCommand;
    var de_DeleteInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDeleteInventoryParametersException":
        case "com.amazonaws.ssm#InvalidDeleteInventoryParametersException":
          throw await de_InvalidDeleteInventoryParametersExceptionRes(parsedOutput, context);
        case "InvalidInventoryRequestException":
        case "com.amazonaws.ssm#InvalidInventoryRequestException":
          throw await de_InvalidInventoryRequestExceptionRes(parsedOutput, context);
        case "InvalidOptionException":
        case "com.amazonaws.ssm#InvalidOptionException":
          throw await de_InvalidOptionExceptionRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteMaintenanceWindowCommand = de_DeleteMaintenanceWindowCommand;
    var de_DeleteMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteOpsMetadataCommand = de_DeleteOpsMetadataCommand;
    var de_DeleteOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteParameterCommand = de_DeleteParameterCommand;
    var de_DeleteParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await de_ParameterNotFoundRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteParametersCommand = de_DeleteParametersCommand;
    var de_DeleteParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeletePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeletePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeletePatchBaselineCommand = de_DeletePatchBaselineCommand;
    var de_DeletePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.ssm#ResourceInUseException":
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteResourceDataSyncCommand = de_DeleteResourceDataSyncCommand;
    var de_DeleteResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteResourcePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteResourcePolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeleteResourcePolicyCommand = de_DeleteResourcePolicyCommand;
    var de_DeleteResourcePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourcePolicyConflictException":
        case "com.amazonaws.ssm#ResourcePolicyConflictException":
          throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
          throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeregisterManagedInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeregisterManagedInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeregisterManagedInstanceCommand = de_DeregisterManagedInstanceCommand;
    var de_DeregisterManagedInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeregisterPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeregisterPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeregisterPatchBaselineForPatchGroupCommand = de_DeregisterPatchBaselineForPatchGroupCommand;
    var de_DeregisterPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeregisterTargetFromMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeregisterTargetFromMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeregisterTargetFromMaintenanceWindowCommand = de_DeregisterTargetFromMaintenanceWindowCommand;
    var de_DeregisterTargetFromMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "TargetInUseException":
        case "com.amazonaws.ssm#TargetInUseException":
          throw await de_TargetInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeregisterTaskFromMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeregisterTaskFromMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DeregisterTaskFromMaintenanceWindowCommand = de_DeregisterTaskFromMaintenanceWindowCommand;
    var de_DeregisterTaskFromMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeActivationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeActivationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeActivationsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeActivationsCommand = de_DescribeActivationsCommand;
    var de_DescribeActivationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeAssociationResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeAssociationCommand = de_DescribeAssociationCommand;
    var de_DescribeAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await de_InvalidAssociationVersionRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAssociationExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeAssociationExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeAssociationExecutionsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeAssociationExecutionsCommand = de_DescribeAssociationExecutionsCommand;
    var de_DescribeAssociationExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAssociationExecutionTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeAssociationExecutionTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeAssociationExecutionTargetsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeAssociationExecutionTargetsCommand = de_DescribeAssociationExecutionTargetsCommand;
    var de_DescribeAssociationExecutionTargetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "AssociationExecutionDoesNotExist":
        case "com.amazonaws.ssm#AssociationExecutionDoesNotExist":
          throw await de_AssociationExecutionDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAutomationExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeAutomationExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeAutomationExecutionsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeAutomationExecutionsCommand = de_DescribeAutomationExecutionsCommand;
    var de_DescribeAutomationExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAutomationStepExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeAutomationStepExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeAutomationStepExecutionsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeAutomationStepExecutionsCommand = de_DescribeAutomationStepExecutionsCommand;
    var de_DescribeAutomationStepExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAvailablePatchesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeAvailablePatchesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeAvailablePatchesResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeAvailablePatchesCommand = de_DescribeAvailablePatchesCommand;
    var de_DescribeAvailablePatchesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeDocumentResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeDocumentCommand = de_DescribeDocumentCommand;
    var de_DescribeDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeDocumentPermissionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeDocumentPermissionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeDocumentPermissionCommand = de_DescribeDocumentPermissionCommand;
    var de_DescribeDocumentPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await de_InvalidPermissionTypeRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeEffectiveInstanceAssociationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeEffectiveInstanceAssociationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeEffectiveInstanceAssociationsCommand = de_DescribeEffectiveInstanceAssociationsCommand;
    var de_DescribeEffectiveInstanceAssociationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeEffectivePatchesForPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeEffectivePatchesForPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeEffectivePatchesForPatchBaselineResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeEffectivePatchesForPatchBaselineCommand = de_DescribeEffectivePatchesForPatchBaselineCommand;
    var de_DescribeEffectivePatchesForPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeInstanceAssociationsStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeInstanceAssociationsStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeInstanceAssociationsStatusResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeInstanceAssociationsStatusCommand = de_DescribeInstanceAssociationsStatusCommand;
    var de_DescribeInstanceAssociationsStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeInstanceInformationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeInstanceInformationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeInstanceInformationResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeInstanceInformationCommand = de_DescribeInstanceInformationCommand;
    var de_DescribeInstanceInformationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidInstanceInformationFilterValue":
        case "com.amazonaws.ssm#InvalidInstanceInformationFilterValue":
          throw await de_InvalidInstanceInformationFilterValueRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeInstancePatchesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeInstancePatchesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeInstancePatchesResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeInstancePatchesCommand = de_DescribeInstancePatchesCommand;
    var de_DescribeInstancePatchesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeInstancePatchStatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeInstancePatchStatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeInstancePatchStatesResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeInstancePatchStatesCommand = de_DescribeInstancePatchStatesCommand;
    var de_DescribeInstancePatchStatesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeInstancePatchStatesForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeInstancePatchStatesForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeInstancePatchStatesForPatchGroupResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeInstancePatchStatesForPatchGroupCommand = de_DescribeInstancePatchStatesForPatchGroupCommand;
    var de_DescribeInstancePatchStatesForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeInventoryDeletionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeInventoryDeletionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeInventoryDeletionsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeInventoryDeletionsCommand = de_DescribeInventoryDeletionsCommand;
    var de_DescribeInventoryDeletionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDeletionIdException":
        case "com.amazonaws.ssm#InvalidDeletionIdException":
          throw await de_InvalidDeletionIdExceptionRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeMaintenanceWindowExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeMaintenanceWindowExecutionsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeMaintenanceWindowExecutionsCommand = de_DescribeMaintenanceWindowExecutionsCommand;
    var de_DescribeMaintenanceWindowExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowExecutionTaskInvocationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeMaintenanceWindowExecutionTaskInvocationsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var de_DescribeMaintenanceWindowExecutionTaskInvocationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeMaintenanceWindowExecutionTasksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowExecutionTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeMaintenanceWindowExecutionTasksResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeMaintenanceWindowExecutionTasksCommand = de_DescribeMaintenanceWindowExecutionTasksCommand;
    var de_DescribeMaintenanceWindowExecutionTasksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeMaintenanceWindowsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeMaintenanceWindowsCommand = de_DescribeMaintenanceWindowsCommand;
    var de_DescribeMaintenanceWindowsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeMaintenanceWindowScheduleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowScheduleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeMaintenanceWindowScheduleCommand = de_DescribeMaintenanceWindowScheduleCommand;
    var de_DescribeMaintenanceWindowScheduleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeMaintenanceWindowsForTargetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowsForTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeMaintenanceWindowsForTargetCommand = de_DescribeMaintenanceWindowsForTargetCommand;
    var de_DescribeMaintenanceWindowsForTargetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeMaintenanceWindowTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeMaintenanceWindowTargetsCommand = de_DescribeMaintenanceWindowTargetsCommand;
    var de_DescribeMaintenanceWindowTargetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeMaintenanceWindowTasksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeMaintenanceWindowTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeMaintenanceWindowTasksCommand = de_DescribeMaintenanceWindowTasksCommand;
    var de_DescribeMaintenanceWindowTasksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeOpsItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeOpsItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeOpsItemsResponse(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeOpsItemsCommand = de_DescribeOpsItemsCommand;
    var de_DescribeOpsItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeParametersResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeParametersCommand = de_DescribeParametersCommand;
    var de_DescribeParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await de_InvalidFilterOptionRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribePatchBaselinesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribePatchBaselinesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribePatchBaselinesCommand = de_DescribePatchBaselinesCommand;
    var de_DescribePatchBaselinesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribePatchGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribePatchGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribePatchGroupsCommand = de_DescribePatchGroupsCommand;
    var de_DescribePatchGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribePatchGroupStateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribePatchGroupStateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribePatchGroupStateCommand = de_DescribePatchGroupStateCommand;
    var de_DescribePatchGroupStateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribePatchPropertiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribePatchPropertiesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribePatchPropertiesCommand = de_DescribePatchPropertiesCommand;
    var de_DescribePatchPropertiesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeSessionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeSessionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeSessionsResponse(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DescribeSessionsCommand = de_DescribeSessionsCommand;
    var de_DescribeSessionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DisassociateOpsItemRelatedItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DisassociateOpsItemRelatedItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_DisassociateOpsItemRelatedItemCommand = de_DisassociateOpsItemRelatedItemCommand;
    var de_DisassociateOpsItemRelatedItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        case "OpsItemRelatedItemAssociationNotFoundException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException":
          throw await de_OpsItemRelatedItemAssociationNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetAutomationExecutionResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetAutomationExecutionCommand = de_GetAutomationExecutionCommand;
    var de_GetAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetCalendarStateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetCalendarStateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetCalendarStateCommand = de_GetCalendarStateCommand;
    var de_GetCalendarStateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentType":
        case "com.amazonaws.ssm#InvalidDocumentType":
          throw await de_InvalidDocumentTypeRes(parsedOutput, context);
        case "UnsupportedCalendarException":
        case "com.amazonaws.ssm#UnsupportedCalendarException":
          throw await de_UnsupportedCalendarExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetCommandInvocationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetCommandInvocationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetCommandInvocationCommand = de_GetCommandInvocationCommand;
    var de_GetCommandInvocationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidPluginName":
        case "com.amazonaws.ssm#InvalidPluginName":
          throw await de_InvalidPluginNameRes(parsedOutput, context);
        case "InvocationDoesNotExist":
        case "com.amazonaws.ssm#InvocationDoesNotExist":
          throw await de_InvocationDoesNotExistRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetConnectionStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetConnectionStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetConnectionStatusCommand = de_GetConnectionStatusCommand;
    var de_GetConnectionStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetDefaultPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetDefaultPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetDefaultPatchBaselineCommand = de_GetDefaultPatchBaselineCommand;
    var de_GetDefaultPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetDeployablePatchSnapshotForInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetDeployablePatchSnapshotForInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetDeployablePatchSnapshotForInstanceCommand = de_GetDeployablePatchSnapshotForInstanceCommand;
    var de_GetDeployablePatchSnapshotForInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "UnsupportedFeatureRequiredException":
        case "com.amazonaws.ssm#UnsupportedFeatureRequiredException":
          throw await de_UnsupportedFeatureRequiredExceptionRes(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetDocumentResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetDocumentCommand = de_GetDocumentCommand;
    var de_GetDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetInventoryCommand = de_GetInventoryCommand;
    var de_GetInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidInventoryGroupException":
        case "com.amazonaws.ssm#InvalidInventoryGroupException":
          throw await de_InvalidInventoryGroupExceptionRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidResultAttributeException":
        case "com.amazonaws.ssm#InvalidResultAttributeException":
          throw await de_InvalidResultAttributeExceptionRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetInventorySchemaCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetInventorySchemaCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetInventorySchemaCommand = de_GetInventorySchemaCommand;
    var de_GetInventorySchemaCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetMaintenanceWindowCommand = de_GetMaintenanceWindowCommand;
    var de_GetMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMaintenanceWindowExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowExecutionResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetMaintenanceWindowExecutionCommand = de_GetMaintenanceWindowExecutionCommand;
    var de_GetMaintenanceWindowExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMaintenanceWindowExecutionTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowExecutionTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowExecutionTaskResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetMaintenanceWindowExecutionTaskCommand = de_GetMaintenanceWindowExecutionTaskCommand;
    var de_GetMaintenanceWindowExecutionTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMaintenanceWindowExecutionTaskInvocationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowExecutionTaskInvocationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowExecutionTaskInvocationResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetMaintenanceWindowExecutionTaskInvocationCommand = de_GetMaintenanceWindowExecutionTaskInvocationCommand;
    var de_GetMaintenanceWindowExecutionTaskInvocationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMaintenanceWindowTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetMaintenanceWindowTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetMaintenanceWindowTaskResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetMaintenanceWindowTaskCommand = de_GetMaintenanceWindowTaskCommand;
    var de_GetMaintenanceWindowTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetOpsItemResponse(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetOpsItemCommand = de_GetOpsItemCommand;
    var de_GetOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
          throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetOpsMetadataCommand = de_GetOpsMetadataCommand;
    var de_GetOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetOpsSummaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetOpsSummaryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetOpsSummaryCommand = de_GetOpsSummaryCommand;
    var de_GetOpsSummaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetParameterResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetParameterCommand = de_GetParameterCommand;
    var de_GetParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await de_ParameterNotFoundRes(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await de_ParameterVersionNotFoundRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetParameterHistoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetParameterHistoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetParameterHistoryResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetParameterHistoryCommand = de_GetParameterHistoryCommand;
    var de_GetParameterHistoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await de_ParameterNotFoundRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetParametersResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetParametersCommand = de_GetParametersCommand;
    var de_GetParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await de_InvalidKeyIdRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetParametersByPathCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetParametersByPathCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetParametersByPathResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetParametersByPathCommand = de_GetParametersByPathCommand;
    var de_GetParametersByPathCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await de_InvalidFilterOptionRes(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await de_InvalidFilterValueRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetPatchBaselineResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetPatchBaselineCommand = de_GetPatchBaselineCommand;
    var de_GetPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetPatchBaselineForPatchGroupCommand = de_GetPatchBaselineForPatchGroupCommand;
    var de_GetPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetResourcePoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetResourcePoliciesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetResourcePoliciesCommand = de_GetResourcePoliciesCommand;
    var de_GetResourcePoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
          throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetServiceSettingResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_GetServiceSettingCommand = de_GetServiceSettingCommand;
    var de_GetServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await de_ServiceSettingNotFoundRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_LabelParameterVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_LabelParameterVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_LabelParameterVersionCommand = de_LabelParameterVersionCommand;
    var de_LabelParameterVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await de_ParameterNotFoundRes(parsedOutput, context);
        case "ParameterVersionLabelLimitExceeded":
        case "com.amazonaws.ssm#ParameterVersionLabelLimitExceeded":
          throw await de_ParameterVersionLabelLimitExceededRes(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await de_ParameterVersionNotFoundRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAssociationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListAssociationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListAssociationsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListAssociationsCommand = de_ListAssociationsCommand;
    var de_ListAssociationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAssociationVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListAssociationVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListAssociationVersionsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListAssociationVersionsCommand = de_ListAssociationVersionsCommand;
    var de_ListAssociationVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListCommandInvocationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListCommandInvocationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListCommandInvocationsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListCommandInvocationsCommand = de_ListCommandInvocationsCommand;
    var de_ListCommandInvocationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListCommandsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListCommandsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListCommandsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListCommandsCommand = de_ListCommandsCommand;
    var de_ListCommandsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await de_InvalidCommandIdRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListComplianceItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListComplianceItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListComplianceItemsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListComplianceItemsCommand = de_ListComplianceItemsCommand;
    var de_ListComplianceItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await de_InvalidResourceTypeRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListComplianceSummariesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListComplianceSummariesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListComplianceSummariesCommand = de_ListComplianceSummariesCommand;
    var de_ListComplianceSummariesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListDocumentMetadataHistoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListDocumentMetadataHistoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListDocumentMetadataHistoryResponse(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListDocumentMetadataHistoryCommand = de_ListDocumentMetadataHistoryCommand;
    var de_ListDocumentMetadataHistoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListDocumentsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListDocumentsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListDocumentsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListDocumentsCommand = de_ListDocumentsCommand;
    var de_ListDocumentsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await de_InvalidFilterKeyRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListDocumentVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListDocumentVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListDocumentVersionsResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListDocumentVersionsCommand = de_ListDocumentVersionsCommand;
    var de_ListDocumentVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListInventoryEntriesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListInventoryEntriesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListInventoryEntriesCommand = de_ListInventoryEntriesCommand;
    var de_ListInventoryEntriesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListOpsItemEventsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListOpsItemEventsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListOpsItemEventsResponse(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListOpsItemEventsCommand = de_ListOpsItemEventsCommand;
    var de_ListOpsItemEventsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListOpsItemRelatedItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListOpsItemRelatedItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListOpsItemRelatedItemsResponse(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListOpsItemRelatedItemsCommand = de_ListOpsItemRelatedItemsCommand;
    var de_ListOpsItemRelatedItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListOpsMetadataResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListOpsMetadataCommand = de_ListOpsMetadataCommand;
    var de_ListOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListResourceComplianceSummariesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListResourceComplianceSummariesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListResourceComplianceSummariesResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListResourceComplianceSummariesCommand = de_ListResourceComplianceSummariesCommand;
    var de_ListResourceComplianceSummariesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await de_InvalidFilterRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListResourceDataSyncResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListResourceDataSyncCommand = de_ListResourceDataSyncCommand;
    var de_ListResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await de_InvalidNextTokenRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
    var de_ListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await de_InvalidResourceTypeRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ModifyDocumentPermissionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ModifyDocumentPermissionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ModifyDocumentPermissionCommand = de_ModifyDocumentPermissionCommand;
    var de_ModifyDocumentPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await de_DocumentLimitExceededRes(parsedOutput, context);
        case "DocumentPermissionLimit":
        case "com.amazonaws.ssm#DocumentPermissionLimit":
          throw await de_DocumentPermissionLimitRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await de_InvalidPermissionTypeRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutComplianceItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PutComplianceItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_PutComplianceItemsCommand = de_PutComplianceItemsCommand;
    var de_PutComplianceItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ComplianceTypeCountLimitExceededException":
        case "com.amazonaws.ssm#ComplianceTypeCountLimitExceededException":
          throw await de_ComplianceTypeCountLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await de_InvalidItemContentExceptionRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await de_InvalidResourceTypeRes(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PutInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_PutInventoryCommand = de_PutInventoryCommand;
    var de_PutInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomSchemaCountLimitExceededException":
        case "com.amazonaws.ssm#CustomSchemaCountLimitExceededException":
          throw await de_CustomSchemaCountLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidInventoryItemContextException":
        case "com.amazonaws.ssm#InvalidInventoryItemContextException":
          throw await de_InvalidInventoryItemContextExceptionRes(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await de_InvalidItemContentExceptionRes(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);
        case "ItemContentMismatchException":
        case "com.amazonaws.ssm#ItemContentMismatchException":
          throw await de_ItemContentMismatchExceptionRes(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);
        case "SubTypeCountLimitExceededException":
        case "com.amazonaws.ssm#SubTypeCountLimitExceededException":
          throw await de_SubTypeCountLimitExceededExceptionRes(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedInventoryItemContextException":
        case "com.amazonaws.ssm#UnsupportedInventoryItemContextException":
          throw await de_UnsupportedInventoryItemContextExceptionRes(parsedOutput, context);
        case "UnsupportedInventorySchemaVersionException":
        case "com.amazonaws.ssm#UnsupportedInventorySchemaVersionException":
          throw await de_UnsupportedInventorySchemaVersionExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PutParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_PutParameterCommand = de_PutParameterCommand;
    var de_PutParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "HierarchyLevelLimitExceededException":
        case "com.amazonaws.ssm#HierarchyLevelLimitExceededException":
          throw await de_HierarchyLevelLimitExceededExceptionRes(parsedOutput, context);
        case "HierarchyTypeMismatchException":
        case "com.amazonaws.ssm#HierarchyTypeMismatchException":
          throw await de_HierarchyTypeMismatchExceptionRes(parsedOutput, context);
        case "IncompatiblePolicyException":
        case "com.amazonaws.ssm#IncompatiblePolicyException":
          throw await de_IncompatiblePolicyExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAllowedPatternException":
        case "com.amazonaws.ssm#InvalidAllowedPatternException":
          throw await de_InvalidAllowedPatternExceptionRes(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await de_InvalidKeyIdRes(parsedOutput, context);
        case "InvalidPolicyAttributeException":
        case "com.amazonaws.ssm#InvalidPolicyAttributeException":
          throw await de_InvalidPolicyAttributeExceptionRes(parsedOutput, context);
        case "InvalidPolicyTypeException":
        case "com.amazonaws.ssm#InvalidPolicyTypeException":
          throw await de_InvalidPolicyTypeExceptionRes(parsedOutput, context);
        case "ParameterAlreadyExists":
        case "com.amazonaws.ssm#ParameterAlreadyExists":
          throw await de_ParameterAlreadyExistsRes(parsedOutput, context);
        case "ParameterLimitExceeded":
        case "com.amazonaws.ssm#ParameterLimitExceeded":
          throw await de_ParameterLimitExceededRes(parsedOutput, context);
        case "ParameterMaxVersionLimitExceeded":
        case "com.amazonaws.ssm#ParameterMaxVersionLimitExceeded":
          throw await de_ParameterMaxVersionLimitExceededRes(parsedOutput, context);
        case "ParameterPatternMismatchException":
        case "com.amazonaws.ssm#ParameterPatternMismatchException":
          throw await de_ParameterPatternMismatchExceptionRes(parsedOutput, context);
        case "PoliciesLimitExceededException":
        case "com.amazonaws.ssm#PoliciesLimitExceededException":
          throw await de_PoliciesLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        case "UnsupportedParameterType":
        case "com.amazonaws.ssm#UnsupportedParameterType":
          throw await de_UnsupportedParameterTypeRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutResourcePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PutResourcePolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_PutResourcePolicyCommand = de_PutResourcePolicyCommand;
    var de_PutResourcePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourcePolicyConflictException":
        case "com.amazonaws.ssm#ResourcePolicyConflictException":
          throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
          throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);
        case "ResourcePolicyLimitExceededException":
        case "com.amazonaws.ssm#ResourcePolicyLimitExceededException":
          throw await de_ResourcePolicyLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterDefaultPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RegisterDefaultPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_RegisterDefaultPatchBaselineCommand = de_RegisterDefaultPatchBaselineCommand;
    var de_RegisterDefaultPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RegisterPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_RegisterPatchBaselineForPatchGroupCommand = de_RegisterPatchBaselineForPatchGroupCommand;
    var de_RegisterPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ssm#AlreadyExistsException":
          throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterTargetWithMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RegisterTargetWithMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_RegisterTargetWithMaintenanceWindowCommand = de_RegisterTargetWithMaintenanceWindowCommand;
    var de_RegisterTargetWithMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterTaskWithMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RegisterTaskWithMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_RegisterTaskWithMaintenanceWindowCommand = de_RegisterTaskWithMaintenanceWindowCommand;
    var de_RegisterTaskWithMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "FeatureNotAvailableException":
        case "com.amazonaws.ssm#FeatureNotAvailableException":
          throw await de_FeatureNotAvailableExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RemoveTagsFromResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RemoveTagsFromResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_RemoveTagsFromResourceCommand = de_RemoveTagsFromResourceCommand;
    var de_RemoveTagsFromResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await de_InvalidResourceIdRes(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await de_InvalidResourceTypeRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ResetServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ResetServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ResetServiceSettingResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ResetServiceSettingCommand = de_ResetServiceSettingCommand;
    var de_ResetServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await de_ServiceSettingNotFoundRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ResumeSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ResumeSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_ResumeSessionCommand = de_ResumeSessionCommand;
    var de_ResumeSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_SendAutomationSignalCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_SendAutomationSignalCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_SendAutomationSignalCommand = de_SendAutomationSignalCommand;
    var de_SendAutomationSignalCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationStepNotFoundException":
        case "com.amazonaws.ssm#AutomationStepNotFoundException":
          throw await de_AutomationStepNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAutomationSignalException":
        case "com.amazonaws.ssm#InvalidAutomationSignalException":
          throw await de_InvalidAutomationSignalExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_SendCommandCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_SendCommandCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_SendCommandResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_SendCommandCommand = de_SendCommandCommand;
    var de_SendCommandCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await de_DuplicateInstanceIdRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "InvalidNotificationConfig":
        case "com.amazonaws.ssm#InvalidNotificationConfig":
          throw await de_InvalidNotificationConfigRes(parsedOutput, context);
        case "InvalidOutputFolder":
        case "com.amazonaws.ssm#InvalidOutputFolder":
          throw await de_InvalidOutputFolderRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await de_InvalidParametersRes(parsedOutput, context);
        case "InvalidRole":
        case "com.amazonaws.ssm#InvalidRole":
          throw await de_InvalidRoleRes(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartAssociationsOnceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_StartAssociationsOnceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_StartAssociationsOnceCommand = de_StartAssociationsOnceCommand;
    var de_StartAssociationsOnceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InvalidAssociation":
        case "com.amazonaws.ssm#InvalidAssociation":
          throw await de_InvalidAssociationRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_StartAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_StartAutomationExecutionCommand = de_StartAutomationExecutionCommand;
    var de_StartAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await de_InvalidTargetRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartChangeRequestExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_StartChangeRequestExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_StartChangeRequestExecutionCommand = de_StartChangeRequestExecutionCommand;
    var de_StartChangeRequestExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationDefinitionNotApprovedException":
        case "com.amazonaws.ssm#AutomationDefinitionNotApprovedException":
          throw await de_AutomationDefinitionNotApprovedExceptionRes(parsedOutput, context);
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StartSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_StartSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_StartSessionCommand = de_StartSessionCommand;
    var de_StartSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "TargetNotConnected":
        case "com.amazonaws.ssm#TargetNotConnected":
          throw await de_TargetNotConnectedRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_StopAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_StopAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_StopAutomationExecutionCommand = de_StopAutomationExecutionCommand;
    var de_StopAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAutomationStatusUpdateException":
        case "com.amazonaws.ssm#InvalidAutomationStatusUpdateException":
          throw await de_InvalidAutomationStatusUpdateExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TerminateSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TerminateSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_TerminateSessionCommand = de_TerminateSessionCommand;
    var de_TerminateSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UnlabelParameterVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UnlabelParameterVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UnlabelParameterVersionCommand = de_UnlabelParameterVersionCommand;
    var de_UnlabelParameterVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await de_ParameterNotFoundRes(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await de_ParameterVersionNotFoundRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateAssociationResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateAssociationCommand = de_UpdateAssociationCommand;
    var de_UpdateAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "AssociationVersionLimitExceeded":
        case "com.amazonaws.ssm#AssociationVersionLimitExceeded":
          throw await de_AssociationVersionLimitExceededRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await de_InvalidAssociationVersionRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await de_InvalidOutputLocationRes(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await de_InvalidParametersRes(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await de_InvalidScheduleRes(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await de_InvalidTargetRes(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await de_InvalidTargetMapsRes(parsedOutput, context);
        case "InvalidUpdate":
        case "com.amazonaws.ssm#InvalidUpdate":
          throw await de_InvalidUpdateRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAssociationStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateAssociationStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateAssociationStatusResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateAssociationStatusCommand = de_UpdateAssociationStatusCommand;
    var de_UpdateAssociationStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await de_AssociationDoesNotExistRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        case "StatusUnchanged":
        case "com.amazonaws.ssm#StatusUnchanged":
          throw await de_StatusUnchangedRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateDocumentResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateDocumentCommand = de_UpdateDocumentCommand;
    var de_UpdateDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentVersionLimitExceeded":
        case "com.amazonaws.ssm#DocumentVersionLimitExceeded":
          throw await de_DocumentVersionLimitExceededRes(parsedOutput, context);
        case "DuplicateDocumentContent":
        case "com.amazonaws.ssm#DuplicateDocumentContent":
          throw await de_DuplicateDocumentContentRes(parsedOutput, context);
        case "DuplicateDocumentVersionName":
        case "com.amazonaws.ssm#DuplicateDocumentVersionName":
          throw await de_DuplicateDocumentVersionNameRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await de_InvalidDocumentContentRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateDocumentDefaultVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateDocumentDefaultVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateDocumentDefaultVersionCommand = de_UpdateDocumentDefaultVersionCommand;
    var de_UpdateDocumentDefaultVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateDocumentMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateDocumentMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateDocumentMetadataCommand = de_UpdateDocumentMetadataCommand;
    var de_UpdateDocumentMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await de_InvalidDocumentRes(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await de_InvalidDocumentOperationRes(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await de_InvalidDocumentVersionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateMaintenanceWindowCommand = de_UpdateMaintenanceWindowCommand;
    var de_UpdateMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateMaintenanceWindowTargetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateMaintenanceWindowTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateMaintenanceWindowTargetCommand = de_UpdateMaintenanceWindowTargetCommand;
    var de_UpdateMaintenanceWindowTargetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateMaintenanceWindowTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateMaintenanceWindowTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateMaintenanceWindowTaskResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateMaintenanceWindowTaskCommand = de_UpdateMaintenanceWindowTaskCommand;
    var de_UpdateMaintenanceWindowTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateManagedInstanceRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateManagedInstanceRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateManagedInstanceRoleCommand = de_UpdateManagedInstanceRoleCommand;
    var de_UpdateManagedInstanceRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await de_InvalidInstanceIdRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateOpsItemCommand = de_UpdateOpsItemCommand;
    var de_UpdateOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
          throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateOpsMetadataCommand = de_UpdateOpsMetadataCommand;
    var de_UpdateOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);
        case "OpsMetadataKeyLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataKeyLimitExceededException":
          throw await de_OpsMetadataKeyLimitExceededExceptionRes(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdatePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdatePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdatePatchBaselineResult(data, context);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdatePatchBaselineCommand = de_UpdatePatchBaselineCommand;
    var de_UpdatePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await de_DoesNotExistExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateResourceDataSyncCommand = de_UpdateResourceDataSyncCommand;
    var de_UpdateResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceDataSyncConflictException":
        case "com.amazonaws.ssm#ResourceDataSyncConflictException":
          throw await de_ResourceDataSyncConflictExceptionRes(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response2 = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response2;
    };
    exports.de_UpdateServiceSettingCommand = de_UpdateServiceSettingCommand;
    var de_UpdateServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await de_ServiceSettingNotFoundRes(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await de_TooManyUpdatesRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AssociatedInstancesRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.AssociatedInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AssociationAlreadyExistsRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.AssociationAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AssociationDoesNotExistRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.AssociationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AssociationExecutionDoesNotExistRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.AssociationExecutionDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AssociationLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.AssociationLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AssociationVersionLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.AssociationVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AutomationDefinitionNotApprovedExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.AutomationDefinitionNotApprovedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AutomationDefinitionNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.AutomationDefinitionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AutomationDefinitionVersionNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.AutomationDefinitionVersionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AutomationExecutionLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.AutomationExecutionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AutomationExecutionNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.AutomationExecutionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_AutomationStepNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.AutomationStepNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ComplianceTypeCountLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ComplianceTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_CustomSchemaCountLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.CustomSchemaCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DocumentAlreadyExistsRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.DocumentAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DocumentLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.DocumentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DocumentPermissionLimitRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.DocumentPermissionLimit({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DocumentVersionLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_2_1.DocumentVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DoesNotExistExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.DoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DuplicateDocumentContentRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_2_1.DuplicateDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DuplicateDocumentVersionNameRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_2_1.DuplicateDocumentVersionName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DuplicateInstanceIdRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.DuplicateInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_FeatureNotAvailableExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.FeatureNotAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_HierarchyLevelLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.HierarchyLevelLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_HierarchyTypeMismatchExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.HierarchyTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IdempotentParameterMismatchRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IncompatiblePolicyExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.IncompatiblePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InternalServerErrorRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidActivationRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidActivation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidActivationIdRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidActivationId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAggregatorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAllowedPatternExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidAllowedPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAssociationRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAssociationVersionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidAssociationVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAutomationExecutionParametersExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidAutomationExecutionParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAutomationSignalExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidAutomationSignalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAutomationStatusUpdateExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidAutomationStatusUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidCommandIdRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidCommandId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidDeleteInventoryParametersExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidDeleteInventoryParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidDeletionIdExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidDeletionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidDocumentRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidDocumentContentRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidDocumentOperationRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidDocumentOperation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidDocumentSchemaVersionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidDocumentSchemaVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidDocumentTypeRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidDocumentType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidDocumentVersionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidDocumentVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidFilterRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidFilter({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidFilterKeyRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidFilterKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidFilterOptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidFilterOption({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidFilterValueRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidInstanceIdRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidInstanceInformationFilterValueRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidInstanceInformationFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidInventoryGroupExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidInventoryGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidInventoryItemContextExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidInventoryRequestExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidInventoryRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidItemContentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidItemContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidKeyIdRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidKeyId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidNextTokenRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidNotificationConfigRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidNotificationConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidOptionExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidOptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidOutputFolderRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidOutputFolder({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidOutputLocationRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidOutputLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidParametersRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidParameters({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidPermissionTypeRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidPermissionType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidPluginNameRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidPluginName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidPolicyAttributeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidPolicyAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidPolicyTypeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidPolicyTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidResourceIdRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidResourceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidResourceTypeRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidResourceType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidResultAttributeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidResultAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidRoleRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvalidRole({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidScheduleRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidSchedule({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidTagRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidTag({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidTargetRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidTarget({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidTargetMapsRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidTargetMaps({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidTypeNameExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidTypeNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidUpdateRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_2_1.InvalidUpdate({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvocationDoesNotExistRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.InvocationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ItemContentMismatchExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ItemContentMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ItemSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ItemSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_MaxDocumentSizeExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.MaxDocumentSizeExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsItemAccessDeniedExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsItemAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsItemAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsItemInvalidParameterExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsItemInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsItemLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsItemLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsItemNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsItemNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsItemRelatedItemAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsItemRelatedItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsItemRelatedItemAssociationNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.OpsItemRelatedItemAssociationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsMetadataAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsMetadataAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsMetadataInvalidArgumentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsMetadataInvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsMetadataKeyLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_2_1.OpsMetadataKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsMetadataLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsMetadataLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsMetadataNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsMetadataNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_OpsMetadataTooManyUpdatesExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.OpsMetadataTooManyUpdatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ParameterAlreadyExistsRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ParameterAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ParameterLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ParameterLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ParameterMaxVersionLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ParameterMaxVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ParameterNotFoundRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ParameterNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ParameterPatternMismatchExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ParameterPatternMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ParameterVersionLabelLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ParameterVersionLabelLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ParameterVersionNotFoundRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ParameterVersionNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PoliciesLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.PoliciesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceDataSyncAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceDataSyncAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceDataSyncConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_2_1.ResourceDataSyncConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceDataSyncCountExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceDataSyncCountExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceDataSyncInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceDataSyncInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceDataSyncNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceDataSyncNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourcePolicyConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourcePolicyConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourcePolicyInvalidParameterExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourcePolicyInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourcePolicyLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ResourcePolicyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ServiceSettingNotFoundRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.ServiceSettingNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_StatusUnchangedRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_2_1.StatusUnchanged({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_SubTypeCountLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.SubTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TargetInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TargetInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TargetNotConnectedRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.TargetNotConnected({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TooManyTagsErrorRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TooManyTagsError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TooManyUpdatesRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TooManyUpdates({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TotalSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.TotalSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UnsupportedCalendarExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.UnsupportedCalendarException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UnsupportedFeatureRequiredExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.UnsupportedFeatureRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UnsupportedInventoryItemContextExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.UnsupportedInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UnsupportedInventorySchemaVersionExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.UnsupportedInventorySchemaVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UnsupportedOperatingSystemRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.UnsupportedOperatingSystem({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UnsupportedParameterTypeRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_1_1.UnsupportedParameterType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_UnsupportedPlatformTypeRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.UnsupportedPlatformType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AssociationStatus = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AdditionalInfo: [],
        Date: (_) => Math.round(_.getTime() / 1e3),
        Message: [],
        Name: []
      });
    };
    var se_ComplianceExecutionSummary = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ExecutionId: [],
        ExecutionTime: (_) => Math.round(_.getTime() / 1e3),
        ExecutionType: []
      });
    };
    var se_CreateActivationRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        DefaultInstanceName: [],
        Description: [],
        ExpirationDate: (_) => Math.round(_.getTime() / 1e3),
        IamRole: [],
        RegistrationLimit: [],
        RegistrationMetadata: smithy_client_1._json,
        Tags: smithy_client_1._json
      });
    };
    var se_CreateMaintenanceWindowRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AllowUnassociatedTargets: [],
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Cutoff: [],
        Description: [],
        Duration: [],
        EndDate: [],
        Name: [],
        Schedule: [],
        ScheduleOffset: [],
        ScheduleTimezone: [],
        StartDate: [],
        Tags: smithy_client_1._json
      });
    };
    var se_CreateOpsItemRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AccountId: [],
        ActualEndTime: (_) => Math.round(_.getTime() / 1e3),
        ActualStartTime: (_) => Math.round(_.getTime() / 1e3),
        Category: [],
        Description: [],
        Notifications: smithy_client_1._json,
        OperationalData: smithy_client_1._json,
        OpsItemType: [],
        PlannedEndTime: (_) => Math.round(_.getTime() / 1e3),
        PlannedStartTime: (_) => Math.round(_.getTime() / 1e3),
        Priority: [],
        RelatedOpsItems: smithy_client_1._json,
        Severity: [],
        Source: [],
        Tags: smithy_client_1._json,
        Title: []
      });
    };
    var se_CreatePatchBaselineRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ApprovalRules: smithy_client_1._json,
        ApprovedPatches: smithy_client_1._json,
        ApprovedPatchesComplianceLevel: [],
        ApprovedPatchesEnableNonSecurity: [],
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Description: [],
        GlobalFilters: smithy_client_1._json,
        Name: [],
        OperatingSystem: [],
        RejectedPatches: smithy_client_1._json,
        RejectedPatchesAction: [],
        Sources: smithy_client_1._json,
        Tags: smithy_client_1._json
      });
    };
    var se_DeleteInventoryRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        DryRun: [],
        SchemaDeleteOption: [],
        TypeName: []
      });
    };
    var se_GetInventoryRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Aggregators: (_) => se_InventoryAggregatorList(_, context),
        Filters: smithy_client_1._json,
        MaxResults: [],
        NextToken: [],
        ResultAttributes: smithy_client_1._json
      });
    };
    var se_GetOpsSummaryRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Aggregators: (_) => se_OpsAggregatorList(_, context),
        Filters: smithy_client_1._json,
        MaxResults: [],
        NextToken: [],
        ResultAttributes: smithy_client_1._json,
        SyncName: []
      });
    };
    var se_InventoryAggregator = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Aggregators: (_) => se_InventoryAggregatorList(_, context),
        Expression: [],
        Groups: smithy_client_1._json
      });
    };
    var se_InventoryAggregatorList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_InventoryAggregator(entry, context);
      });
    };
    var se_MaintenanceWindowLambdaParameters = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientContext: [],
        Payload: context.base64Encoder,
        Qualifier: []
      });
    };
    var se_MaintenanceWindowTaskInvocationParameters = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Automation: smithy_client_1._json,
        Lambda: (_) => se_MaintenanceWindowLambdaParameters(_, context),
        RunCommand: smithy_client_1._json,
        StepFunctions: smithy_client_1._json
      });
    };
    var se_OpsAggregator = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AggregatorType: [],
        Aggregators: (_) => se_OpsAggregatorList(_, context),
        AttributeName: [],
        Filters: smithy_client_1._json,
        TypeName: [],
        Values: smithy_client_1._json
      });
    };
    var se_OpsAggregatorList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return se_OpsAggregator(entry, context);
      });
    };
    var se_PutComplianceItemsRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ComplianceType: [],
        ExecutionSummary: (_) => se_ComplianceExecutionSummary(_, context),
        ItemContentHash: [],
        Items: smithy_client_1._json,
        ResourceId: [],
        ResourceType: [],
        UploadType: []
      });
    };
    var se_RegisterTargetWithMaintenanceWindowRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Description: [],
        Name: [],
        OwnerInformation: [],
        ResourceType: [],
        Targets: smithy_client_1._json,
        WindowId: []
      });
    };
    var se_RegisterTaskWithMaintenanceWindowRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AlarmConfiguration: smithy_client_1._json,
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        CutoffBehavior: [],
        Description: [],
        LoggingInfo: smithy_client_1._json,
        MaxConcurrency: [],
        MaxErrors: [],
        Name: [],
        Priority: [],
        ServiceRoleArn: [],
        Targets: smithy_client_1._json,
        TaskArn: [],
        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: smithy_client_1._json,
        TaskType: [],
        WindowId: []
      });
    };
    var se_StartChangeRequestExecutionRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AutoApprove: [],
        ChangeDetails: [],
        ChangeRequestName: [],
        ClientToken: [],
        DocumentName: [],
        DocumentVersion: [],
        Parameters: smithy_client_1._json,
        Runbooks: smithy_client_1._json,
        ScheduledEndTime: (_) => Math.round(_.getTime() / 1e3),
        ScheduledTime: (_) => Math.round(_.getTime() / 1e3),
        Tags: smithy_client_1._json
      });
    };
    var se_UpdateAssociationStatusRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AssociationStatus: (_) => se_AssociationStatus(_, context),
        InstanceId: [],
        Name: []
      });
    };
    var se_UpdateMaintenanceWindowTaskRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AlarmConfiguration: smithy_client_1._json,
        CutoffBehavior: [],
        Description: [],
        LoggingInfo: smithy_client_1._json,
        MaxConcurrency: [],
        MaxErrors: [],
        Name: [],
        Priority: [],
        Replace: [],
        ServiceRoleArn: [],
        Targets: smithy_client_1._json,
        TaskArn: [],
        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: smithy_client_1._json,
        WindowId: [],
        WindowTaskId: []
      });
    };
    var se_UpdateOpsItemRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ActualEndTime: (_) => Math.round(_.getTime() / 1e3),
        ActualStartTime: (_) => Math.round(_.getTime() / 1e3),
        Category: [],
        Description: [],
        Notifications: smithy_client_1._json,
        OperationalData: smithy_client_1._json,
        OperationalDataToDelete: smithy_client_1._json,
        OpsItemArn: [],
        OpsItemId: [],
        PlannedEndTime: (_) => Math.round(_.getTime() / 1e3),
        PlannedStartTime: (_) => Math.round(_.getTime() / 1e3),
        Priority: [],
        RelatedOpsItems: smithy_client_1._json,
        Severity: [],
        Status: [],
        Title: []
      });
    };
    var de_Activation = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ActivationId: smithy_client_1.expectString,
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DefaultInstanceName: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        ExpirationDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Expired: smithy_client_1.expectBoolean,
        IamRole: smithy_client_1.expectString,
        RegistrationLimit: smithy_client_1.expectInt32,
        RegistrationsCount: smithy_client_1.expectInt32,
        Tags: smithy_client_1._json
      });
    };
    var de_ActivationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Activation(entry, context);
      });
      return retVal;
    };
    var de_Association = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationId: smithy_client_1.expectString,
        AssociationName: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        LastExecutionDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Overview: smithy_client_1._json,
        ScheduleExpression: smithy_client_1.expectString,
        ScheduleOffset: smithy_client_1.expectInt32,
        TargetMaps: smithy_client_1._json,
        Targets: smithy_client_1._json
      });
    };
    var de_AssociationDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        ApplyOnlyAtCronInterval: smithy_client_1.expectBoolean,
        AssociationId: smithy_client_1.expectString,
        AssociationName: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        AutomationTargetParameterName: smithy_client_1.expectString,
        CalendarNames: smithy_client_1._json,
        ComplianceSeverity: smithy_client_1.expectString,
        Date: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DocumentVersion: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        LastExecutionDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastSuccessfulExecutionDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdateAssociationDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        OutputLocation: smithy_client_1._json,
        Overview: smithy_client_1._json,
        Parameters: smithy_client_1._json,
        ScheduleExpression: smithy_client_1.expectString,
        ScheduleOffset: smithy_client_1.expectInt32,
        Status: (_) => de_AssociationStatus(_, context),
        SyncCompliance: smithy_client_1.expectString,
        TargetLocations: smithy_client_1._json,
        TargetMaps: smithy_client_1._json,
        Targets: smithy_client_1._json,
        TriggeredAlarms: smithy_client_1._json
      });
    };
    var de_AssociationDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AssociationDescription(entry, context);
      });
      return retVal;
    };
    var de_AssociationExecution = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        AssociationId: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        CreatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DetailedStatus: smithy_client_1.expectString,
        ExecutionId: smithy_client_1.expectString,
        LastExecutionDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResourceCountByStatus: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        TriggeredAlarms: smithy_client_1._json
      });
    };
    var de_AssociationExecutionsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AssociationExecution(entry, context);
      });
      return retVal;
    };
    var de_AssociationExecutionTarget = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationId: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        DetailedStatus: smithy_client_1.expectString,
        ExecutionId: smithy_client_1.expectString,
        LastExecutionDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OutputSource: smithy_client_1._json,
        ResourceId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
      });
    };
    var de_AssociationExecutionTargetsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AssociationExecutionTarget(entry, context);
      });
      return retVal;
    };
    var de_AssociationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Association(entry, context);
      });
      return retVal;
    };
    var de_AssociationStatus = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AdditionalInfo: smithy_client_1.expectString,
        Date: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Message: smithy_client_1.expectString,
        Name: smithy_client_1.expectString
      });
    };
    var de_AssociationVersionInfo = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ApplyOnlyAtCronInterval: smithy_client_1.expectBoolean,
        AssociationId: smithy_client_1.expectString,
        AssociationName: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        CalendarNames: smithy_client_1._json,
        ComplianceSeverity: smithy_client_1.expectString,
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DocumentVersion: smithy_client_1.expectString,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        OutputLocation: smithy_client_1._json,
        Parameters: smithy_client_1._json,
        ScheduleExpression: smithy_client_1.expectString,
        ScheduleOffset: smithy_client_1.expectInt32,
        SyncCompliance: smithy_client_1.expectString,
        TargetLocations: smithy_client_1._json,
        TargetMaps: smithy_client_1._json,
        Targets: smithy_client_1._json
      });
    };
    var de_AssociationVersionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AssociationVersionInfo(entry, context);
      });
      return retVal;
    };
    var de_AutomationExecution = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        AssociationId: smithy_client_1.expectString,
        AutomationExecutionId: smithy_client_1.expectString,
        AutomationExecutionStatus: smithy_client_1.expectString,
        AutomationSubtype: smithy_client_1.expectString,
        ChangeRequestName: smithy_client_1.expectString,
        CurrentAction: smithy_client_1.expectString,
        CurrentStepName: smithy_client_1.expectString,
        DocumentName: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        ExecutedBy: smithy_client_1.expectString,
        ExecutionEndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureMessage: smithy_client_1.expectString,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Mode: smithy_client_1.expectString,
        OpsItemId: smithy_client_1.expectString,
        Outputs: smithy_client_1._json,
        Parameters: smithy_client_1._json,
        ParentAutomationExecutionId: smithy_client_1.expectString,
        ProgressCounters: smithy_client_1._json,
        ResolvedTargets: smithy_client_1._json,
        Runbooks: smithy_client_1._json,
        ScheduledTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StepExecutions: (_) => de_StepExecutionList(_, context),
        StepExecutionsTruncated: smithy_client_1.expectBoolean,
        Target: smithy_client_1.expectString,
        TargetLocations: smithy_client_1._json,
        TargetMaps: smithy_client_1._json,
        TargetParameterName: smithy_client_1.expectString,
        Targets: smithy_client_1._json,
        TriggeredAlarms: smithy_client_1._json
      });
    };
    var de_AutomationExecutionMetadata = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        AssociationId: smithy_client_1.expectString,
        AutomationExecutionId: smithy_client_1.expectString,
        AutomationExecutionStatus: smithy_client_1.expectString,
        AutomationSubtype: smithy_client_1.expectString,
        AutomationType: smithy_client_1.expectString,
        ChangeRequestName: smithy_client_1.expectString,
        CurrentAction: smithy_client_1.expectString,
        CurrentStepName: smithy_client_1.expectString,
        DocumentName: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        ExecutedBy: smithy_client_1.expectString,
        ExecutionEndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureMessage: smithy_client_1.expectString,
        LogFile: smithy_client_1.expectString,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Mode: smithy_client_1.expectString,
        OpsItemId: smithy_client_1.expectString,
        Outputs: smithy_client_1._json,
        ParentAutomationExecutionId: smithy_client_1.expectString,
        ResolvedTargets: smithy_client_1._json,
        Runbooks: smithy_client_1._json,
        ScheduledTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Target: smithy_client_1.expectString,
        TargetMaps: smithy_client_1._json,
        TargetParameterName: smithy_client_1.expectString,
        Targets: smithy_client_1._json,
        TriggeredAlarms: smithy_client_1._json
      });
    };
    var de_AutomationExecutionMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_AutomationExecutionMetadata(entry, context);
      });
      return retVal;
    };
    var de_Command = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        CloudWatchOutputConfig: smithy_client_1._json,
        CommandId: smithy_client_1.expectString,
        Comment: smithy_client_1.expectString,
        CompletedCount: smithy_client_1.expectInt32,
        DeliveryTimedOutCount: smithy_client_1.expectInt32,
        DocumentName: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        ErrorCount: smithy_client_1.expectInt32,
        ExpiresAfter: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        InstanceIds: smithy_client_1._json,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        NotificationConfig: smithy_client_1._json,
        OutputS3BucketName: smithy_client_1.expectString,
        OutputS3KeyPrefix: smithy_client_1.expectString,
        OutputS3Region: smithy_client_1.expectString,
        Parameters: smithy_client_1._json,
        RequestedDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ServiceRole: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TargetCount: smithy_client_1.expectInt32,
        Targets: smithy_client_1._json,
        TimeoutSeconds: smithy_client_1.expectInt32,
        TriggeredAlarms: smithy_client_1._json
      });
    };
    var de_CommandInvocation = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CloudWatchOutputConfig: smithy_client_1._json,
        CommandId: smithy_client_1.expectString,
        CommandPlugins: (_) => de_CommandPluginList(_, context),
        Comment: smithy_client_1.expectString,
        DocumentName: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        InstanceName: smithy_client_1.expectString,
        NotificationConfig: smithy_client_1._json,
        RequestedDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ServiceRole: smithy_client_1.expectString,
        StandardErrorUrl: smithy_client_1.expectString,
        StandardOutputUrl: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TraceOutput: smithy_client_1.expectString
      });
    };
    var de_CommandInvocationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_CommandInvocation(entry, context);
      });
      return retVal;
    };
    var de_CommandList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Command(entry, context);
      });
      return retVal;
    };
    var de_CommandPlugin = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Name: smithy_client_1.expectString,
        Output: smithy_client_1.expectString,
        OutputS3BucketName: smithy_client_1.expectString,
        OutputS3KeyPrefix: smithy_client_1.expectString,
        OutputS3Region: smithy_client_1.expectString,
        ResponseCode: smithy_client_1.expectInt32,
        ResponseFinishDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResponseStartDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StandardErrorUrl: smithy_client_1.expectString,
        StandardOutputUrl: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString
      });
    };
    var de_CommandPluginList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_CommandPlugin(entry, context);
      });
      return retVal;
    };
    var de_ComplianceExecutionSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExecutionId: smithy_client_1.expectString,
        ExecutionTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionType: smithy_client_1.expectString
      });
    };
    var de_ComplianceItem = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ComplianceType: smithy_client_1.expectString,
        Details: smithy_client_1._json,
        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_, context),
        Id: smithy_client_1.expectString,
        ResourceId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
        Severity: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Title: smithy_client_1.expectString
      });
    };
    var de_ComplianceItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ComplianceItem(entry, context);
      });
      return retVal;
    };
    var de_CreateAssociationBatchResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Failed: smithy_client_1._json,
        Successful: (_) => de_AssociationDescriptionList(_, context)
      });
    };
    var de_CreateAssociationResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationDescription: (_) => de_AssociationDescription(_, context)
      });
    };
    var de_CreateDocumentResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DocumentDescription: (_) => de_DocumentDescription(_, context)
      });
    };
    var de_DescribeActivationsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ActivationList: (_) => de_ActivationList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeAssociationExecutionsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationExecutions: (_) => de_AssociationExecutionsList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeAssociationExecutionTargetsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationExecutionTargets: (_) => de_AssociationExecutionTargetsList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeAssociationResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationDescription: (_) => de_AssociationDescription(_, context)
      });
    };
    var de_DescribeAutomationExecutionsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AutomationExecutionMetadataList: (_) => de_AutomationExecutionMetadataList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeAutomationStepExecutionsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        StepExecutions: (_) => de_StepExecutionList(_, context)
      });
    };
    var de_DescribeAvailablePatchesResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Patches: (_) => de_PatchList(_, context)
      });
    };
    var de_DescribeDocumentResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Document: (_) => de_DocumentDescription(_, context)
      });
    };
    var de_DescribeEffectivePatchesForPatchBaselineResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EffectivePatches: (_) => de_EffectivePatchList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeInstanceAssociationsStatusResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InstanceAssociationStatusInfos: (_) => de_InstanceAssociationStatusInfos(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeInstanceInformationResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InstanceInformationList: (_) => de_InstanceInformationList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeInstancePatchesResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Patches: (_) => de_PatchComplianceDataList(_, context)
      });
    };
    var de_DescribeInstancePatchStatesForPatchGroupResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InstancePatchStates: (_) => de_InstancePatchStatesList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeInstancePatchStatesResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InstancePatchStates: (_) => de_InstancePatchStateList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeInventoryDeletionsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InventoryDeletions: (_) => de_InventoryDeletionsList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_DescribeMaintenanceWindowExecutionsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        WindowExecutions: (_) => de_MaintenanceWindowExecutionList(_, context)
      });
    };
    var de_DescribeMaintenanceWindowExecutionTaskInvocationsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        WindowExecutionTaskInvocationIdentities: (_) => de_MaintenanceWindowExecutionTaskInvocationIdentityList(_, context)
      });
    };
    var de_DescribeMaintenanceWindowExecutionTasksResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        WindowExecutionTaskIdentities: (_) => de_MaintenanceWindowExecutionTaskIdentityList(_, context)
      });
    };
    var de_DescribeOpsItemsResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OpsItemSummaries: (_) => de_OpsItemSummaries(_, context)
      });
    };
    var de_DescribeParametersResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Parameters: (_) => de_ParameterMetadataList(_, context)
      });
    };
    var de_DescribeSessionsResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Sessions: (_) => de_SessionList(_, context)
      });
    };
    var de_DocumentDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ApprovedVersion: smithy_client_1.expectString,
        AttachmentsInformation: smithy_client_1._json,
        Author: smithy_client_1.expectString,
        Category: smithy_client_1._json,
        CategoryEnum: smithy_client_1._json,
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DefaultVersion: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        DisplayName: smithy_client_1.expectString,
        DocumentFormat: smithy_client_1.expectString,
        DocumentType: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        Hash: smithy_client_1.expectString,
        HashType: smithy_client_1.expectString,
        LatestVersion: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Owner: smithy_client_1.expectString,
        Parameters: smithy_client_1._json,
        PendingReviewVersion: smithy_client_1.expectString,
        PlatformTypes: smithy_client_1._json,
        Requires: smithy_client_1._json,
        ReviewInformation: (_) => de_ReviewInformationList(_, context),
        ReviewStatus: smithy_client_1.expectString,
        SchemaVersion: smithy_client_1.expectString,
        Sha1: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusInformation: smithy_client_1.expectString,
        Tags: smithy_client_1._json,
        TargetType: smithy_client_1.expectString,
        VersionName: smithy_client_1.expectString
      });
    };
    var de_DocumentIdentifier = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Author: smithy_client_1.expectString,
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DisplayName: smithy_client_1.expectString,
        DocumentFormat: smithy_client_1.expectString,
        DocumentType: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Owner: smithy_client_1.expectString,
        PlatformTypes: smithy_client_1._json,
        Requires: smithy_client_1._json,
        ReviewStatus: smithy_client_1.expectString,
        SchemaVersion: smithy_client_1.expectString,
        Tags: smithy_client_1._json,
        TargetType: smithy_client_1.expectString,
        VersionName: smithy_client_1.expectString
      });
    };
    var de_DocumentIdentifierList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_DocumentIdentifier(entry, context);
      });
      return retVal;
    };
    var de_DocumentMetadataResponseInfo = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ReviewerResponse: (_) => de_DocumentReviewerResponseList(_, context)
      });
    };
    var de_DocumentReviewerResponseList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_DocumentReviewerResponseSource(entry, context);
      });
      return retVal;
    };
    var de_DocumentReviewerResponseSource = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Comment: smithy_client_1._json,
        CreateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ReviewStatus: smithy_client_1.expectString,
        Reviewer: smithy_client_1.expectString,
        UpdatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
    };
    var de_DocumentVersionInfo = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DisplayName: smithy_client_1.expectString,
        DocumentFormat: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        IsDefaultVersion: smithy_client_1.expectBoolean,
        Name: smithy_client_1.expectString,
        ReviewStatus: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusInformation: smithy_client_1.expectString,
        VersionName: smithy_client_1.expectString
      });
    };
    var de_DocumentVersionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_DocumentVersionInfo(entry, context);
      });
      return retVal;
    };
    var de_EffectivePatch = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Patch: (_) => de_Patch(_, context),
        PatchStatus: (_) => de_PatchStatus(_, context)
      });
    };
    var de_EffectivePatchList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_EffectivePatch(entry, context);
      });
      return retVal;
    };
    var de_GetAutomationExecutionResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AutomationExecution: (_) => de_AutomationExecution(_, context)
      });
    };
    var de_GetDocumentResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AttachmentsContent: smithy_client_1._json,
        Content: smithy_client_1.expectString,
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DisplayName: smithy_client_1.expectString,
        DocumentFormat: smithy_client_1.expectString,
        DocumentType: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Requires: smithy_client_1._json,
        ReviewStatus: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        StatusInformation: smithy_client_1.expectString,
        VersionName: smithy_client_1.expectString
      });
    };
    var de_GetMaintenanceWindowExecutionResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskIds: smithy_client_1._json,
        WindowExecutionId: smithy_client_1.expectString
      });
    };
    var de_GetMaintenanceWindowExecutionTaskInvocationResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionId: smithy_client_1.expectString,
        InvocationId: smithy_client_1.expectString,
        OwnerInformation: smithy_client_1.expectString,
        Parameters: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskExecutionId: smithy_client_1.expectString,
        TaskType: smithy_client_1.expectString,
        WindowExecutionId: smithy_client_1.expectString,
        WindowTargetId: smithy_client_1.expectString
      });
    };
    var de_GetMaintenanceWindowExecutionTaskResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Priority: smithy_client_1.expectInt32,
        ServiceRole: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskArn: smithy_client_1.expectString,
        TaskExecutionId: smithy_client_1.expectString,
        TaskParameters: smithy_client_1._json,
        TriggeredAlarms: smithy_client_1._json,
        Type: smithy_client_1.expectString,
        WindowExecutionId: smithy_client_1.expectString
      });
    };
    var de_GetMaintenanceWindowResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AllowUnassociatedTargets: smithy_client_1.expectBoolean,
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Cutoff: smithy_client_1.expectInt32,
        Description: smithy_client_1.expectString,
        Duration: smithy_client_1.expectInt32,
        Enabled: smithy_client_1.expectBoolean,
        EndDate: smithy_client_1.expectString,
        ModifiedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        NextExecutionTime: smithy_client_1.expectString,
        Schedule: smithy_client_1.expectString,
        ScheduleOffset: smithy_client_1.expectInt32,
        ScheduleTimezone: smithy_client_1.expectString,
        StartDate: smithy_client_1.expectString,
        WindowId: smithy_client_1.expectString
      });
    };
    var de_GetMaintenanceWindowTaskResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        CutoffBehavior: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        LoggingInfo: smithy_client_1._json,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Priority: smithy_client_1.expectInt32,
        ServiceRoleArn: smithy_client_1.expectString,
        Targets: smithy_client_1._json,
        TaskArn: smithy_client_1.expectString,
        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: smithy_client_1._json,
        TaskType: smithy_client_1.expectString,
        WindowId: smithy_client_1.expectString,
        WindowTaskId: smithy_client_1.expectString
      });
    };
    var de_GetOpsItemResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        OpsItem: (_) => de_OpsItem(_, context)
      });
    };
    var de_GetParameterHistoryResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Parameters: (_) => de_ParameterHistoryList(_, context)
      });
    };
    var de_GetParameterResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Parameter: (_) => de_Parameter(_, context)
      });
    };
    var de_GetParametersByPathResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Parameters: (_) => de_ParameterList(_, context)
      });
    };
    var de_GetParametersResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InvalidParameters: smithy_client_1._json,
        Parameters: (_) => de_ParameterList(_, context)
      });
    };
    var de_GetPatchBaselineResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ApprovalRules: smithy_client_1._json,
        ApprovedPatches: smithy_client_1._json,
        ApprovedPatchesComplianceLevel: smithy_client_1.expectString,
        ApprovedPatchesEnableNonSecurity: smithy_client_1.expectBoolean,
        BaselineId: smithy_client_1.expectString,
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        GlobalFilters: smithy_client_1._json,
        ModifiedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        OperatingSystem: smithy_client_1.expectString,
        PatchGroups: smithy_client_1._json,
        RejectedPatches: smithy_client_1._json,
        RejectedPatchesAction: smithy_client_1.expectString,
        Sources: smithy_client_1._json
      });
    };
    var de_GetServiceSettingResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ServiceSetting: (_) => de_ServiceSetting(_, context)
      });
    };
    var de_InstanceAssociationStatusInfo = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationId: smithy_client_1.expectString,
        AssociationName: smithy_client_1.expectString,
        AssociationVersion: smithy_client_1.expectString,
        DetailedStatus: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        ErrorCode: smithy_client_1.expectString,
        ExecutionDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionSummary: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        OutputUrl: smithy_client_1._json,
        Status: smithy_client_1.expectString
      });
    };
    var de_InstanceAssociationStatusInfos = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstanceAssociationStatusInfo(entry, context);
      });
      return retVal;
    };
    var de_InstanceInformation = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ActivationId: smithy_client_1.expectString,
        AgentVersion: smithy_client_1.expectString,
        AssociationOverview: smithy_client_1._json,
        AssociationStatus: smithy_client_1.expectString,
        ComputerName: smithy_client_1.expectString,
        IPAddress: smithy_client_1.expectString,
        IamRole: smithy_client_1.expectString,
        InstanceId: smithy_client_1.expectString,
        IsLatestVersion: smithy_client_1.expectBoolean,
        LastAssociationExecutionDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastPingDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastSuccessfulAssociationExecutionDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        PingStatus: smithy_client_1.expectString,
        PlatformName: smithy_client_1.expectString,
        PlatformType: smithy_client_1.expectString,
        PlatformVersion: smithy_client_1.expectString,
        RegistrationDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResourceType: smithy_client_1.expectString,
        SourceId: smithy_client_1.expectString,
        SourceType: smithy_client_1.expectString
      });
    };
    var de_InstanceInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstanceInformation(entry, context);
      });
      return retVal;
    };
    var de_InstancePatchState = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BaselineId: smithy_client_1.expectString,
        CriticalNonCompliantCount: smithy_client_1.expectInt32,
        FailedCount: smithy_client_1.expectInt32,
        InstallOverrideList: smithy_client_1.expectString,
        InstalledCount: smithy_client_1.expectInt32,
        InstalledOtherCount: smithy_client_1.expectInt32,
        InstalledPendingRebootCount: smithy_client_1.expectInt32,
        InstalledRejectedCount: smithy_client_1.expectInt32,
        InstanceId: smithy_client_1.expectString,
        LastNoRebootInstallOperationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MissingCount: smithy_client_1.expectInt32,
        NotApplicableCount: smithy_client_1.expectInt32,
        Operation: smithy_client_1.expectString,
        OperationEndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OperationStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OtherNonCompliantCount: smithy_client_1.expectInt32,
        OwnerInformation: smithy_client_1.expectString,
        PatchGroup: smithy_client_1.expectString,
        RebootOption: smithy_client_1.expectString,
        SecurityNonCompliantCount: smithy_client_1.expectInt32,
        SnapshotId: smithy_client_1.expectString,
        UnreportedNotApplicableCount: smithy_client_1.expectInt32
      });
    };
    var de_InstancePatchStateList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstancePatchState(entry, context);
      });
      return retVal;
    };
    var de_InstancePatchStatesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InstancePatchState(entry, context);
      });
      return retVal;
    };
    var de_InventoryDeletionsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_InventoryDeletionStatusItem(entry, context);
      });
      return retVal;
    };
    var de_InventoryDeletionStatusItem = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DeletionId: smithy_client_1.expectString,
        DeletionStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        DeletionSummary: smithy_client_1._json,
        LastStatus: smithy_client_1.expectString,
        LastStatusMessage: smithy_client_1.expectString,
        LastStatusUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TypeName: smithy_client_1.expectString
      });
    };
    var de_ListAssociationsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Associations: (_) => de_AssociationList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ListAssociationVersionsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationVersions: (_) => de_AssociationVersionList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ListCommandInvocationsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CommandInvocations: (_) => de_CommandInvocationList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ListCommandsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Commands: (_) => de_CommandList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ListComplianceItemsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ComplianceItems: (_) => de_ComplianceItemList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ListDocumentMetadataHistoryResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Author: smithy_client_1.expectString,
        DocumentVersion: smithy_client_1.expectString,
        Metadata: (_) => de_DocumentMetadataResponseInfo(_, context),
        Name: smithy_client_1.expectString,
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ListDocumentsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DocumentIdentifiers: (_) => de_DocumentIdentifierList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ListDocumentVersionsResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DocumentVersions: (_) => de_DocumentVersionList(_, context),
        NextToken: smithy_client_1.expectString
      });
    };
    var de_ListOpsItemEventsResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Summaries: (_) => de_OpsItemEventSummaries(_, context)
      });
    };
    var de_ListOpsItemRelatedItemsResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        Summaries: (_) => de_OpsItemRelatedItemSummaries(_, context)
      });
    };
    var de_ListOpsMetadataResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OpsMetadataList: (_) => de_OpsMetadataList(_, context)
      });
    };
    var de_ListResourceComplianceSummariesResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        ResourceComplianceSummaryItems: (_) => de_ResourceComplianceSummaryItemList(_, context)
      });
    };
    var de_ListResourceDataSyncResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        ResourceDataSyncItems: (_) => de_ResourceDataSyncItemList(_, context)
      });
    };
    var de_MaintenanceWindowExecution = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        WindowExecutionId: smithy_client_1.expectString,
        WindowId: smithy_client_1.expectString
      });
    };
    var de_MaintenanceWindowExecutionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_MaintenanceWindowExecution(entry, context);
      });
      return retVal;
    };
    var de_MaintenanceWindowExecutionTaskIdentity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskArn: smithy_client_1.expectString,
        TaskExecutionId: smithy_client_1.expectString,
        TaskType: smithy_client_1.expectString,
        TriggeredAlarms: smithy_client_1._json,
        WindowExecutionId: smithy_client_1.expectString
      });
    };
    var de_MaintenanceWindowExecutionTaskIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_MaintenanceWindowExecutionTaskIdentity(entry, context);
      });
      return retVal;
    };
    var de_MaintenanceWindowExecutionTaskInvocationIdentity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionId: smithy_client_1.expectString,
        InvocationId: smithy_client_1.expectString,
        OwnerInformation: smithy_client_1.expectString,
        Parameters: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        StatusDetails: smithy_client_1.expectString,
        TaskExecutionId: smithy_client_1.expectString,
        TaskType: smithy_client_1.expectString,
        WindowExecutionId: smithy_client_1.expectString,
        WindowTargetId: smithy_client_1.expectString
      });
    };
    var de_MaintenanceWindowExecutionTaskInvocationIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_MaintenanceWindowExecutionTaskInvocationIdentity(entry, context);
      });
      return retVal;
    };
    var de_MaintenanceWindowLambdaParameters = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ClientContext: smithy_client_1.expectString,
        Payload: context.base64Decoder,
        Qualifier: smithy_client_1.expectString
      });
    };
    var de_MaintenanceWindowTaskInvocationParameters = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Automation: smithy_client_1._json,
        Lambda: (_) => de_MaintenanceWindowLambdaParameters(_, context),
        RunCommand: smithy_client_1._json,
        StepFunctions: smithy_client_1._json
      });
    };
    var de_OpsItem = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ActualEndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ActualStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Category: smithy_client_1.expectString,
        CreatedBy: smithy_client_1.expectString,
        CreatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        LastModifiedBy: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Notifications: smithy_client_1._json,
        OperationalData: smithy_client_1._json,
        OpsItemArn: smithy_client_1.expectString,
        OpsItemId: smithy_client_1.expectString,
        OpsItemType: smithy_client_1.expectString,
        PlannedEndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PlannedStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Priority: smithy_client_1.expectInt32,
        RelatedOpsItems: smithy_client_1._json,
        Severity: smithy_client_1.expectString,
        Source: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Title: smithy_client_1.expectString,
        Version: smithy_client_1.expectString
      });
    };
    var de_OpsItemEventSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_OpsItemEventSummary(entry, context);
      });
      return retVal;
    };
    var de_OpsItemEventSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreatedBy: smithy_client_1._json,
        CreatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Detail: smithy_client_1.expectString,
        DetailType: smithy_client_1.expectString,
        EventId: smithy_client_1.expectString,
        OpsItemId: smithy_client_1.expectString,
        Source: smithy_client_1.expectString
      });
    };
    var de_OpsItemRelatedItemSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_OpsItemRelatedItemSummary(entry, context);
      });
      return retVal;
    };
    var de_OpsItemRelatedItemSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationId: smithy_client_1.expectString,
        AssociationType: smithy_client_1.expectString,
        CreatedBy: smithy_client_1._json,
        CreatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedBy: smithy_client_1._json,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OpsItemId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
        ResourceUri: smithy_client_1.expectString
      });
    };
    var de_OpsItemSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_OpsItemSummary(entry, context);
      });
      return retVal;
    };
    var de_OpsItemSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ActualEndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ActualStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Category: smithy_client_1.expectString,
        CreatedBy: smithy_client_1.expectString,
        CreatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedBy: smithy_client_1.expectString,
        LastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OperationalData: smithy_client_1._json,
        OpsItemId: smithy_client_1.expectString,
        OpsItemType: smithy_client_1.expectString,
        PlannedEndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        PlannedStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Priority: smithy_client_1.expectInt32,
        Severity: smithy_client_1.expectString,
        Source: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        Title: smithy_client_1.expectString
      });
    };
    var de_OpsMetadata = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreationDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedUser: smithy_client_1.expectString,
        OpsMetadataArn: smithy_client_1.expectString,
        ResourceId: smithy_client_1.expectString
      });
    };
    var de_OpsMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_OpsMetadata(entry, context);
      });
      return retVal;
    };
    var de_Parameter = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ARN: smithy_client_1.expectString,
        DataType: smithy_client_1.expectString,
        LastModifiedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Selector: smithy_client_1.expectString,
        SourceResult: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
        Value: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong
      });
    };
    var de_ParameterHistory = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AllowedPattern: smithy_client_1.expectString,
        DataType: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        KeyId: smithy_client_1.expectString,
        Labels: smithy_client_1._json,
        LastModifiedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedUser: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Policies: smithy_client_1._json,
        Tier: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
        Value: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong
      });
    };
    var de_ParameterHistoryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ParameterHistory(entry, context);
      });
      return retVal;
    };
    var de_ParameterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Parameter(entry, context);
      });
      return retVal;
    };
    var de_ParameterMetadata = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AllowedPattern: smithy_client_1.expectString,
        DataType: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        KeyId: smithy_client_1.expectString,
        LastModifiedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedUser: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Policies: smithy_client_1._json,
        Tier: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
        Version: smithy_client_1.expectLong
      });
    };
    var de_ParameterMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ParameterMetadata(entry, context);
      });
      return retVal;
    };
    var de_Patch = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AdvisoryIds: smithy_client_1._json,
        Arch: smithy_client_1.expectString,
        BugzillaIds: smithy_client_1._json,
        CVEIds: smithy_client_1._json,
        Classification: smithy_client_1.expectString,
        ContentUrl: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        Epoch: smithy_client_1.expectInt32,
        Id: smithy_client_1.expectString,
        KbNumber: smithy_client_1.expectString,
        Language: smithy_client_1.expectString,
        MsrcNumber: smithy_client_1.expectString,
        MsrcSeverity: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Product: smithy_client_1.expectString,
        ProductFamily: smithy_client_1.expectString,
        Release: smithy_client_1.expectString,
        ReleaseDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Repository: smithy_client_1.expectString,
        Severity: smithy_client_1.expectString,
        Title: smithy_client_1.expectString,
        Vendor: smithy_client_1.expectString,
        Version: smithy_client_1.expectString
      });
    };
    var de_PatchComplianceData = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CVEIds: smithy_client_1.expectString,
        Classification: smithy_client_1.expectString,
        InstalledTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        KBId: smithy_client_1.expectString,
        Severity: smithy_client_1.expectString,
        State: smithy_client_1.expectString,
        Title: smithy_client_1.expectString
      });
    };
    var de_PatchComplianceDataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_PatchComplianceData(entry, context);
      });
      return retVal;
    };
    var de_PatchList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Patch(entry, context);
      });
      return retVal;
    };
    var de_PatchStatus = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ApprovalDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ComplianceLevel: smithy_client_1.expectString,
        DeploymentStatus: smithy_client_1.expectString
      });
    };
    var de_ResetServiceSettingResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ServiceSetting: (_) => de_ServiceSetting(_, context)
      });
    };
    var de_ResourceComplianceSummaryItem = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ComplianceType: smithy_client_1.expectString,
        CompliantSummary: smithy_client_1._json,
        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_, context),
        NonCompliantSummary: smithy_client_1._json,
        OverallSeverity: smithy_client_1.expectString,
        ResourceId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
      });
    };
    var de_ResourceComplianceSummaryItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ResourceComplianceSummaryItem(entry, context);
      });
      return retVal;
    };
    var de_ResourceDataSyncItem = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastStatus: smithy_client_1.expectString,
        LastSuccessfulSyncTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastSyncStatusMessage: smithy_client_1.expectString,
        LastSyncTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        S3Destination: smithy_client_1._json,
        SyncCreatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        SyncLastModifiedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        SyncName: smithy_client_1.expectString,
        SyncSource: smithy_client_1._json,
        SyncType: smithy_client_1.expectString
      });
    };
    var de_ResourceDataSyncItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ResourceDataSyncItem(entry, context);
      });
      return retVal;
    };
    var de_ReviewInformation = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ReviewedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Reviewer: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
      });
    };
    var de_ReviewInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ReviewInformation(entry, context);
      });
      return retVal;
    };
    var de_SendCommandResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Command: (_) => de_Command(_, context)
      });
    };
    var de_ServiceSetting = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ARN: smithy_client_1.expectString,
        LastModifiedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastModifiedUser: smithy_client_1.expectString,
        SettingId: smithy_client_1.expectString,
        SettingValue: smithy_client_1.expectString,
        Status: smithy_client_1.expectString
      });
    };
    var de_Session = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Details: smithy_client_1.expectString,
        DocumentName: smithy_client_1.expectString,
        EndDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MaxSessionDuration: smithy_client_1.expectString,
        OutputUrl: smithy_client_1._json,
        Owner: smithy_client_1.expectString,
        Reason: smithy_client_1.expectString,
        SessionId: smithy_client_1.expectString,
        StartDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
        Target: smithy_client_1.expectString
      });
    };
    var de_SessionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_Session(entry, context);
      });
      return retVal;
    };
    var de_StepExecution = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Action: smithy_client_1.expectString,
        ExecutionEndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExecutionStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FailureDetails: smithy_client_1._json,
        FailureMessage: smithy_client_1.expectString,
        Inputs: smithy_client_1._json,
        IsCritical: smithy_client_1.expectBoolean,
        IsEnd: smithy_client_1.expectBoolean,
        MaxAttempts: smithy_client_1.expectInt32,
        NextStep: smithy_client_1.expectString,
        OnFailure: smithy_client_1.expectString,
        Outputs: smithy_client_1._json,
        OverriddenParameters: smithy_client_1._json,
        Response: smithy_client_1.expectString,
        ResponseCode: smithy_client_1.expectString,
        StepExecutionId: smithy_client_1.expectString,
        StepName: smithy_client_1.expectString,
        StepStatus: smithy_client_1.expectString,
        TargetLocation: smithy_client_1._json,
        Targets: smithy_client_1._json,
        TimeoutSeconds: smithy_client_1.expectLong,
        TriggeredAlarms: smithy_client_1._json,
        ValidNextSteps: smithy_client_1._json
      });
    };
    var de_StepExecutionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_StepExecution(entry, context);
      });
      return retVal;
    };
    var de_UpdateAssociationResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationDescription: (_) => de_AssociationDescription(_, context)
      });
    };
    var de_UpdateAssociationStatusResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AssociationDescription: (_) => de_AssociationDescription(_, context)
      });
    };
    var de_UpdateDocumentResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DocumentDescription: (_) => de_DocumentDescription(_, context)
      });
    };
    var de_UpdateMaintenanceWindowTaskResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AlarmConfiguration: smithy_client_1._json,
        CutoffBehavior: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        LoggingInfo: smithy_client_1._json,
        MaxConcurrency: smithy_client_1.expectString,
        MaxErrors: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Priority: smithy_client_1.expectInt32,
        ServiceRoleArn: smithy_client_1.expectString,
        Targets: smithy_client_1._json,
        TaskArn: smithy_client_1.expectString,
        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),
        TaskParameters: smithy_client_1._json,
        WindowId: smithy_client_1.expectString,
        WindowTaskId: smithy_client_1.expectString
      });
    };
    var de_UpdatePatchBaselineResult = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ApprovalRules: smithy_client_1._json,
        ApprovedPatches: smithy_client_1._json,
        ApprovedPatchesComplianceLevel: smithy_client_1.expectString,
        ApprovedPatchesEnableNonSecurity: smithy_client_1.expectBoolean,
        BaselineId: smithy_client_1.expectString,
        CreatedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        GlobalFilters: smithy_client_1._json,
        ModifiedDate: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        OperatingSystem: smithy_client_1.expectString,
        RejectedPatches: smithy_client_1._json,
        RejectedPatchesAction: smithy_client_1.expectString,
        Sources: smithy_client_1._json
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var throwDefaultError = (0, smithy_client_1.withBaseException)(SSMServiceException_1.SSMServiceException);
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    function sharedHeaders(operation) {
      return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonSSM.${operation}`
      };
    }
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AddTagsToResourceCommand.js
var require_AddTagsToResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AddTagsToResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddTagsToResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var AddTagsToResourceCommand = class _AddTagsToResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AddTagsToResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AddTagsToResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_AddTagsToResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_AddTagsToResourceCommand)(output, context);
      }
    };
    exports.AddTagsToResourceCommand = AddTagsToResourceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AssociateOpsItemRelatedItemCommand.js
var require_AssociateOpsItemRelatedItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AssociateOpsItemRelatedItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociateOpsItemRelatedItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var AssociateOpsItemRelatedItemCommand = class _AssociateOpsItemRelatedItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssociateOpsItemRelatedItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AssociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_AssociateOpsItemRelatedItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_AssociateOpsItemRelatedItemCommand)(output, context);
      }
    };
    exports.AssociateOpsItemRelatedItemCommand = AssociateOpsItemRelatedItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelCommandCommand.js
var require_CancelCommandCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelCommandCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelCommandCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CancelCommandCommand = class _CancelCommandCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CancelCommandCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelCommandCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CancelCommandCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CancelCommandCommand)(output, context);
      }
    };
    exports.CancelCommandCommand = CancelCommandCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelMaintenanceWindowExecutionCommand.js
var require_CancelMaintenanceWindowExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelMaintenanceWindowExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelMaintenanceWindowExecutionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CancelMaintenanceWindowExecutionCommand = class _CancelMaintenanceWindowExecutionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CancelMaintenanceWindowExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CancelMaintenanceWindowExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CancelMaintenanceWindowExecutionCommand)(output, context);
      }
    };
    exports.CancelMaintenanceWindowExecutionCommand = CancelMaintenanceWindowExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateActivationCommand.js
var require_CreateActivationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateActivationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateActivationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateActivationCommand = class _CreateActivationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateActivationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateActivationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateActivationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateActivationCommand)(output, context);
      }
    };
    exports.CreateActivationCommand = CreateActivationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationBatchCommand.js
var require_CreateAssociationBatchCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationBatchCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAssociationBatchCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateAssociationBatchCommand = class _CreateAssociationBatchCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAssociationBatchCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationBatchCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAssociationBatchRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAssociationBatchResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateAssociationBatchCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateAssociationBatchCommand)(output, context);
      }
    };
    exports.CreateAssociationBatchCommand = CreateAssociationBatchCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationCommand.js
var require_CreateAssociationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAssociationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateAssociationCommand = class _CreateAssociationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateAssociationCommand)(output, context);
      }
    };
    exports.CreateAssociationCommand = CreateAssociationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateDocumentCommand.js
var require_CreateDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDocumentCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateDocumentCommand = class _CreateDocumentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateDocumentCommand)(output, context);
      }
    };
    exports.CreateDocumentCommand = CreateDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateMaintenanceWindowCommand.js
var require_CreateMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMaintenanceWindowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateMaintenanceWindowCommand = class _CreateMaintenanceWindowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateMaintenanceWindowCommand)(output, context);
      }
    };
    exports.CreateMaintenanceWindowCommand = CreateMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsItemCommand.js
var require_CreateOpsItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpsItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateOpsItemCommand = class _CreateOpsItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateOpsItemCommand)(output, context);
      }
    };
    exports.CreateOpsItemCommand = CreateOpsItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsMetadataCommand.js
var require_CreateOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpsMetadataCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateOpsMetadataCommand = class _CreateOpsMetadataCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateOpsMetadataCommand)(output, context);
      }
    };
    exports.CreateOpsMetadataCommand = CreateOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreatePatchBaselineCommand.js
var require_CreatePatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreatePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreatePatchBaselineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreatePatchBaselineCommand = class _CreatePatchBaselineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreatePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreatePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreatePatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreatePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreatePatchBaselineCommand)(output, context);
      }
    };
    exports.CreatePatchBaselineCommand = CreatePatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateResourceDataSyncCommand.js
var require_CreateResourceDataSyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateResourceDataSyncCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateResourceDataSyncCommand = class _CreateResourceDataSyncCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_CreateResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_CreateResourceDataSyncCommand)(output, context);
      }
    };
    exports.CreateResourceDataSyncCommand = CreateResourceDataSyncCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteActivationCommand.js
var require_DeleteActivationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteActivationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteActivationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteActivationCommand = class _DeleteActivationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteActivationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteActivationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteActivationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteActivationCommand)(output, context);
      }
    };
    exports.DeleteActivationCommand = DeleteActivationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteAssociationCommand.js
var require_DeleteAssociationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAssociationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteAssociationCommand = class _DeleteAssociationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteAssociationCommand)(output, context);
      }
    };
    exports.DeleteAssociationCommand = DeleteAssociationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteDocumentCommand.js
var require_DeleteDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDocumentCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteDocumentCommand = class _DeleteDocumentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteDocumentCommand)(output, context);
      }
    };
    exports.DeleteDocumentCommand = DeleteDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteInventoryCommand.js
var require_DeleteInventoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteInventoryCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteInventoryCommand = class _DeleteInventoryCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteInventoryCommand)(output, context);
      }
    };
    exports.DeleteInventoryCommand = DeleteInventoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteMaintenanceWindowCommand.js
var require_DeleteMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteMaintenanceWindowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteMaintenanceWindowCommand = class _DeleteMaintenanceWindowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeleteMaintenanceWindowCommand = DeleteMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteOpsMetadataCommand.js
var require_DeleteOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteOpsMetadataCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteOpsMetadataCommand = class _DeleteOpsMetadataCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteOpsMetadataCommand)(output, context);
      }
    };
    exports.DeleteOpsMetadataCommand = DeleteOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParameterCommand.js
var require_DeleteParameterCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteParameterCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteParameterCommand6 = class _DeleteParameterCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteParameterCommand)(output, context);
      }
    };
    exports.DeleteParameterCommand = DeleteParameterCommand6;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParametersCommand.js
var require_DeleteParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteParametersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteParametersCommand = class _DeleteParametersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteParametersCommand)(output, context);
      }
    };
    exports.DeleteParametersCommand = DeleteParametersCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeletePatchBaselineCommand.js
var require_DeletePatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeletePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeletePatchBaselineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeletePatchBaselineCommand = class _DeletePatchBaselineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeletePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeletePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeletePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeletePatchBaselineCommand)(output, context);
      }
    };
    exports.DeletePatchBaselineCommand = DeletePatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourceDataSyncCommand.js
var require_DeleteResourceDataSyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteResourceDataSyncCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteResourceDataSyncCommand = class _DeleteResourceDataSyncCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteResourceDataSyncCommand)(output, context);
      }
    };
    exports.DeleteResourceDataSyncCommand = DeleteResourceDataSyncCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourcePolicyCommand.js
var require_DeleteResourcePolicyCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourcePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteResourcePolicyCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteResourcePolicyCommand = class _DeleteResourcePolicyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteResourcePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeleteResourcePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeleteResourcePolicyCommand)(output, context);
      }
    };
    exports.DeleteResourcePolicyCommand = DeleteResourcePolicyCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterManagedInstanceCommand.js
var require_DeregisterManagedInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterManagedInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterManagedInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterManagedInstanceCommand = class _DeregisterManagedInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeregisterManagedInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterManagedInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeregisterManagedInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeregisterManagedInstanceCommand)(output, context);
      }
    };
    exports.DeregisterManagedInstanceCommand = DeregisterManagedInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterPatchBaselineForPatchGroupCommand.js
var require_DeregisterPatchBaselineForPatchGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterPatchBaselineForPatchGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterPatchBaselineForPatchGroupCommand = class _DeregisterPatchBaselineForPatchGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeregisterPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeregisterPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeregisterPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.DeregisterPatchBaselineForPatchGroupCommand = DeregisterPatchBaselineForPatchGroupCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTargetFromMaintenanceWindowCommand.js
var require_DeregisterTargetFromMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTargetFromMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTargetFromMaintenanceWindowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterTargetFromMaintenanceWindowCommand = class _DeregisterTargetFromMaintenanceWindowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeregisterTargetFromMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTargetFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeregisterTargetFromMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeregisterTargetFromMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeregisterTargetFromMaintenanceWindowCommand = DeregisterTargetFromMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTaskFromMaintenanceWindowCommand.js
var require_DeregisterTaskFromMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTaskFromMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTaskFromMaintenanceWindowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterTaskFromMaintenanceWindowCommand = class _DeregisterTaskFromMaintenanceWindowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeregisterTaskFromMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTaskFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DeregisterTaskFromMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DeregisterTaskFromMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeregisterTaskFromMaintenanceWindowCommand = DeregisterTaskFromMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeActivationsCommand.js
var require_DescribeActivationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeActivationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeActivationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeActivationsCommand = class _DescribeActivationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeActivationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeActivationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeActivationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeActivationsCommand)(output, context);
      }
    };
    exports.DescribeActivationsCommand = DescribeActivationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationCommand.js
var require_DescribeAssociationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAssociationCommand = class _DescribeAssociationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAssociationCommand)(output, context);
      }
    };
    exports.DescribeAssociationCommand = DescribeAssociationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionsCommand.js
var require_DescribeAssociationExecutionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationExecutionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAssociationExecutionsCommand = class _DescribeAssociationExecutionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAssociationExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAssociationExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAssociationExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAssociationExecutionsCommand = DescribeAssociationExecutionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionTargetsCommand.js
var require_DescribeAssociationExecutionTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationExecutionTargetsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAssociationExecutionTargetsCommand = class _DescribeAssociationExecutionTargetsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAssociationExecutionTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAssociationExecutionTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAssociationExecutionTargetsCommand)(output, context);
      }
    };
    exports.DescribeAssociationExecutionTargetsCommand = DescribeAssociationExecutionTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationExecutionsCommand.js
var require_DescribeAutomationExecutionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAutomationExecutionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAutomationExecutionsCommand = class _DescribeAutomationExecutionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAutomationExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAutomationExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAutomationExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAutomationExecutionsCommand = DescribeAutomationExecutionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationStepExecutionsCommand.js
var require_DescribeAutomationStepExecutionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationStepExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAutomationStepExecutionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAutomationStepExecutionsCommand = class _DescribeAutomationStepExecutionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAutomationStepExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationStepExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAutomationStepExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAutomationStepExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAutomationStepExecutionsCommand = DescribeAutomationStepExecutionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAvailablePatchesCommand.js
var require_DescribeAvailablePatchesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAvailablePatchesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAvailablePatchesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeAvailablePatchesCommand = class _DescribeAvailablePatchesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAvailablePatchesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAvailablePatchesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeAvailablePatchesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeAvailablePatchesCommand)(output, context);
      }
    };
    exports.DescribeAvailablePatchesCommand = DescribeAvailablePatchesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentCommand.js
var require_DescribeDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDocumentCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeDocumentCommand = class _DescribeDocumentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeDocumentCommand)(output, context);
      }
    };
    exports.DescribeDocumentCommand = DescribeDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentPermissionCommand.js
var require_DescribeDocumentPermissionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDocumentPermissionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeDocumentPermissionCommand = class _DescribeDocumentPermissionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeDocumentPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeDocumentPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeDocumentPermissionCommand)(output, context);
      }
    };
    exports.DescribeDocumentPermissionCommand = DescribeDocumentPermissionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectiveInstanceAssociationsCommand.js
var require_DescribeEffectiveInstanceAssociationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectiveInstanceAssociationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEffectiveInstanceAssociationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeEffectiveInstanceAssociationsCommand = class _DescribeEffectiveInstanceAssociationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeEffectiveInstanceAssociationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectiveInstanceAssociationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeEffectiveInstanceAssociationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeEffectiveInstanceAssociationsCommand)(output, context);
      }
    };
    exports.DescribeEffectiveInstanceAssociationsCommand = DescribeEffectiveInstanceAssociationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectivePatchesForPatchBaselineCommand.js
var require_DescribeEffectivePatchesForPatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectivePatchesForPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEffectivePatchesForPatchBaselineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeEffectivePatchesForPatchBaselineCommand = class _DescribeEffectivePatchesForPatchBaselineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeEffectivePatchesForPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectivePatchesForPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeEffectivePatchesForPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeEffectivePatchesForPatchBaselineCommand)(output, context);
      }
    };
    exports.DescribeEffectivePatchesForPatchBaselineCommand = DescribeEffectivePatchesForPatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceAssociationsStatusCommand.js
var require_DescribeInstanceAssociationsStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceAssociationsStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstanceAssociationsStatusCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstanceAssociationsStatusCommand = class _DescribeInstanceAssociationsStatusCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeInstanceAssociationsStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceAssociationsStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstanceAssociationsStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstanceAssociationsStatusCommand)(output, context);
      }
    };
    exports.DescribeInstanceAssociationsStatusCommand = DescribeInstanceAssociationsStatusCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceInformationCommand.js
var require_DescribeInstanceInformationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceInformationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstanceInformationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstanceInformationCommand = class _DescribeInstanceInformationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeInstanceInformationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceInformationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstanceInformationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstanceInformationCommand)(output, context);
      }
    };
    exports.DescribeInstanceInformationCommand = DescribeInstanceInformationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchesCommand.js
var require_DescribeInstancePatchesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstancePatchesCommand = class _DescribeInstancePatchesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeInstancePatchesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstancePatchesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstancePatchesCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchesCommand = DescribeInstancePatchesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesCommand.js
var require_DescribeInstancePatchStatesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchStatesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstancePatchStatesCommand = class _DescribeInstancePatchStatesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeInstancePatchStatesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstancePatchStatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstancePatchStatesCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchStatesCommand = DescribeInstancePatchStatesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesForPatchGroupCommand.js
var require_DescribeInstancePatchStatesForPatchGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchStatesForPatchGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInstancePatchStatesForPatchGroupCommand = class _DescribeInstancePatchStatesForPatchGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeInstancePatchStatesForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInstancePatchStatesForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInstancePatchStatesForPatchGroupCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchStatesForPatchGroupCommand = DescribeInstancePatchStatesForPatchGroupCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInventoryDeletionsCommand.js
var require_DescribeInventoryDeletionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInventoryDeletionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInventoryDeletionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeInventoryDeletionsCommand = class _DescribeInventoryDeletionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeInventoryDeletionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInventoryDeletionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeInventoryDeletionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeInventoryDeletionsCommand)(output, context);
      }
    };
    exports.DescribeInventoryDeletionsCommand = DescribeInventoryDeletionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionsCommand.js
var require_DescribeMaintenanceWindowExecutionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowExecutionsCommand = class _DescribeMaintenanceWindowExecutionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeMaintenanceWindowExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowExecutionsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionsCommand = DescribeMaintenanceWindowExecutionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand.js
var require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand = class _DescribeMaintenanceWindowExecutionTaskInvocationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeMaintenanceWindowExecutionTaskInvocationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTaskInvocationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTasksCommand.js
var require_DescribeMaintenanceWindowExecutionTasksCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionTasksCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowExecutionTasksCommand = class _DescribeMaintenanceWindowExecutionTasksCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeMaintenanceWindowExecutionTasksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowExecutionTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowExecutionTasksCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionTasksCommand = DescribeMaintenanceWindowExecutionTasksCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowScheduleCommand.js
var require_DescribeMaintenanceWindowScheduleCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowScheduleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowScheduleCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowScheduleCommand = class _DescribeMaintenanceWindowScheduleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeMaintenanceWindowScheduleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowScheduleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowScheduleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowScheduleCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowScheduleCommand = DescribeMaintenanceWindowScheduleCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsCommand.js
var require_DescribeMaintenanceWindowsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowsCommand = class _DescribeMaintenanceWindowsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeMaintenanceWindowsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowsCommand = DescribeMaintenanceWindowsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsForTargetCommand.js
var require_DescribeMaintenanceWindowsForTargetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsForTargetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowsForTargetCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowsForTargetCommand = class _DescribeMaintenanceWindowsForTargetCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeMaintenanceWindowsForTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsForTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowsForTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowsForTargetCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowsForTargetCommand = DescribeMaintenanceWindowsForTargetCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTargetsCommand.js
var require_DescribeMaintenanceWindowTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowTargetsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowTargetsCommand = class _DescribeMaintenanceWindowTargetsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeMaintenanceWindowTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowTargetsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowTargetsCommand = DescribeMaintenanceWindowTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTasksCommand.js
var require_DescribeMaintenanceWindowTasksCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowTasksCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeMaintenanceWindowTasksCommand = class _DescribeMaintenanceWindowTasksCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeMaintenanceWindowTasksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTasksResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeMaintenanceWindowTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeMaintenanceWindowTasksCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowTasksCommand = DescribeMaintenanceWindowTasksCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeOpsItemsCommand.js
var require_DescribeOpsItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeOpsItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeOpsItemsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeOpsItemsCommand = class _DescribeOpsItemsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeOpsItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeOpsItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeOpsItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeOpsItemsCommand)(output, context);
      }
    };
    exports.DescribeOpsItemsCommand = DescribeOpsItemsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeParametersCommand.js
var require_DescribeParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeParametersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeParametersCommand = class _DescribeParametersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeParametersCommand)(output, context);
      }
    };
    exports.DescribeParametersCommand = DescribeParametersCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchBaselinesCommand.js
var require_DescribePatchBaselinesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchBaselinesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchBaselinesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribePatchBaselinesCommand = class _DescribePatchBaselinesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribePatchBaselinesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchBaselinesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribePatchBaselinesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribePatchBaselinesCommand)(output, context);
      }
    };
    exports.DescribePatchBaselinesCommand = DescribePatchBaselinesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupsCommand.js
var require_DescribePatchGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchGroupsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribePatchGroupsCommand = class _DescribePatchGroupsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribePatchGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribePatchGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribePatchGroupsCommand)(output, context);
      }
    };
    exports.DescribePatchGroupsCommand = DescribePatchGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupStateCommand.js
var require_DescribePatchGroupStateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupStateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchGroupStateCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribePatchGroupStateCommand = class _DescribePatchGroupStateCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribePatchGroupStateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupStateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribePatchGroupStateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribePatchGroupStateCommand)(output, context);
      }
    };
    exports.DescribePatchGroupStateCommand = DescribePatchGroupStateCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchPropertiesCommand.js
var require_DescribePatchPropertiesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchPropertiesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchPropertiesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribePatchPropertiesCommand = class _DescribePatchPropertiesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribePatchPropertiesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchPropertiesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribePatchPropertiesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribePatchPropertiesCommand)(output, context);
      }
    };
    exports.DescribePatchPropertiesCommand = DescribePatchPropertiesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeSessionsCommand.js
var require_DescribeSessionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeSessionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeSessionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeSessionsCommand = class _DescribeSessionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeSessionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeSessionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DescribeSessionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DescribeSessionsCommand)(output, context);
      }
    };
    exports.DescribeSessionsCommand = DescribeSessionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DisassociateOpsItemRelatedItemCommand.js
var require_DisassociateOpsItemRelatedItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DisassociateOpsItemRelatedItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociateOpsItemRelatedItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DisassociateOpsItemRelatedItemCommand = class _DisassociateOpsItemRelatedItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisassociateOpsItemRelatedItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DisassociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_DisassociateOpsItemRelatedItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_DisassociateOpsItemRelatedItemCommand)(output, context);
      }
    };
    exports.DisassociateOpsItemRelatedItemCommand = DisassociateOpsItemRelatedItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetAutomationExecutionCommand.js
var require_GetAutomationExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAutomationExecutionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetAutomationExecutionCommand = class _GetAutomationExecutionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetAutomationExecutionCommand)(output, context);
      }
    };
    exports.GetAutomationExecutionCommand = GetAutomationExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCalendarStateCommand.js
var require_GetCalendarStateCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCalendarStateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCalendarStateCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetCalendarStateCommand = class _GetCalendarStateCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetCalendarStateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCalendarStateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetCalendarStateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetCalendarStateCommand)(output, context);
      }
    };
    exports.GetCalendarStateCommand = GetCalendarStateCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCommandInvocationCommand.js
var require_GetCommandInvocationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCommandInvocationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCommandInvocationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetCommandInvocationCommand = class _GetCommandInvocationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetCommandInvocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCommandInvocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetCommandInvocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetCommandInvocationCommand)(output, context);
      }
    };
    exports.GetCommandInvocationCommand = GetCommandInvocationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetConnectionStatusCommand.js
var require_GetConnectionStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetConnectionStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetConnectionStatusCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetConnectionStatusCommand = class _GetConnectionStatusCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetConnectionStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetConnectionStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetConnectionStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetConnectionStatusCommand)(output, context);
      }
    };
    exports.GetConnectionStatusCommand = GetConnectionStatusCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDefaultPatchBaselineCommand.js
var require_GetDefaultPatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDefaultPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDefaultPatchBaselineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDefaultPatchBaselineCommand = class _GetDefaultPatchBaselineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetDefaultPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetDefaultPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetDefaultPatchBaselineCommand)(output, context);
      }
    };
    exports.GetDefaultPatchBaselineCommand = GetDefaultPatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDeployablePatchSnapshotForInstanceCommand.js
var require_GetDeployablePatchSnapshotForInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDeployablePatchSnapshotForInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDeployablePatchSnapshotForInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDeployablePatchSnapshotForInstanceCommand = class _GetDeployablePatchSnapshotForInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetDeployablePatchSnapshotForInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDeployablePatchSnapshotForInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetDeployablePatchSnapshotForInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetDeployablePatchSnapshotForInstanceCommand)(output, context);
      }
    };
    exports.GetDeployablePatchSnapshotForInstanceCommand = GetDeployablePatchSnapshotForInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDocumentCommand.js
var require_GetDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDocumentCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDocumentCommand = class _GetDocumentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetDocumentCommand)(output, context);
      }
    };
    exports.GetDocumentCommand = GetDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventoryCommand.js
var require_GetInventoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInventoryCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetInventoryCommand = class _GetInventoryCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetInventoryCommand)(output, context);
      }
    };
    exports.GetInventoryCommand = GetInventoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventorySchemaCommand.js
var require_GetInventorySchemaCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventorySchemaCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInventorySchemaCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetInventorySchemaCommand = class _GetInventorySchemaCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetInventorySchemaCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventorySchemaCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetInventorySchemaCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetInventorySchemaCommand)(output, context);
      }
    };
    exports.GetInventorySchemaCommand = GetInventorySchemaCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowCommand.js
var require_GetMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowCommand = class _GetMaintenanceWindowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowCommand = GetMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionCommand.js
var require_GetMaintenanceWindowExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowExecutionCommand = class _GetMaintenanceWindowExecutionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMaintenanceWindowExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowExecutionCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionCommand = GetMaintenanceWindowExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskCommand.js
var require_GetMaintenanceWindowExecutionTaskCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionTaskCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowExecutionTaskCommand = class _GetMaintenanceWindowExecutionTaskCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMaintenanceWindowExecutionTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowExecutionTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowExecutionTaskCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionTaskCommand = GetMaintenanceWindowExecutionTaskCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskInvocationCommand.js
var require_GetMaintenanceWindowExecutionTaskInvocationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskInvocationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionTaskInvocationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowExecutionTaskInvocationCommand = class _GetMaintenanceWindowExecutionTaskInvocationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMaintenanceWindowExecutionTaskInvocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskInvocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowExecutionTaskInvocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowExecutionTaskInvocationCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionTaskInvocationCommand = GetMaintenanceWindowExecutionTaskInvocationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowTaskCommand.js
var require_GetMaintenanceWindowTaskCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowTaskCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetMaintenanceWindowTaskCommand = class _GetMaintenanceWindowTaskCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMaintenanceWindowTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetMaintenanceWindowTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetMaintenanceWindowTaskCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowTaskCommand = GetMaintenanceWindowTaskCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsItemCommand.js
var require_GetOpsItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetOpsItemCommand = class _GetOpsItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetOpsItemCommand)(output, context);
      }
    };
    exports.GetOpsItemCommand = GetOpsItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsMetadataCommand.js
var require_GetOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsMetadataCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetOpsMetadataCommand = class _GetOpsMetadataCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetOpsMetadataCommand)(output, context);
      }
    };
    exports.GetOpsMetadataCommand = GetOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsSummaryCommand.js
var require_GetOpsSummaryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsSummaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsSummaryCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetOpsSummaryCommand = class _GetOpsSummaryCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetOpsSummaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsSummaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetOpsSummaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetOpsSummaryCommand)(output, context);
      }
    };
    exports.GetOpsSummaryCommand = GetOpsSummaryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterCommand.js
var require_GetParameterCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParameterCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParameterCommand3 = class _GetParameterCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetParameterResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetParameterCommand)(output, context);
      }
    };
    exports.GetParameterCommand = GetParameterCommand3;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterHistoryCommand.js
var require_GetParameterHistoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterHistoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParameterHistoryCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParameterHistoryCommand = class _GetParameterHistoryCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetParameterHistoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterHistoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetParameterHistoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetParameterHistoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetParameterHistoryCommand)(output, context);
      }
    };
    exports.GetParameterHistoryCommand = GetParameterHistoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersByPathCommand.js
var require_GetParametersByPathCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersByPathCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersByPathCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParametersByPathCommand = class _GetParametersByPathCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetParametersByPathCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersByPathCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetParametersByPathResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetParametersByPathCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetParametersByPathCommand)(output, context);
      }
    };
    exports.GetParametersByPathCommand = GetParametersByPathCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersCommand.js
var require_GetParametersCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetParametersCommand = class _GetParametersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetParametersResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetParametersCommand)(output, context);
      }
    };
    exports.GetParametersCommand = GetParametersCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineCommand.js
var require_GetPatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPatchBaselineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetPatchBaselineCommand = class _GetPatchBaselineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.GetPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetPatchBaselineCommand)(output, context);
      }
    };
    exports.GetPatchBaselineCommand = GetPatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineForPatchGroupCommand.js
var require_GetPatchBaselineForPatchGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPatchBaselineForPatchGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetPatchBaselineForPatchGroupCommand = class _GetPatchBaselineForPatchGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.GetPatchBaselineForPatchGroupCommand = GetPatchBaselineForPatchGroupCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetResourcePoliciesCommand.js
var require_GetResourcePoliciesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetResourcePoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetResourcePoliciesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetResourcePoliciesCommand = class _GetResourcePoliciesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetResourcePoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetResourcePoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetResourcePoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetResourcePoliciesCommand)(output, context);
      }
    };
    exports.GetResourcePoliciesCommand = GetResourcePoliciesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetServiceSettingCommand.js
var require_GetServiceSettingCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetServiceSettingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetServiceSettingCommand = class _GetServiceSettingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_GetServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_GetServiceSettingCommand)(output, context);
      }
    };
    exports.GetServiceSettingCommand = GetServiceSettingCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/LabelParameterVersionCommand.js
var require_LabelParameterVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/LabelParameterVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LabelParameterVersionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var LabelParameterVersionCommand = class _LabelParameterVersionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _LabelParameterVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "LabelParameterVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_LabelParameterVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_LabelParameterVersionCommand)(output, context);
      }
    };
    exports.LabelParameterVersionCommand = LabelParameterVersionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationsCommand.js
var require_ListAssociationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAssociationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListAssociationsCommand = class _ListAssociationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAssociationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListAssociationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListAssociationsCommand)(output, context);
      }
    };
    exports.ListAssociationsCommand = ListAssociationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationVersionsCommand.js
var require_ListAssociationVersionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAssociationVersionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListAssociationVersionsCommand = class _ListAssociationVersionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAssociationVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListAssociationVersionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListAssociationVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListAssociationVersionsCommand)(output, context);
      }
    };
    exports.ListAssociationVersionsCommand = ListAssociationVersionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandInvocationsCommand.js
var require_ListCommandInvocationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandInvocationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCommandInvocationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListCommandInvocationsCommand = class _ListCommandInvocationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListCommandInvocationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandInvocationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListCommandInvocationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListCommandInvocationsCommand)(output, context);
      }
    };
    exports.ListCommandInvocationsCommand = ListCommandInvocationsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandsCommand.js
var require_ListCommandsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCommandsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListCommandsCommand = class _ListCommandsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListCommandsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_1_1.ListCommandsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListCommandsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListCommandsCommand)(output, context);
      }
    };
    exports.ListCommandsCommand = ListCommandsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceItemsCommand.js
var require_ListComplianceItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComplianceItemsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListComplianceItemsCommand = class _ListComplianceItemsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListComplianceItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListComplianceItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListComplianceItemsCommand)(output, context);
      }
    };
    exports.ListComplianceItemsCommand = ListComplianceItemsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceSummariesCommand.js
var require_ListComplianceSummariesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceSummariesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComplianceSummariesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListComplianceSummariesCommand = class _ListComplianceSummariesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListComplianceSummariesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceSummariesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListComplianceSummariesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListComplianceSummariesCommand)(output, context);
      }
    };
    exports.ListComplianceSummariesCommand = ListComplianceSummariesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentMetadataHistoryCommand.js
var require_ListDocumentMetadataHistoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentMetadataHistoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentMetadataHistoryCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDocumentMetadataHistoryCommand = class _ListDocumentMetadataHistoryCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListDocumentMetadataHistoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentMetadataHistoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListDocumentMetadataHistoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListDocumentMetadataHistoryCommand)(output, context);
      }
    };
    exports.ListDocumentMetadataHistoryCommand = ListDocumentMetadataHistoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentsCommand.js
var require_ListDocumentsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDocumentsCommand = class _ListDocumentsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListDocumentsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListDocumentsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListDocumentsCommand)(output, context);
      }
    };
    exports.ListDocumentsCommand = ListDocumentsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentVersionsCommand.js
var require_ListDocumentVersionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentVersionsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDocumentVersionsCommand = class _ListDocumentVersionsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListDocumentVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListDocumentVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListDocumentVersionsCommand)(output, context);
      }
    };
    exports.ListDocumentVersionsCommand = ListDocumentVersionsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListInventoryEntriesCommand.js
var require_ListInventoryEntriesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListInventoryEntriesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListInventoryEntriesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListInventoryEntriesCommand = class _ListInventoryEntriesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListInventoryEntriesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListInventoryEntriesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListInventoryEntriesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListInventoryEntriesCommand)(output, context);
      }
    };
    exports.ListInventoryEntriesCommand = ListInventoryEntriesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemEventsCommand.js
var require_ListOpsItemEventsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemEventsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsItemEventsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListOpsItemEventsCommand = class _ListOpsItemEventsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListOpsItemEventsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemEventsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListOpsItemEventsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListOpsItemEventsCommand)(output, context);
      }
    };
    exports.ListOpsItemEventsCommand = ListOpsItemEventsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemRelatedItemsCommand.js
var require_ListOpsItemRelatedItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemRelatedItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsItemRelatedItemsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListOpsItemRelatedItemsCommand = class _ListOpsItemRelatedItemsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListOpsItemRelatedItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemRelatedItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListOpsItemRelatedItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListOpsItemRelatedItemsCommand)(output, context);
      }
    };
    exports.ListOpsItemRelatedItemsCommand = ListOpsItemRelatedItemsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsMetadataCommand.js
var require_ListOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsMetadataCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListOpsMetadataCommand = class _ListOpsMetadataCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListOpsMetadataCommand)(output, context);
      }
    };
    exports.ListOpsMetadataCommand = ListOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceComplianceSummariesCommand.js
var require_ListResourceComplianceSummariesCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceComplianceSummariesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceComplianceSummariesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListResourceComplianceSummariesCommand = class _ListResourceComplianceSummariesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListResourceComplianceSummariesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceComplianceSummariesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListResourceComplianceSummariesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListResourceComplianceSummariesCommand)(output, context);
      }
    };
    exports.ListResourceComplianceSummariesCommand = ListResourceComplianceSummariesCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceDataSyncCommand.js
var require_ListResourceDataSyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceDataSyncCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListResourceDataSyncCommand = class _ListResourceDataSyncCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListResourceDataSyncCommand)(output, context);
      }
    };
    exports.ListResourceDataSyncCommand = ListResourceDataSyncCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListTagsForResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsForResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListTagsForResourceCommand = class _ListTagsForResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ListTagsForResourceCommand)(output, context);
      }
    };
    exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ModifyDocumentPermissionCommand.js
var require_ModifyDocumentPermissionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ModifyDocumentPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDocumentPermissionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ModifyDocumentPermissionCommand = class _ModifyDocumentPermissionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ModifyDocumentPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ModifyDocumentPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ModifyDocumentPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ModifyDocumentPermissionCommand)(output, context);
      }
    };
    exports.ModifyDocumentPermissionCommand = ModifyDocumentPermissionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutComplianceItemsCommand.js
var require_PutComplianceItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutComplianceItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutComplianceItemsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutComplianceItemsCommand = class _PutComplianceItemsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutComplianceItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutComplianceItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_PutComplianceItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_PutComplianceItemsCommand)(output, context);
      }
    };
    exports.PutComplianceItemsCommand = PutComplianceItemsCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutInventoryCommand.js
var require_PutInventoryCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutInventoryCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutInventoryCommand = class _PutInventoryCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_PutInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_PutInventoryCommand)(output, context);
      }
    };
    exports.PutInventoryCommand = PutInventoryCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutParameterCommand.js
var require_PutParameterCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutParameterCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutParameterCommand6 = class _PutParameterCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutParameterRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_PutParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_PutParameterCommand)(output, context);
      }
    };
    exports.PutParameterCommand = PutParameterCommand6;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutResourcePolicyCommand.js
var require_PutResourcePolicyCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutResourcePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutResourcePolicyCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutResourcePolicyCommand = class _PutResourcePolicyCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutResourcePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_PutResourcePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_PutResourcePolicyCommand)(output, context);
      }
    };
    exports.PutResourcePolicyCommand = PutResourcePolicyCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterDefaultPatchBaselineCommand.js
var require_RegisterDefaultPatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterDefaultPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterDefaultPatchBaselineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterDefaultPatchBaselineCommand = class _RegisterDefaultPatchBaselineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterDefaultPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_RegisterDefaultPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RegisterDefaultPatchBaselineCommand)(output, context);
      }
    };
    exports.RegisterDefaultPatchBaselineCommand = RegisterDefaultPatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterPatchBaselineForPatchGroupCommand.js
var require_RegisterPatchBaselineForPatchGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterPatchBaselineForPatchGroupCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterPatchBaselineForPatchGroupCommand = class _RegisterPatchBaselineForPatchGroupCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_RegisterPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RegisterPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.RegisterPatchBaselineForPatchGroupCommand = RegisterPatchBaselineForPatchGroupCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTargetWithMaintenanceWindowCommand.js
var require_RegisterTargetWithMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTargetWithMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTargetWithMaintenanceWindowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterTargetWithMaintenanceWindowCommand = class _RegisterTargetWithMaintenanceWindowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterTargetWithMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTargetWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_RegisterTargetWithMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RegisterTargetWithMaintenanceWindowCommand)(output, context);
      }
    };
    exports.RegisterTargetWithMaintenanceWindowCommand = RegisterTargetWithMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTaskWithMaintenanceWindowCommand.js
var require_RegisterTaskWithMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTaskWithMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTaskWithMaintenanceWindowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterTaskWithMaintenanceWindowCommand = class _RegisterTaskWithMaintenanceWindowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterTaskWithMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTaskWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_RegisterTaskWithMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RegisterTaskWithMaintenanceWindowCommand)(output, context);
      }
    };
    exports.RegisterTaskWithMaintenanceWindowCommand = RegisterTaskWithMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RemoveTagsFromResourceCommand.js
var require_RemoveTagsFromResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RemoveTagsFromResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveTagsFromResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RemoveTagsFromResourceCommand = class _RemoveTagsFromResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RemoveTagsFromResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RemoveTagsFromResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_RemoveTagsFromResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_RemoveTagsFromResourceCommand)(output, context);
      }
    };
    exports.RemoveTagsFromResourceCommand = RemoveTagsFromResourceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResetServiceSettingCommand.js
var require_ResetServiceSettingCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResetServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResetServiceSettingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ResetServiceSettingCommand = class _ResetServiceSettingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ResetServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResetServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ResetServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ResetServiceSettingCommand)(output, context);
      }
    };
    exports.ResetServiceSettingCommand = ResetServiceSettingCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResumeSessionCommand.js
var require_ResumeSessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResumeSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResumeSessionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ResumeSessionCommand = class _ResumeSessionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ResumeSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResumeSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_ResumeSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_ResumeSessionCommand)(output, context);
      }
    };
    exports.ResumeSessionCommand = ResumeSessionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendAutomationSignalCommand.js
var require_SendAutomationSignalCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendAutomationSignalCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendAutomationSignalCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var SendAutomationSignalCommand = class _SendAutomationSignalCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SendAutomationSignalCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendAutomationSignalCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_SendAutomationSignalCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_SendAutomationSignalCommand)(output, context);
      }
    };
    exports.SendAutomationSignalCommand = SendAutomationSignalCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendCommandCommand.js
var require_SendCommandCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendCommandCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendCommandCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_1_1 = require_models_12();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var SendCommandCommand = class _SendCommandCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SendCommandCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendCommandCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SendCommandRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SendCommandResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_SendCommandCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_SendCommandCommand)(output, context);
      }
    };
    exports.SendCommandCommand = SendCommandCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAssociationsOnceCommand.js
var require_StartAssociationsOnceCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAssociationsOnceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartAssociationsOnceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StartAssociationsOnceCommand = class _StartAssociationsOnceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StartAssociationsOnceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAssociationsOnceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_StartAssociationsOnceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StartAssociationsOnceCommand)(output, context);
      }
    };
    exports.StartAssociationsOnceCommand = StartAssociationsOnceCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAutomationExecutionCommand.js
var require_StartAutomationExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartAutomationExecutionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StartAutomationExecutionCommand = class _StartAutomationExecutionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StartAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_StartAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StartAutomationExecutionCommand)(output, context);
      }
    };
    exports.StartAutomationExecutionCommand = StartAutomationExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartChangeRequestExecutionCommand.js
var require_StartChangeRequestExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartChangeRequestExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartChangeRequestExecutionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StartChangeRequestExecutionCommand = class _StartChangeRequestExecutionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StartChangeRequestExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartChangeRequestExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_StartChangeRequestExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StartChangeRequestExecutionCommand)(output, context);
      }
    };
    exports.StartChangeRequestExecutionCommand = StartChangeRequestExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartSessionCommand.js
var require_StartSessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartSessionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StartSessionCommand = class _StartSessionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StartSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_StartSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StartSessionCommand)(output, context);
      }
    };
    exports.StartSessionCommand = StartSessionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StopAutomationExecutionCommand.js
var require_StopAutomationExecutionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StopAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopAutomationExecutionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StopAutomationExecutionCommand = class _StopAutomationExecutionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StopAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StopAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_StopAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_StopAutomationExecutionCommand)(output, context);
      }
    };
    exports.StopAutomationExecutionCommand = StopAutomationExecutionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/TerminateSessionCommand.js
var require_TerminateSessionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/TerminateSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TerminateSessionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var TerminateSessionCommand = class _TerminateSessionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TerminateSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "TerminateSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_TerminateSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_TerminateSessionCommand)(output, context);
      }
    };
    exports.TerminateSessionCommand = TerminateSessionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UnlabelParameterVersionCommand.js
var require_UnlabelParameterVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UnlabelParameterVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnlabelParameterVersionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UnlabelParameterVersionCommand = class _UnlabelParameterVersionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UnlabelParameterVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UnlabelParameterVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UnlabelParameterVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UnlabelParameterVersionCommand)(output, context);
      }
    };
    exports.UnlabelParameterVersionCommand = UnlabelParameterVersionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationCommand.js
var require_UpdateAssociationCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssociationCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateAssociationCommand = class _UpdateAssociationCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateAssociationCommand)(output, context);
      }
    };
    exports.UpdateAssociationCommand = UpdateAssociationCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationStatusCommand.js
var require_UpdateAssociationStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssociationStatusCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateAssociationStatusCommand = class _UpdateAssociationStatusCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAssociationStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_2_1.UpdateAssociationStatusResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateAssociationStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateAssociationStatusCommand)(output, context);
      }
    };
    exports.UpdateAssociationStatusCommand = UpdateAssociationStatusCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentCommand.js
var require_UpdateDocumentCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateDocumentCommand = class _UpdateDocumentCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateDocumentCommand)(output, context);
      }
    };
    exports.UpdateDocumentCommand = UpdateDocumentCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentDefaultVersionCommand.js
var require_UpdateDocumentDefaultVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentDefaultVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentDefaultVersionCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateDocumentDefaultVersionCommand = class _UpdateDocumentDefaultVersionCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateDocumentDefaultVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentDefaultVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateDocumentDefaultVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateDocumentDefaultVersionCommand)(output, context);
      }
    };
    exports.UpdateDocumentDefaultVersionCommand = UpdateDocumentDefaultVersionCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentMetadataCommand.js
var require_UpdateDocumentMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentMetadataCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateDocumentMetadataCommand = class _UpdateDocumentMetadataCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateDocumentMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateDocumentMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateDocumentMetadataCommand)(output, context);
      }
    };
    exports.UpdateDocumentMetadataCommand = UpdateDocumentMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowCommand.js
var require_UpdateMaintenanceWindowCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateMaintenanceWindowCommand = class _UpdateMaintenanceWindowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateMaintenanceWindowCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowCommand = UpdateMaintenanceWindowCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTargetCommand.js
var require_UpdateMaintenanceWindowTargetCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTargetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowTargetCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateMaintenanceWindowTargetCommand = class _UpdateMaintenanceWindowTargetCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateMaintenanceWindowTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateMaintenanceWindowTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateMaintenanceWindowTargetCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowTargetCommand = UpdateMaintenanceWindowTargetCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTaskCommand.js
var require_UpdateMaintenanceWindowTaskCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowTaskCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateMaintenanceWindowTaskCommand = class _UpdateMaintenanceWindowTaskCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateMaintenanceWindowTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateMaintenanceWindowTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateMaintenanceWindowTaskCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowTaskCommand = UpdateMaintenanceWindowTaskCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateManagedInstanceRoleCommand.js
var require_UpdateManagedInstanceRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateManagedInstanceRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateManagedInstanceRoleCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateManagedInstanceRoleCommand = class _UpdateManagedInstanceRoleCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateManagedInstanceRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateManagedInstanceRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateManagedInstanceRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateManagedInstanceRoleCommand)(output, context);
      }
    };
    exports.UpdateManagedInstanceRoleCommand = UpdateManagedInstanceRoleCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsItemCommand.js
var require_UpdateOpsItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpsItemCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateOpsItemCommand = class _UpdateOpsItemCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateOpsItemCommand)(output, context);
      }
    };
    exports.UpdateOpsItemCommand = UpdateOpsItemCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsMetadataCommand.js
var require_UpdateOpsMetadataCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpsMetadataCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateOpsMetadataCommand = class _UpdateOpsMetadataCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateOpsMetadataCommand)(output, context);
      }
    };
    exports.UpdateOpsMetadataCommand = UpdateOpsMetadataCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdatePatchBaselineCommand.js
var require_UpdatePatchBaselineCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdatePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdatePatchBaselineCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdatePatchBaselineCommand = class _UpdatePatchBaselineCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdatePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdatePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdatePatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdatePatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdatePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdatePatchBaselineCommand)(output, context);
      }
    };
    exports.UpdatePatchBaselineCommand = UpdatePatchBaselineCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateResourceDataSyncCommand.js
var require_UpdateResourceDataSyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateResourceDataSyncCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateResourceDataSyncCommand = class _UpdateResourceDataSyncCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateResourceDataSyncCommand)(output, context);
      }
    };
    exports.UpdateResourceDataSyncCommand = UpdateResourceDataSyncCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateServiceSettingCommand.js
var require_UpdateServiceSettingCommand = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateServiceSettingCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateServiceSettingCommand = class _UpdateServiceSettingCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.se_UpdateServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.de_UpdateServiceSettingCommand)(output, context);
      }
    };
    exports.UpdateServiceSettingCommand = UpdateServiceSettingCommand;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/SSM.js
var require_SSM = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/SSM.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSM = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var AddTagsToResourceCommand_1 = require_AddTagsToResourceCommand();
    var AssociateOpsItemRelatedItemCommand_1 = require_AssociateOpsItemRelatedItemCommand();
    var CancelCommandCommand_1 = require_CancelCommandCommand();
    var CancelMaintenanceWindowExecutionCommand_1 = require_CancelMaintenanceWindowExecutionCommand();
    var CreateActivationCommand_1 = require_CreateActivationCommand();
    var CreateAssociationBatchCommand_1 = require_CreateAssociationBatchCommand();
    var CreateAssociationCommand_1 = require_CreateAssociationCommand();
    var CreateDocumentCommand_1 = require_CreateDocumentCommand();
    var CreateMaintenanceWindowCommand_1 = require_CreateMaintenanceWindowCommand();
    var CreateOpsItemCommand_1 = require_CreateOpsItemCommand();
    var CreateOpsMetadataCommand_1 = require_CreateOpsMetadataCommand();
    var CreatePatchBaselineCommand_1 = require_CreatePatchBaselineCommand();
    var CreateResourceDataSyncCommand_1 = require_CreateResourceDataSyncCommand();
    var DeleteActivationCommand_1 = require_DeleteActivationCommand();
    var DeleteAssociationCommand_1 = require_DeleteAssociationCommand();
    var DeleteDocumentCommand_1 = require_DeleteDocumentCommand();
    var DeleteInventoryCommand_1 = require_DeleteInventoryCommand();
    var DeleteMaintenanceWindowCommand_1 = require_DeleteMaintenanceWindowCommand();
    var DeleteOpsMetadataCommand_1 = require_DeleteOpsMetadataCommand();
    var DeleteParameterCommand_1 = require_DeleteParameterCommand();
    var DeleteParametersCommand_1 = require_DeleteParametersCommand();
    var DeletePatchBaselineCommand_1 = require_DeletePatchBaselineCommand();
    var DeleteResourceDataSyncCommand_1 = require_DeleteResourceDataSyncCommand();
    var DeleteResourcePolicyCommand_1 = require_DeleteResourcePolicyCommand();
    var DeregisterManagedInstanceCommand_1 = require_DeregisterManagedInstanceCommand();
    var DeregisterPatchBaselineForPatchGroupCommand_1 = require_DeregisterPatchBaselineForPatchGroupCommand();
    var DeregisterTargetFromMaintenanceWindowCommand_1 = require_DeregisterTargetFromMaintenanceWindowCommand();
    var DeregisterTaskFromMaintenanceWindowCommand_1 = require_DeregisterTaskFromMaintenanceWindowCommand();
    var DescribeActivationsCommand_1 = require_DescribeActivationsCommand();
    var DescribeAssociationCommand_1 = require_DescribeAssociationCommand();
    var DescribeAssociationExecutionsCommand_1 = require_DescribeAssociationExecutionsCommand();
    var DescribeAssociationExecutionTargetsCommand_1 = require_DescribeAssociationExecutionTargetsCommand();
    var DescribeAutomationExecutionsCommand_1 = require_DescribeAutomationExecutionsCommand();
    var DescribeAutomationStepExecutionsCommand_1 = require_DescribeAutomationStepExecutionsCommand();
    var DescribeAvailablePatchesCommand_1 = require_DescribeAvailablePatchesCommand();
    var DescribeDocumentCommand_1 = require_DescribeDocumentCommand();
    var DescribeDocumentPermissionCommand_1 = require_DescribeDocumentPermissionCommand();
    var DescribeEffectiveInstanceAssociationsCommand_1 = require_DescribeEffectiveInstanceAssociationsCommand();
    var DescribeEffectivePatchesForPatchBaselineCommand_1 = require_DescribeEffectivePatchesForPatchBaselineCommand();
    var DescribeInstanceAssociationsStatusCommand_1 = require_DescribeInstanceAssociationsStatusCommand();
    var DescribeInstanceInformationCommand_1 = require_DescribeInstanceInformationCommand();
    var DescribeInstancePatchesCommand_1 = require_DescribeInstancePatchesCommand();
    var DescribeInstancePatchStatesCommand_1 = require_DescribeInstancePatchStatesCommand();
    var DescribeInstancePatchStatesForPatchGroupCommand_1 = require_DescribeInstancePatchStatesForPatchGroupCommand();
    var DescribeInventoryDeletionsCommand_1 = require_DescribeInventoryDeletionsCommand();
    var DescribeMaintenanceWindowExecutionsCommand_1 = require_DescribeMaintenanceWindowExecutionsCommand();
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand();
    var DescribeMaintenanceWindowExecutionTasksCommand_1 = require_DescribeMaintenanceWindowExecutionTasksCommand();
    var DescribeMaintenanceWindowScheduleCommand_1 = require_DescribeMaintenanceWindowScheduleCommand();
    var DescribeMaintenanceWindowsCommand_1 = require_DescribeMaintenanceWindowsCommand();
    var DescribeMaintenanceWindowsForTargetCommand_1 = require_DescribeMaintenanceWindowsForTargetCommand();
    var DescribeMaintenanceWindowTargetsCommand_1 = require_DescribeMaintenanceWindowTargetsCommand();
    var DescribeMaintenanceWindowTasksCommand_1 = require_DescribeMaintenanceWindowTasksCommand();
    var DescribeOpsItemsCommand_1 = require_DescribeOpsItemsCommand();
    var DescribeParametersCommand_1 = require_DescribeParametersCommand();
    var DescribePatchBaselinesCommand_1 = require_DescribePatchBaselinesCommand();
    var DescribePatchGroupsCommand_1 = require_DescribePatchGroupsCommand();
    var DescribePatchGroupStateCommand_1 = require_DescribePatchGroupStateCommand();
    var DescribePatchPropertiesCommand_1 = require_DescribePatchPropertiesCommand();
    var DescribeSessionsCommand_1 = require_DescribeSessionsCommand();
    var DisassociateOpsItemRelatedItemCommand_1 = require_DisassociateOpsItemRelatedItemCommand();
    var GetAutomationExecutionCommand_1 = require_GetAutomationExecutionCommand();
    var GetCalendarStateCommand_1 = require_GetCalendarStateCommand();
    var GetCommandInvocationCommand_1 = require_GetCommandInvocationCommand();
    var GetConnectionStatusCommand_1 = require_GetConnectionStatusCommand();
    var GetDefaultPatchBaselineCommand_1 = require_GetDefaultPatchBaselineCommand();
    var GetDeployablePatchSnapshotForInstanceCommand_1 = require_GetDeployablePatchSnapshotForInstanceCommand();
    var GetDocumentCommand_1 = require_GetDocumentCommand();
    var GetInventoryCommand_1 = require_GetInventoryCommand();
    var GetInventorySchemaCommand_1 = require_GetInventorySchemaCommand();
    var GetMaintenanceWindowCommand_1 = require_GetMaintenanceWindowCommand();
    var GetMaintenanceWindowExecutionCommand_1 = require_GetMaintenanceWindowExecutionCommand();
    var GetMaintenanceWindowExecutionTaskCommand_1 = require_GetMaintenanceWindowExecutionTaskCommand();
    var GetMaintenanceWindowExecutionTaskInvocationCommand_1 = require_GetMaintenanceWindowExecutionTaskInvocationCommand();
    var GetMaintenanceWindowTaskCommand_1 = require_GetMaintenanceWindowTaskCommand();
    var GetOpsItemCommand_1 = require_GetOpsItemCommand();
    var GetOpsMetadataCommand_1 = require_GetOpsMetadataCommand();
    var GetOpsSummaryCommand_1 = require_GetOpsSummaryCommand();
    var GetParameterCommand_1 = require_GetParameterCommand();
    var GetParameterHistoryCommand_1 = require_GetParameterHistoryCommand();
    var GetParametersByPathCommand_1 = require_GetParametersByPathCommand();
    var GetParametersCommand_1 = require_GetParametersCommand();
    var GetPatchBaselineCommand_1 = require_GetPatchBaselineCommand();
    var GetPatchBaselineForPatchGroupCommand_1 = require_GetPatchBaselineForPatchGroupCommand();
    var GetResourcePoliciesCommand_1 = require_GetResourcePoliciesCommand();
    var GetServiceSettingCommand_1 = require_GetServiceSettingCommand();
    var LabelParameterVersionCommand_1 = require_LabelParameterVersionCommand();
    var ListAssociationsCommand_1 = require_ListAssociationsCommand();
    var ListAssociationVersionsCommand_1 = require_ListAssociationVersionsCommand();
    var ListCommandInvocationsCommand_1 = require_ListCommandInvocationsCommand();
    var ListCommandsCommand_1 = require_ListCommandsCommand();
    var ListComplianceItemsCommand_1 = require_ListComplianceItemsCommand();
    var ListComplianceSummariesCommand_1 = require_ListComplianceSummariesCommand();
    var ListDocumentMetadataHistoryCommand_1 = require_ListDocumentMetadataHistoryCommand();
    var ListDocumentsCommand_1 = require_ListDocumentsCommand();
    var ListDocumentVersionsCommand_1 = require_ListDocumentVersionsCommand();
    var ListInventoryEntriesCommand_1 = require_ListInventoryEntriesCommand();
    var ListOpsItemEventsCommand_1 = require_ListOpsItemEventsCommand();
    var ListOpsItemRelatedItemsCommand_1 = require_ListOpsItemRelatedItemsCommand();
    var ListOpsMetadataCommand_1 = require_ListOpsMetadataCommand();
    var ListResourceComplianceSummariesCommand_1 = require_ListResourceComplianceSummariesCommand();
    var ListResourceDataSyncCommand_1 = require_ListResourceDataSyncCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand2();
    var ModifyDocumentPermissionCommand_1 = require_ModifyDocumentPermissionCommand();
    var PutComplianceItemsCommand_1 = require_PutComplianceItemsCommand();
    var PutInventoryCommand_1 = require_PutInventoryCommand();
    var PutParameterCommand_1 = require_PutParameterCommand();
    var PutResourcePolicyCommand_1 = require_PutResourcePolicyCommand();
    var RegisterDefaultPatchBaselineCommand_1 = require_RegisterDefaultPatchBaselineCommand();
    var RegisterPatchBaselineForPatchGroupCommand_1 = require_RegisterPatchBaselineForPatchGroupCommand();
    var RegisterTargetWithMaintenanceWindowCommand_1 = require_RegisterTargetWithMaintenanceWindowCommand();
    var RegisterTaskWithMaintenanceWindowCommand_1 = require_RegisterTaskWithMaintenanceWindowCommand();
    var RemoveTagsFromResourceCommand_1 = require_RemoveTagsFromResourceCommand();
    var ResetServiceSettingCommand_1 = require_ResetServiceSettingCommand();
    var ResumeSessionCommand_1 = require_ResumeSessionCommand();
    var SendAutomationSignalCommand_1 = require_SendAutomationSignalCommand();
    var SendCommandCommand_1 = require_SendCommandCommand();
    var StartAssociationsOnceCommand_1 = require_StartAssociationsOnceCommand();
    var StartAutomationExecutionCommand_1 = require_StartAutomationExecutionCommand();
    var StartChangeRequestExecutionCommand_1 = require_StartChangeRequestExecutionCommand();
    var StartSessionCommand_1 = require_StartSessionCommand();
    var StopAutomationExecutionCommand_1 = require_StopAutomationExecutionCommand();
    var TerminateSessionCommand_1 = require_TerminateSessionCommand();
    var UnlabelParameterVersionCommand_1 = require_UnlabelParameterVersionCommand();
    var UpdateAssociationCommand_1 = require_UpdateAssociationCommand();
    var UpdateAssociationStatusCommand_1 = require_UpdateAssociationStatusCommand();
    var UpdateDocumentCommand_1 = require_UpdateDocumentCommand();
    var UpdateDocumentDefaultVersionCommand_1 = require_UpdateDocumentDefaultVersionCommand();
    var UpdateDocumentMetadataCommand_1 = require_UpdateDocumentMetadataCommand();
    var UpdateMaintenanceWindowCommand_1 = require_UpdateMaintenanceWindowCommand();
    var UpdateMaintenanceWindowTargetCommand_1 = require_UpdateMaintenanceWindowTargetCommand();
    var UpdateMaintenanceWindowTaskCommand_1 = require_UpdateMaintenanceWindowTaskCommand();
    var UpdateManagedInstanceRoleCommand_1 = require_UpdateManagedInstanceRoleCommand();
    var UpdateOpsItemCommand_1 = require_UpdateOpsItemCommand();
    var UpdateOpsMetadataCommand_1 = require_UpdateOpsMetadataCommand();
    var UpdatePatchBaselineCommand_1 = require_UpdatePatchBaselineCommand();
    var UpdateResourceDataSyncCommand_1 = require_UpdateResourceDataSyncCommand();
    var UpdateServiceSettingCommand_1 = require_UpdateServiceSettingCommand();
    var SSMClient_1 = require_SSMClient();
    var commands = {
      AddTagsToResourceCommand: AddTagsToResourceCommand_1.AddTagsToResourceCommand,
      AssociateOpsItemRelatedItemCommand: AssociateOpsItemRelatedItemCommand_1.AssociateOpsItemRelatedItemCommand,
      CancelCommandCommand: CancelCommandCommand_1.CancelCommandCommand,
      CancelMaintenanceWindowExecutionCommand: CancelMaintenanceWindowExecutionCommand_1.CancelMaintenanceWindowExecutionCommand,
      CreateActivationCommand: CreateActivationCommand_1.CreateActivationCommand,
      CreateAssociationCommand: CreateAssociationCommand_1.CreateAssociationCommand,
      CreateAssociationBatchCommand: CreateAssociationBatchCommand_1.CreateAssociationBatchCommand,
      CreateDocumentCommand: CreateDocumentCommand_1.CreateDocumentCommand,
      CreateMaintenanceWindowCommand: CreateMaintenanceWindowCommand_1.CreateMaintenanceWindowCommand,
      CreateOpsItemCommand: CreateOpsItemCommand_1.CreateOpsItemCommand,
      CreateOpsMetadataCommand: CreateOpsMetadataCommand_1.CreateOpsMetadataCommand,
      CreatePatchBaselineCommand: CreatePatchBaselineCommand_1.CreatePatchBaselineCommand,
      CreateResourceDataSyncCommand: CreateResourceDataSyncCommand_1.CreateResourceDataSyncCommand,
      DeleteActivationCommand: DeleteActivationCommand_1.DeleteActivationCommand,
      DeleteAssociationCommand: DeleteAssociationCommand_1.DeleteAssociationCommand,
      DeleteDocumentCommand: DeleteDocumentCommand_1.DeleteDocumentCommand,
      DeleteInventoryCommand: DeleteInventoryCommand_1.DeleteInventoryCommand,
      DeleteMaintenanceWindowCommand: DeleteMaintenanceWindowCommand_1.DeleteMaintenanceWindowCommand,
      DeleteOpsMetadataCommand: DeleteOpsMetadataCommand_1.DeleteOpsMetadataCommand,
      DeleteParameterCommand: DeleteParameterCommand_1.DeleteParameterCommand,
      DeleteParametersCommand: DeleteParametersCommand_1.DeleteParametersCommand,
      DeletePatchBaselineCommand: DeletePatchBaselineCommand_1.DeletePatchBaselineCommand,
      DeleteResourceDataSyncCommand: DeleteResourceDataSyncCommand_1.DeleteResourceDataSyncCommand,
      DeleteResourcePolicyCommand: DeleteResourcePolicyCommand_1.DeleteResourcePolicyCommand,
      DeregisterManagedInstanceCommand: DeregisterManagedInstanceCommand_1.DeregisterManagedInstanceCommand,
      DeregisterPatchBaselineForPatchGroupCommand: DeregisterPatchBaselineForPatchGroupCommand_1.DeregisterPatchBaselineForPatchGroupCommand,
      DeregisterTargetFromMaintenanceWindowCommand: DeregisterTargetFromMaintenanceWindowCommand_1.DeregisterTargetFromMaintenanceWindowCommand,
      DeregisterTaskFromMaintenanceWindowCommand: DeregisterTaskFromMaintenanceWindowCommand_1.DeregisterTaskFromMaintenanceWindowCommand,
      DescribeActivationsCommand: DescribeActivationsCommand_1.DescribeActivationsCommand,
      DescribeAssociationCommand: DescribeAssociationCommand_1.DescribeAssociationCommand,
      DescribeAssociationExecutionsCommand: DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand,
      DescribeAssociationExecutionTargetsCommand: DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand,
      DescribeAutomationExecutionsCommand: DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand,
      DescribeAutomationStepExecutionsCommand: DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand,
      DescribeAvailablePatchesCommand: DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand,
      DescribeDocumentCommand: DescribeDocumentCommand_1.DescribeDocumentCommand,
      DescribeDocumentPermissionCommand: DescribeDocumentPermissionCommand_1.DescribeDocumentPermissionCommand,
      DescribeEffectiveInstanceAssociationsCommand: DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand,
      DescribeEffectivePatchesForPatchBaselineCommand: DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand,
      DescribeInstanceAssociationsStatusCommand: DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand,
      DescribeInstanceInformationCommand: DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand,
      DescribeInstancePatchesCommand: DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand,
      DescribeInstancePatchStatesCommand: DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand,
      DescribeInstancePatchStatesForPatchGroupCommand: DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand,
      DescribeInventoryDeletionsCommand: DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand,
      DescribeMaintenanceWindowExecutionsCommand: DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand,
      DescribeMaintenanceWindowExecutionTaskInvocationsCommand: DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand,
      DescribeMaintenanceWindowExecutionTasksCommand: DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand,
      DescribeMaintenanceWindowsCommand: DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand,
      DescribeMaintenanceWindowScheduleCommand: DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand,
      DescribeMaintenanceWindowsForTargetCommand: DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand,
      DescribeMaintenanceWindowTargetsCommand: DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand,
      DescribeMaintenanceWindowTasksCommand: DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand,
      DescribeOpsItemsCommand: DescribeOpsItemsCommand_1.DescribeOpsItemsCommand,
      DescribeParametersCommand: DescribeParametersCommand_1.DescribeParametersCommand,
      DescribePatchBaselinesCommand: DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand,
      DescribePatchGroupsCommand: DescribePatchGroupsCommand_1.DescribePatchGroupsCommand,
      DescribePatchGroupStateCommand: DescribePatchGroupStateCommand_1.DescribePatchGroupStateCommand,
      DescribePatchPropertiesCommand: DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand,
      DescribeSessionsCommand: DescribeSessionsCommand_1.DescribeSessionsCommand,
      DisassociateOpsItemRelatedItemCommand: DisassociateOpsItemRelatedItemCommand_1.DisassociateOpsItemRelatedItemCommand,
      GetAutomationExecutionCommand: GetAutomationExecutionCommand_1.GetAutomationExecutionCommand,
      GetCalendarStateCommand: GetCalendarStateCommand_1.GetCalendarStateCommand,
      GetCommandInvocationCommand: GetCommandInvocationCommand_1.GetCommandInvocationCommand,
      GetConnectionStatusCommand: GetConnectionStatusCommand_1.GetConnectionStatusCommand,
      GetDefaultPatchBaselineCommand: GetDefaultPatchBaselineCommand_1.GetDefaultPatchBaselineCommand,
      GetDeployablePatchSnapshotForInstanceCommand: GetDeployablePatchSnapshotForInstanceCommand_1.GetDeployablePatchSnapshotForInstanceCommand,
      GetDocumentCommand: GetDocumentCommand_1.GetDocumentCommand,
      GetInventoryCommand: GetInventoryCommand_1.GetInventoryCommand,
      GetInventorySchemaCommand: GetInventorySchemaCommand_1.GetInventorySchemaCommand,
      GetMaintenanceWindowCommand: GetMaintenanceWindowCommand_1.GetMaintenanceWindowCommand,
      GetMaintenanceWindowExecutionCommand: GetMaintenanceWindowExecutionCommand_1.GetMaintenanceWindowExecutionCommand,
      GetMaintenanceWindowExecutionTaskCommand: GetMaintenanceWindowExecutionTaskCommand_1.GetMaintenanceWindowExecutionTaskCommand,
      GetMaintenanceWindowExecutionTaskInvocationCommand: GetMaintenanceWindowExecutionTaskInvocationCommand_1.GetMaintenanceWindowExecutionTaskInvocationCommand,
      GetMaintenanceWindowTaskCommand: GetMaintenanceWindowTaskCommand_1.GetMaintenanceWindowTaskCommand,
      GetOpsItemCommand: GetOpsItemCommand_1.GetOpsItemCommand,
      GetOpsMetadataCommand: GetOpsMetadataCommand_1.GetOpsMetadataCommand,
      GetOpsSummaryCommand: GetOpsSummaryCommand_1.GetOpsSummaryCommand,
      GetParameterCommand: GetParameterCommand_1.GetParameterCommand,
      GetParameterHistoryCommand: GetParameterHistoryCommand_1.GetParameterHistoryCommand,
      GetParametersCommand: GetParametersCommand_1.GetParametersCommand,
      GetParametersByPathCommand: GetParametersByPathCommand_1.GetParametersByPathCommand,
      GetPatchBaselineCommand: GetPatchBaselineCommand_1.GetPatchBaselineCommand,
      GetPatchBaselineForPatchGroupCommand: GetPatchBaselineForPatchGroupCommand_1.GetPatchBaselineForPatchGroupCommand,
      GetResourcePoliciesCommand: GetResourcePoliciesCommand_1.GetResourcePoliciesCommand,
      GetServiceSettingCommand: GetServiceSettingCommand_1.GetServiceSettingCommand,
      LabelParameterVersionCommand: LabelParameterVersionCommand_1.LabelParameterVersionCommand,
      ListAssociationsCommand: ListAssociationsCommand_1.ListAssociationsCommand,
      ListAssociationVersionsCommand: ListAssociationVersionsCommand_1.ListAssociationVersionsCommand,
      ListCommandInvocationsCommand: ListCommandInvocationsCommand_1.ListCommandInvocationsCommand,
      ListCommandsCommand: ListCommandsCommand_1.ListCommandsCommand,
      ListComplianceItemsCommand: ListComplianceItemsCommand_1.ListComplianceItemsCommand,
      ListComplianceSummariesCommand: ListComplianceSummariesCommand_1.ListComplianceSummariesCommand,
      ListDocumentMetadataHistoryCommand: ListDocumentMetadataHistoryCommand_1.ListDocumentMetadataHistoryCommand,
      ListDocumentsCommand: ListDocumentsCommand_1.ListDocumentsCommand,
      ListDocumentVersionsCommand: ListDocumentVersionsCommand_1.ListDocumentVersionsCommand,
      ListInventoryEntriesCommand: ListInventoryEntriesCommand_1.ListInventoryEntriesCommand,
      ListOpsItemEventsCommand: ListOpsItemEventsCommand_1.ListOpsItemEventsCommand,
      ListOpsItemRelatedItemsCommand: ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand,
      ListOpsMetadataCommand: ListOpsMetadataCommand_1.ListOpsMetadataCommand,
      ListResourceComplianceSummariesCommand: ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand,
      ListResourceDataSyncCommand: ListResourceDataSyncCommand_1.ListResourceDataSyncCommand,
      ListTagsForResourceCommand: ListTagsForResourceCommand_1.ListTagsForResourceCommand,
      ModifyDocumentPermissionCommand: ModifyDocumentPermissionCommand_1.ModifyDocumentPermissionCommand,
      PutComplianceItemsCommand: PutComplianceItemsCommand_1.PutComplianceItemsCommand,
      PutInventoryCommand: PutInventoryCommand_1.PutInventoryCommand,
      PutParameterCommand: PutParameterCommand_1.PutParameterCommand,
      PutResourcePolicyCommand: PutResourcePolicyCommand_1.PutResourcePolicyCommand,
      RegisterDefaultPatchBaselineCommand: RegisterDefaultPatchBaselineCommand_1.RegisterDefaultPatchBaselineCommand,
      RegisterPatchBaselineForPatchGroupCommand: RegisterPatchBaselineForPatchGroupCommand_1.RegisterPatchBaselineForPatchGroupCommand,
      RegisterTargetWithMaintenanceWindowCommand: RegisterTargetWithMaintenanceWindowCommand_1.RegisterTargetWithMaintenanceWindowCommand,
      RegisterTaskWithMaintenanceWindowCommand: RegisterTaskWithMaintenanceWindowCommand_1.RegisterTaskWithMaintenanceWindowCommand,
      RemoveTagsFromResourceCommand: RemoveTagsFromResourceCommand_1.RemoveTagsFromResourceCommand,
      ResetServiceSettingCommand: ResetServiceSettingCommand_1.ResetServiceSettingCommand,
      ResumeSessionCommand: ResumeSessionCommand_1.ResumeSessionCommand,
      SendAutomationSignalCommand: SendAutomationSignalCommand_1.SendAutomationSignalCommand,
      SendCommandCommand: SendCommandCommand_1.SendCommandCommand,
      StartAssociationsOnceCommand: StartAssociationsOnceCommand_1.StartAssociationsOnceCommand,
      StartAutomationExecutionCommand: StartAutomationExecutionCommand_1.StartAutomationExecutionCommand,
      StartChangeRequestExecutionCommand: StartChangeRequestExecutionCommand_1.StartChangeRequestExecutionCommand,
      StartSessionCommand: StartSessionCommand_1.StartSessionCommand,
      StopAutomationExecutionCommand: StopAutomationExecutionCommand_1.StopAutomationExecutionCommand,
      TerminateSessionCommand: TerminateSessionCommand_1.TerminateSessionCommand,
      UnlabelParameterVersionCommand: UnlabelParameterVersionCommand_1.UnlabelParameterVersionCommand,
      UpdateAssociationCommand: UpdateAssociationCommand_1.UpdateAssociationCommand,
      UpdateAssociationStatusCommand: UpdateAssociationStatusCommand_1.UpdateAssociationStatusCommand,
      UpdateDocumentCommand: UpdateDocumentCommand_1.UpdateDocumentCommand,
      UpdateDocumentDefaultVersionCommand: UpdateDocumentDefaultVersionCommand_1.UpdateDocumentDefaultVersionCommand,
      UpdateDocumentMetadataCommand: UpdateDocumentMetadataCommand_1.UpdateDocumentMetadataCommand,
      UpdateMaintenanceWindowCommand: UpdateMaintenanceWindowCommand_1.UpdateMaintenanceWindowCommand,
      UpdateMaintenanceWindowTargetCommand: UpdateMaintenanceWindowTargetCommand_1.UpdateMaintenanceWindowTargetCommand,
      UpdateMaintenanceWindowTaskCommand: UpdateMaintenanceWindowTaskCommand_1.UpdateMaintenanceWindowTaskCommand,
      UpdateManagedInstanceRoleCommand: UpdateManagedInstanceRoleCommand_1.UpdateManagedInstanceRoleCommand,
      UpdateOpsItemCommand: UpdateOpsItemCommand_1.UpdateOpsItemCommand,
      UpdateOpsMetadataCommand: UpdateOpsMetadataCommand_1.UpdateOpsMetadataCommand,
      UpdatePatchBaselineCommand: UpdatePatchBaselineCommand_1.UpdatePatchBaselineCommand,
      UpdateResourceDataSyncCommand: UpdateResourceDataSyncCommand_1.UpdateResourceDataSyncCommand,
      UpdateServiceSettingCommand: UpdateServiceSettingCommand_1.UpdateServiceSettingCommand
    };
    var SSM = class extends SSMClient_1.SSMClient {
    };
    exports.SSM = SSM;
    (0, smithy_client_1.createAggregatedClient)(commands, SSM);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/commands/index.js
var require_commands5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AddTagsToResourceCommand(), exports);
    tslib_1.__exportStar(require_AssociateOpsItemRelatedItemCommand(), exports);
    tslib_1.__exportStar(require_CancelCommandCommand(), exports);
    tslib_1.__exportStar(require_CancelMaintenanceWindowExecutionCommand(), exports);
    tslib_1.__exportStar(require_CreateActivationCommand(), exports);
    tslib_1.__exportStar(require_CreateAssociationBatchCommand(), exports);
    tslib_1.__exportStar(require_CreateAssociationCommand(), exports);
    tslib_1.__exportStar(require_CreateDocumentCommand(), exports);
    tslib_1.__exportStar(require_CreateMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_CreateOpsItemCommand(), exports);
    tslib_1.__exportStar(require_CreateOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_CreatePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_CreateResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_DeleteActivationCommand(), exports);
    tslib_1.__exportStar(require_DeleteAssociationCommand(), exports);
    tslib_1.__exportStar(require_DeleteDocumentCommand(), exports);
    tslib_1.__exportStar(require_DeleteInventoryCommand(), exports);
    tslib_1.__exportStar(require_DeleteMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DeleteOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_DeleteParameterCommand(), exports);
    tslib_1.__exportStar(require_DeleteParametersCommand(), exports);
    tslib_1.__exportStar(require_DeletePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_DeleteResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_DeleteResourcePolicyCommand(), exports);
    tslib_1.__exportStar(require_DeregisterManagedInstanceCommand(), exports);
    tslib_1.__exportStar(require_DeregisterPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTargetFromMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTaskFromMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DescribeActivationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAutomationExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAutomationStepExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAvailablePatchesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDocumentCommand(), exports);
    tslib_1.__exportStar(require_DescribeDocumentPermissionCommand(), exports);
    tslib_1.__exportStar(require_DescribeEffectiveInstanceAssociationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEffectivePatchesForPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstanceAssociationsStatusCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstanceInformationCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchesCommand(), exports);
    tslib_1.__exportStar(require_DescribeInventoryDeletionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowScheduleCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsForTargetCommand(), exports);
    tslib_1.__exportStar(require_DescribeOpsItemsCommand(), exports);
    tslib_1.__exportStar(require_DescribeParametersCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchBaselinesCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupStateCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchPropertiesCommand(), exports);
    tslib_1.__exportStar(require_DescribeSessionsCommand(), exports);
    tslib_1.__exportStar(require_DisassociateOpsItemRelatedItemCommand(), exports);
    tslib_1.__exportStar(require_GetAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_GetCalendarStateCommand(), exports);
    tslib_1.__exportStar(require_GetCommandInvocationCommand(), exports);
    tslib_1.__exportStar(require_GetConnectionStatusCommand(), exports);
    tslib_1.__exportStar(require_GetDefaultPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_GetDeployablePatchSnapshotForInstanceCommand(), exports);
    tslib_1.__exportStar(require_GetDocumentCommand(), exports);
    tslib_1.__exportStar(require_GetInventoryCommand(), exports);
    tslib_1.__exportStar(require_GetInventorySchemaCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionTaskCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionTaskInvocationCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowTaskCommand(), exports);
    tslib_1.__exportStar(require_GetOpsItemCommand(), exports);
    tslib_1.__exportStar(require_GetOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_GetOpsSummaryCommand(), exports);
    tslib_1.__exportStar(require_GetParameterCommand(), exports);
    tslib_1.__exportStar(require_GetParameterHistoryCommand(), exports);
    tslib_1.__exportStar(require_GetParametersByPathCommand(), exports);
    tslib_1.__exportStar(require_GetParametersCommand(), exports);
    tslib_1.__exportStar(require_GetPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_GetPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_GetResourcePoliciesCommand(), exports);
    tslib_1.__exportStar(require_GetServiceSettingCommand(), exports);
    tslib_1.__exportStar(require_LabelParameterVersionCommand(), exports);
    tslib_1.__exportStar(require_ListAssociationVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListAssociationsCommand(), exports);
    tslib_1.__exportStar(require_ListCommandInvocationsCommand(), exports);
    tslib_1.__exportStar(require_ListCommandsCommand(), exports);
    tslib_1.__exportStar(require_ListComplianceItemsCommand(), exports);
    tslib_1.__exportStar(require_ListComplianceSummariesCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentMetadataHistoryCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentsCommand(), exports);
    tslib_1.__exportStar(require_ListInventoryEntriesCommand(), exports);
    tslib_1.__exportStar(require_ListOpsItemEventsCommand(), exports);
    tslib_1.__exportStar(require_ListOpsItemRelatedItemsCommand(), exports);
    tslib_1.__exportStar(require_ListOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_ListResourceComplianceSummariesCommand(), exports);
    tslib_1.__exportStar(require_ListResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_ListTagsForResourceCommand2(), exports);
    tslib_1.__exportStar(require_ModifyDocumentPermissionCommand(), exports);
    tslib_1.__exportStar(require_PutComplianceItemsCommand(), exports);
    tslib_1.__exportStar(require_PutInventoryCommand(), exports);
    tslib_1.__exportStar(require_PutParameterCommand(), exports);
    tslib_1.__exportStar(require_PutResourcePolicyCommand(), exports);
    tslib_1.__exportStar(require_RegisterDefaultPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_RegisterPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_RegisterTargetWithMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_RegisterTaskWithMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_RemoveTagsFromResourceCommand(), exports);
    tslib_1.__exportStar(require_ResetServiceSettingCommand(), exports);
    tslib_1.__exportStar(require_ResumeSessionCommand(), exports);
    tslib_1.__exportStar(require_SendAutomationSignalCommand(), exports);
    tslib_1.__exportStar(require_SendCommandCommand(), exports);
    tslib_1.__exportStar(require_StartAssociationsOnceCommand(), exports);
    tslib_1.__exportStar(require_StartAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_StartChangeRequestExecutionCommand(), exports);
    tslib_1.__exportStar(require_StartSessionCommand(), exports);
    tslib_1.__exportStar(require_StopAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_TerminateSessionCommand(), exports);
    tslib_1.__exportStar(require_UnlabelParameterVersionCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssociationCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssociationStatusCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentDefaultVersionCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentMetadataCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowTargetCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowTaskCommand(), exports);
    tslib_1.__exportStar(require_UpdateManagedInstanceRoleCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpsItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_UpdatePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_UpdateResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_UpdateServiceSettingCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeActivationsPaginator.js
var require_DescribeActivationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeActivationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeActivations = void 0;
    var DescribeActivationsCommand_1 = require_DescribeActivationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeActivationsCommand_1.DescribeActivationsCommand(input), ...args);
    };
    async function* paginateDescribeActivations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeActivations = paginateDescribeActivations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionTargetsPaginator.js
var require_DescribeAssociationExecutionTargetsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAssociationExecutionTargets = void 0;
    var DescribeAssociationExecutionTargetsCommand_1 = require_DescribeAssociationExecutionTargetsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand(input), ...args);
    };
    async function* paginateDescribeAssociationExecutionTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAssociationExecutionTargets = paginateDescribeAssociationExecutionTargets;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionsPaginator.js
var require_DescribeAssociationExecutionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAssociationExecutions = void 0;
    var DescribeAssociationExecutionsCommand_1 = require_DescribeAssociationExecutionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand(input), ...args);
    };
    async function* paginateDescribeAssociationExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAssociationExecutions = paginateDescribeAssociationExecutions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationExecutionsPaginator.js
var require_DescribeAutomationExecutionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAutomationExecutions = void 0;
    var DescribeAutomationExecutionsCommand_1 = require_DescribeAutomationExecutionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand(input), ...args);
    };
    async function* paginateDescribeAutomationExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAutomationExecutions = paginateDescribeAutomationExecutions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationStepExecutionsPaginator.js
var require_DescribeAutomationStepExecutionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationStepExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAutomationStepExecutions = void 0;
    var DescribeAutomationStepExecutionsCommand_1 = require_DescribeAutomationStepExecutionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand(input), ...args);
    };
    async function* paginateDescribeAutomationStepExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAutomationStepExecutions = paginateDescribeAutomationStepExecutions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAvailablePatchesPaginator.js
var require_DescribeAvailablePatchesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAvailablePatchesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAvailablePatches = void 0;
    var DescribeAvailablePatchesCommand_1 = require_DescribeAvailablePatchesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand(input), ...args);
    };
    async function* paginateDescribeAvailablePatches(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAvailablePatches = paginateDescribeAvailablePatches;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectiveInstanceAssociationsPaginator.js
var require_DescribeEffectiveInstanceAssociationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectiveInstanceAssociationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEffectiveInstanceAssociations = void 0;
    var DescribeEffectiveInstanceAssociationsCommand_1 = require_DescribeEffectiveInstanceAssociationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand(input), ...args);
    };
    async function* paginateDescribeEffectiveInstanceAssociations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEffectiveInstanceAssociations = paginateDescribeEffectiveInstanceAssociations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectivePatchesForPatchBaselinePaginator.js
var require_DescribeEffectivePatchesForPatchBaselinePaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectivePatchesForPatchBaselinePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEffectivePatchesForPatchBaseline = void 0;
    var DescribeEffectivePatchesForPatchBaselineCommand_1 = require_DescribeEffectivePatchesForPatchBaselineCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand(input), ...args);
    };
    async function* paginateDescribeEffectivePatchesForPatchBaseline(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEffectivePatchesForPatchBaseline = paginateDescribeEffectivePatchesForPatchBaseline;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceAssociationsStatusPaginator.js
var require_DescribeInstanceAssociationsStatusPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceAssociationsStatusPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstanceAssociationsStatus = void 0;
    var DescribeInstanceAssociationsStatusCommand_1 = require_DescribeInstanceAssociationsStatusCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand(input), ...args);
    };
    async function* paginateDescribeInstanceAssociationsStatus(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstanceAssociationsStatus = paginateDescribeInstanceAssociationsStatus;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceInformationPaginator.js
var require_DescribeInstanceInformationPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceInformationPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstanceInformation = void 0;
    var DescribeInstanceInformationCommand_1 = require_DescribeInstanceInformationCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand(input), ...args);
    };
    async function* paginateDescribeInstanceInformation(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstanceInformation = paginateDescribeInstanceInformation;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesForPatchGroupPaginator.js
var require_DescribeInstancePatchStatesForPatchGroupPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesForPatchGroupPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatchStatesForPatchGroup = void 0;
    var DescribeInstancePatchStatesForPatchGroupCommand_1 = require_DescribeInstancePatchStatesForPatchGroupCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand(input), ...args);
    };
    async function* paginateDescribeInstancePatchStatesForPatchGroup(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatchStatesForPatchGroup = paginateDescribeInstancePatchStatesForPatchGroup;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesPaginator.js
var require_DescribeInstancePatchStatesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatchStates = void 0;
    var DescribeInstancePatchStatesCommand_1 = require_DescribeInstancePatchStatesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand(input), ...args);
    };
    async function* paginateDescribeInstancePatchStates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatchStates = paginateDescribeInstancePatchStates;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchesPaginator.js
var require_DescribeInstancePatchesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatches = void 0;
    var DescribeInstancePatchesCommand_1 = require_DescribeInstancePatchesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand(input), ...args);
    };
    async function* paginateDescribeInstancePatches(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatches = paginateDescribeInstancePatches;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInventoryDeletionsPaginator.js
var require_DescribeInventoryDeletionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInventoryDeletionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInventoryDeletions = void 0;
    var DescribeInventoryDeletionsCommand_1 = require_DescribeInventoryDeletionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand(input), ...args);
    };
    async function* paginateDescribeInventoryDeletions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInventoryDeletions = paginateDescribeInventoryDeletions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTaskInvocationsPaginator.js
var require_DescribeMaintenanceWindowExecutionTaskInvocationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTaskInvocationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = void 0;
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutionTaskInvocations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = paginateDescribeMaintenanceWindowExecutionTaskInvocations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTasksPaginator.js
var require_DescribeMaintenanceWindowExecutionTasksPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutionTasks = void 0;
    var DescribeMaintenanceWindowExecutionTasksCommand_1 = require_DescribeMaintenanceWindowExecutionTasksCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutionTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutionTasks = paginateDescribeMaintenanceWindowExecutionTasks;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionsPaginator.js
var require_DescribeMaintenanceWindowExecutionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutions = void 0;
    var DescribeMaintenanceWindowExecutionsCommand_1 = require_DescribeMaintenanceWindowExecutionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutions = paginateDescribeMaintenanceWindowExecutions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowSchedulePaginator.js
var require_DescribeMaintenanceWindowSchedulePaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowSchedulePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowSchedule = void 0;
    var DescribeMaintenanceWindowScheduleCommand_1 = require_DescribeMaintenanceWindowScheduleCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowSchedule(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowSchedule = paginateDescribeMaintenanceWindowSchedule;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTargetsPaginator.js
var require_DescribeMaintenanceWindowTargetsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowTargets = void 0;
    var DescribeMaintenanceWindowTargetsCommand_1 = require_DescribeMaintenanceWindowTargetsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowTargets = paginateDescribeMaintenanceWindowTargets;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTasksPaginator.js
var require_DescribeMaintenanceWindowTasksPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowTasks = void 0;
    var DescribeMaintenanceWindowTasksCommand_1 = require_DescribeMaintenanceWindowTasksCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowTasks = paginateDescribeMaintenanceWindowTasks;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsForTargetPaginator.js
var require_DescribeMaintenanceWindowsForTargetPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsForTargetPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowsForTarget = void 0;
    var DescribeMaintenanceWindowsForTargetCommand_1 = require_DescribeMaintenanceWindowsForTargetCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowsForTarget(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowsForTarget = paginateDescribeMaintenanceWindowsForTarget;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsPaginator.js
var require_DescribeMaintenanceWindowsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindows = void 0;
    var DescribeMaintenanceWindowsCommand_1 = require_DescribeMaintenanceWindowsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindows(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindows = paginateDescribeMaintenanceWindows;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeOpsItemsPaginator.js
var require_DescribeOpsItemsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeOpsItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeOpsItems = void 0;
    var DescribeOpsItemsCommand_1 = require_DescribeOpsItemsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeOpsItemsCommand_1.DescribeOpsItemsCommand(input), ...args);
    };
    async function* paginateDescribeOpsItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeOpsItems = paginateDescribeOpsItems;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeParametersPaginator.js
var require_DescribeParametersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeParametersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeParameters = void 0;
    var DescribeParametersCommand_1 = require_DescribeParametersCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeParametersCommand_1.DescribeParametersCommand(input), ...args);
    };
    async function* paginateDescribeParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeParameters = paginateDescribeParameters;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchBaselinesPaginator.js
var require_DescribePatchBaselinesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchBaselinesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchBaselines = void 0;
    var DescribePatchBaselinesCommand_1 = require_DescribePatchBaselinesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand(input), ...args);
    };
    async function* paginateDescribePatchBaselines(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchBaselines = paginateDescribePatchBaselines;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchGroupsPaginator.js
var require_DescribePatchGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchGroups = void 0;
    var DescribePatchGroupsCommand_1 = require_DescribePatchGroupsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchGroupsCommand_1.DescribePatchGroupsCommand(input), ...args);
    };
    async function* paginateDescribePatchGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchGroups = paginateDescribePatchGroups;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchPropertiesPaginator.js
var require_DescribePatchPropertiesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchPropertiesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchProperties = void 0;
    var DescribePatchPropertiesCommand_1 = require_DescribePatchPropertiesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand(input), ...args);
    };
    async function* paginateDescribePatchProperties(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchProperties = paginateDescribePatchProperties;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeSessionsPaginator.js
var require_DescribeSessionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeSessionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeSessions = void 0;
    var DescribeSessionsCommand_1 = require_DescribeSessionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeSessionsCommand_1.DescribeSessionsCommand(input), ...args);
    };
    async function* paginateDescribeSessions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeSessions = paginateDescribeSessions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventoryPaginator.js
var require_GetInventoryPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventoryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetInventory = void 0;
    var GetInventoryCommand_1 = require_GetInventoryCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetInventoryCommand_1.GetInventoryCommand(input), ...args);
    };
    async function* paginateGetInventory(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetInventory = paginateGetInventory;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventorySchemaPaginator.js
var require_GetInventorySchemaPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventorySchemaPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetInventorySchema = void 0;
    var GetInventorySchemaCommand_1 = require_GetInventorySchemaCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetInventorySchemaCommand_1.GetInventorySchemaCommand(input), ...args);
    };
    async function* paginateGetInventorySchema(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetInventorySchema = paginateGetInventorySchema;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetOpsSummaryPaginator.js
var require_GetOpsSummaryPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetOpsSummaryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetOpsSummary = void 0;
    var GetOpsSummaryCommand_1 = require_GetOpsSummaryCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetOpsSummaryCommand_1.GetOpsSummaryCommand(input), ...args);
    };
    async function* paginateGetOpsSummary(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetOpsSummary = paginateGetOpsSummary;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParameterHistoryPaginator.js
var require_GetParameterHistoryPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParameterHistoryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetParameterHistory = void 0;
    var GetParameterHistoryCommand_1 = require_GetParameterHistoryCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetParameterHistoryCommand_1.GetParameterHistoryCommand(input), ...args);
    };
    async function* paginateGetParameterHistory(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetParameterHistory = paginateGetParameterHistory;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParametersByPathPaginator.js
var require_GetParametersByPathPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParametersByPathPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetParametersByPath = void 0;
    var GetParametersByPathCommand_1 = require_GetParametersByPathCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetParametersByPathCommand_1.GetParametersByPathCommand(input), ...args);
    };
    async function* paginateGetParametersByPath(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetParametersByPath = paginateGetParametersByPath;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetResourcePoliciesPaginator.js
var require_GetResourcePoliciesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetResourcePoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetResourcePolicies = void 0;
    var GetResourcePoliciesCommand_1 = require_GetResourcePoliciesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetResourcePoliciesCommand_1.GetResourcePoliciesCommand(input), ...args);
    };
    async function* paginateGetResourcePolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetResourcePolicies = paginateGetResourcePolicies;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationVersionsPaginator.js
var require_ListAssociationVersionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAssociationVersions = void 0;
    var ListAssociationVersionsCommand_1 = require_ListAssociationVersionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAssociationVersionsCommand_1.ListAssociationVersionsCommand(input), ...args);
    };
    async function* paginateListAssociationVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAssociationVersions = paginateListAssociationVersions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationsPaginator.js
var require_ListAssociationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAssociations = void 0;
    var ListAssociationsCommand_1 = require_ListAssociationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAssociationsCommand_1.ListAssociationsCommand(input), ...args);
    };
    async function* paginateListAssociations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAssociations = paginateListAssociations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandInvocationsPaginator.js
var require_ListCommandInvocationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandInvocationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCommandInvocations = void 0;
    var ListCommandInvocationsCommand_1 = require_ListCommandInvocationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCommandInvocationsCommand_1.ListCommandInvocationsCommand(input), ...args);
    };
    async function* paginateListCommandInvocations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListCommandInvocations = paginateListCommandInvocations;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandsPaginator.js
var require_ListCommandsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCommands = void 0;
    var ListCommandsCommand_1 = require_ListCommandsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCommandsCommand_1.ListCommandsCommand(input), ...args);
    };
    async function* paginateListCommands(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListCommands = paginateListCommands;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceItemsPaginator.js
var require_ListComplianceItemsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListComplianceItems = void 0;
    var ListComplianceItemsCommand_1 = require_ListComplianceItemsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListComplianceItemsCommand_1.ListComplianceItemsCommand(input), ...args);
    };
    async function* paginateListComplianceItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListComplianceItems = paginateListComplianceItems;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceSummariesPaginator.js
var require_ListComplianceSummariesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceSummariesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListComplianceSummaries = void 0;
    var ListComplianceSummariesCommand_1 = require_ListComplianceSummariesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListComplianceSummariesCommand_1.ListComplianceSummariesCommand(input), ...args);
    };
    async function* paginateListComplianceSummaries(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListComplianceSummaries = paginateListComplianceSummaries;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentVersionsPaginator.js
var require_ListDocumentVersionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListDocumentVersions = void 0;
    var ListDocumentVersionsCommand_1 = require_ListDocumentVersionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDocumentVersionsCommand_1.ListDocumentVersionsCommand(input), ...args);
    };
    async function* paginateListDocumentVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListDocumentVersions = paginateListDocumentVersions;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentsPaginator.js
var require_ListDocumentsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListDocuments = void 0;
    var ListDocumentsCommand_1 = require_ListDocumentsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDocumentsCommand_1.ListDocumentsCommand(input), ...args);
    };
    async function* paginateListDocuments(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListDocuments = paginateListDocuments;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemEventsPaginator.js
var require_ListOpsItemEventsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemEventsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsItemEvents = void 0;
    var ListOpsItemEventsCommand_1 = require_ListOpsItemEventsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsItemEventsCommand_1.ListOpsItemEventsCommand(input), ...args);
    };
    async function* paginateListOpsItemEvents(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsItemEvents = paginateListOpsItemEvents;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemRelatedItemsPaginator.js
var require_ListOpsItemRelatedItemsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemRelatedItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsItemRelatedItems = void 0;
    var ListOpsItemRelatedItemsCommand_1 = require_ListOpsItemRelatedItemsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand(input), ...args);
    };
    async function* paginateListOpsItemRelatedItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsItemRelatedItems = paginateListOpsItemRelatedItems;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsMetadataPaginator.js
var require_ListOpsMetadataPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsMetadataPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsMetadata = void 0;
    var ListOpsMetadataCommand_1 = require_ListOpsMetadataCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsMetadataCommand_1.ListOpsMetadataCommand(input), ...args);
    };
    async function* paginateListOpsMetadata(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsMetadata = paginateListOpsMetadata;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceComplianceSummariesPaginator.js
var require_ListResourceComplianceSummariesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceComplianceSummariesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListResourceComplianceSummaries = void 0;
    var ListResourceComplianceSummariesCommand_1 = require_ListResourceComplianceSummariesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand(input), ...args);
    };
    async function* paginateListResourceComplianceSummaries(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListResourceComplianceSummaries = paginateListResourceComplianceSummaries;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceDataSyncPaginator.js
var require_ListResourceDataSyncPaginator = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceDataSyncPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListResourceDataSync = void 0;
    var ListResourceDataSyncCommand_1 = require_ListResourceDataSyncCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListResourceDataSyncCommand_1.ListResourceDataSyncCommand(input), ...args);
    };
    async function* paginateListResourceDataSync(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListResourceDataSync = paginateListResourceDataSync;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/index.js
var require_pagination5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DescribeActivationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAutomationExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAutomationStepExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAvailablePatchesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEffectiveInstanceAssociationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEffectivePatchesForPatchBaselinePaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstanceAssociationsStatusPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstanceInformationPaginator(), exports);
    tslib_1.__exportStar(require_Interfaces3(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesForPatchGroupPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInventoryDeletionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTaskInvocationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowSchedulePaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsForTargetPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeOpsItemsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeParametersPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchBaselinesPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchPropertiesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeSessionsPaginator(), exports);
    tslib_1.__exportStar(require_GetInventoryPaginator(), exports);
    tslib_1.__exportStar(require_GetInventorySchemaPaginator(), exports);
    tslib_1.__exportStar(require_GetOpsSummaryPaginator(), exports);
    tslib_1.__exportStar(require_GetParameterHistoryPaginator(), exports);
    tslib_1.__exportStar(require_GetParametersByPathPaginator(), exports);
    tslib_1.__exportStar(require_GetResourcePoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListAssociationVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListAssociationsPaginator(), exports);
    tslib_1.__exportStar(require_ListCommandInvocationsPaginator(), exports);
    tslib_1.__exportStar(require_ListCommandsPaginator(), exports);
    tslib_1.__exportStar(require_ListComplianceItemsPaginator(), exports);
    tslib_1.__exportStar(require_ListComplianceSummariesPaginator(), exports);
    tslib_1.__exportStar(require_ListDocumentVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListDocumentsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsItemEventsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsItemRelatedItemsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsMetadataPaginator(), exports);
    tslib_1.__exportStar(require_ListResourceComplianceSummariesPaginator(), exports);
    tslib_1.__exportStar(require_ListResourceDataSyncPaginator(), exports);
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/waiter.js
var require_waiter3 = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter3();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/utils/validate.js
var require_validate = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate(), exports);
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter3();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  }
});

// node_modules/@smithy/util-waiter/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  "node_modules/@smithy/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter3(), exports);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/waitForCommandExecuted.js
var require_waitForCommandExecuted = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/waitForCommandExecuted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilCommandExecuted = exports.waitForCommandExecuted = void 0;
    var util_waiter_1 = require_dist_cjs55();
    var GetCommandInvocationCommand_1 = require_GetCommandInvocationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetCommandInvocationCommand_1.GetCommandInvocationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "InProgress") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Delayed") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Success") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Cancelled") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "TimedOut") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Cancelling") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvocationDoesNotExist") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForCommandExecuted = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForCommandExecuted = waitForCommandExecuted;
    var waitUntilCommandExecuted = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilCommandExecuted = waitUntilCommandExecuted;
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForCommandExecuted(), exports);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/models/index.js
var require_models5 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_05(), exports);
    tslib_1.__exportStar(require_models_12(), exports);
    tslib_1.__exportStar(require_models_2(), exports);
  }
});

// node_modules/@aws-sdk/client-ssm/dist-cjs/index.js
var require_dist_cjs56 = __commonJS({
  "node_modules/@aws-sdk/client-ssm/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSMClient(), exports);
    tslib_1.__exportStar(require_SSM(), exports);
    tslib_1.__exportStar(require_commands5(), exports);
    tslib_1.__exportStar(require_pagination5(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    tslib_1.__exportStar(require_models5(), exports);
    var SSMServiceException_1 = require_SSMServiceException();
    Object.defineProperty(exports, "SSMServiceException", { enumerable: true, get: function() {
      return SSMServiceException_1.SSMServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "chime"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/package.json
var require_package6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-chime-sdk-messaging",
      description: "AWS SDK for JavaScript Chime Sdk Messaging Client for Node.js, Browser and React Native",
      version: "3.370.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo chime-sdk-messaging"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.370.0",
        "@aws-sdk/credential-provider-node": "3.370.0",
        "@aws-sdk/middleware-host-header": "3.370.0",
        "@aws-sdk/middleware-logger": "3.370.0",
        "@aws-sdk/middleware-recursion-detection": "3.370.0",
        "@aws-sdk/middleware-signing": "3.370.0",
        "@aws-sdk/middleware-user-agent": "3.370.0",
        "@aws-sdk/types": "3.370.0",
        "@aws-sdk/util-endpoints": "3.370.0",
        "@aws-sdk/util-user-agent-browser": "3.370.0",
        "@aws-sdk/util-user-agent-node": "3.370.0",
        "@smithy/config-resolver": "^1.0.1",
        "@smithy/fetch-http-handler": "^1.0.1",
        "@smithy/hash-node": "^1.0.1",
        "@smithy/invalid-dependency": "^1.0.1",
        "@smithy/middleware-content-length": "^1.0.1",
        "@smithy/middleware-endpoint": "^1.0.2",
        "@smithy/middleware-retry": "^1.0.3",
        "@smithy/middleware-serde": "^1.0.1",
        "@smithy/middleware-stack": "^1.0.1",
        "@smithy/node-config-provider": "^1.0.1",
        "@smithy/node-http-handler": "^1.0.2",
        "@smithy/protocol-http": "^1.1.0",
        "@smithy/smithy-client": "^1.0.3",
        "@smithy/types": "^1.1.0",
        "@smithy/url-parser": "^1.0.1",
        "@smithy/util-base64": "^1.0.1",
        "@smithy/util-body-length-browser": "^1.0.1",
        "@smithy/util-body-length-node": "^1.0.1",
        "@smithy/util-defaults-mode-browser": "^1.0.1",
        "@smithy/util-defaults-mode-node": "^1.0.1",
        "@smithy/util-retry": "^1.0.3",
        "@smithy/util-utf8": "^1.0.1",
        tslib: "^2.5.0",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^1.0.1",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-chime-sdk-messaging",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-chime-sdk-messaging"
      }
    };
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/endpoint/ruleset.js
var require_ruleset6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var q = "required";
    var r = "fn";
    var s = "argv";
    var t = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = { [q]: false, "type": "String" };
    var g = { [q]: true, "default": false, "type": "Boolean" };
    var h = { [t]: "Endpoint" };
    var i = { [r]: "booleanEquals", [s]: [{ [t]: "UseFIPS" }, true] };
    var j = { [r]: "booleanEquals", [s]: [{ [t]: "UseDualStack" }, true] };
    var k = {};
    var l = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsFIPS"] }] };
    var m = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsDualStack"] }] };
    var n = [i];
    var o = [j];
    var p = [{ [t]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: f, UseDualStack: g, UseFIPS: g, Endpoint: f }, rules: [{ conditions: [{ [r]: a, [s]: [h] }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: h, properties: k, headers: k }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [r]: a, [s]: p }], type: b, rules: [{ conditions: [{ [r]: "aws.partition", [s]: p, assign: e }], type: b, rules: [{ conditions: [i, j], type: b, rules: [{ conditions: [l, m], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://messaging-chime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [l], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://messaging-chime-fips.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://messaging-chime.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { type: b, rules: [{ endpoint: { url: "https://messaging-chime.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset6();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver6();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2021-05-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "Chime SDK Messaging",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/runtimeConfig.js
var require_runtimeConfig6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package6());
    var client_sts_1 = require_dist_cjs53();
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared6();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/ChimeSDKMessagingClient.js
var require_ChimeSDKMessagingClient = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/ChimeSDKMessagingClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeSDKMessagingClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters6();
    var runtimeConfig_1 = require_runtimeConfig6();
    var ChimeSDKMessagingClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.ChimeSDKMessagingClient = ChimeSDKMessagingClient2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/models/ChimeSDKMessagingServiceException.js
var require_ChimeSDKMessagingServiceException = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/models/ChimeSDKMessagingServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeSDKMessagingServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var ChimeSDKMessagingServiceException = class _ChimeSDKMessagingServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _ChimeSDKMessagingServiceException.prototype);
      }
    };
    exports.ChimeSDKMessagingServiceException = ChimeSDKMessagingServiceException;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/models/models_0.js
var require_models_06 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChannelModeratorSummaryFilterSensitiveLog = exports.ChannelModeratorFilterSensitiveLog = exports.ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog = exports.ChannelMessageSummaryFilterSensitiveLog = exports.ChannelMessageFilterSensitiveLog = exports.ChannelMembershipSummaryFilterSensitiveLog = exports.ChannelMembershipPreferencesFilterSensitiveLog = exports.PushNotificationPreferencesFilterSensitiveLog = exports.ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog = exports.ChannelSummaryFilterSensitiveLog = exports.ChannelMembershipFilterSensitiveLog = exports.ChannelFlowSummaryFilterSensitiveLog = exports.ChannelFlowCallbackRequestFilterSensitiveLog = exports.ChannelMessageCallbackFilterSensitiveLog = exports.PushNotificationConfigurationFilterSensitiveLog = exports.MessageAttributeValueFilterSensitiveLog = exports.ChannelFlowFilterSensitiveLog = exports.ProcessorFilterSensitiveLog = exports.ChannelBanSummaryFilterSensitiveLog = exports.ChannelBanFilterSensitiveLog = exports.ChannelAssociatedWithFlowSummaryFilterSensitiveLog = exports.ChannelFilterSensitiveLog = exports.BatchCreateChannelMembershipResponseFilterSensitiveLog = exports.BatchChannelMembershipsFilterSensitiveLog = exports.IdentityFilterSensitiveLog = exports.SearchFieldOperator = exports.SearchFieldKey = exports.SortOrder = exports.MessagingDataType = exports.ChannelMessageType = exports.ChannelMessageStatus = exports.ChannelMessagePersistenceType = exports.PushNotificationType = exports.FallbackAction = exports.InvocationType = exports.ChannelPrivacy = exports.ChannelMode = exports.ExpirationCriterion = exports.ResourceLimitExceededException = exports.UnauthorizedClientException = exports.ThrottledClientException = exports.ServiceUnavailableException = exports.ServiceFailureException = exports.NotFoundException = exports.ForbiddenException = exports.ConflictException = exports.BadRequestException = exports.ErrorCode = exports.ChannelMembershipType = exports.AllowNotifications = void 0;
    exports.UpdateChannelMessageRequestFilterSensitiveLog = exports.UpdateChannelFlowRequestFilterSensitiveLog = exports.UpdateChannelRequestFilterSensitiveLog = exports.UntagResourceRequestFilterSensitiveLog = exports.TagResourceRequestFilterSensitiveLog = exports.SendChannelMessageRequestFilterSensitiveLog = exports.SearchChannelsResponseFilterSensitiveLog = exports.SearchChannelsRequestFilterSensitiveLog = exports.PutChannelMembershipPreferencesResponseFilterSensitiveLog = exports.PutChannelMembershipPreferencesRequestFilterSensitiveLog = exports.ListTagsForResourceResponseFilterSensitiveLog = exports.ListSubChannelsResponseFilterSensitiveLog = exports.ListSubChannelsRequestFilterSensitiveLog = exports.ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog = exports.ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog = exports.ListChannelsAssociatedWithChannelFlowResponseFilterSensitiveLog = exports.ListChannelsAssociatedWithChannelFlowRequestFilterSensitiveLog = exports.ListChannelsResponseFilterSensitiveLog = exports.ListChannelsRequestFilterSensitiveLog = exports.ListChannelModeratorsResponseFilterSensitiveLog = exports.ListChannelModeratorsRequestFilterSensitiveLog = exports.ListChannelMessagesResponseFilterSensitiveLog = exports.ListChannelMessagesRequestFilterSensitiveLog = exports.ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog = exports.ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog = exports.ListChannelMembershipsResponseFilterSensitiveLog = exports.ListChannelMembershipsRequestFilterSensitiveLog = exports.ListChannelFlowsResponseFilterSensitiveLog = exports.ListChannelFlowsRequestFilterSensitiveLog = exports.ListChannelBansResponseFilterSensitiveLog = exports.ListChannelBansRequestFilterSensitiveLog = exports.GetChannelMessageResponseFilterSensitiveLog = exports.GetChannelMembershipPreferencesResponseFilterSensitiveLog = exports.DescribeChannelModeratorResponseFilterSensitiveLog = exports.DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog = exports.DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog = exports.DescribeChannelMembershipResponseFilterSensitiveLog = exports.DescribeChannelFlowResponseFilterSensitiveLog = exports.DescribeChannelBanResponseFilterSensitiveLog = exports.DescribeChannelResponseFilterSensitiveLog = exports.CreateChannelModeratorResponseFilterSensitiveLog = exports.CreateChannelMembershipResponseFilterSensitiveLog = exports.CreateChannelFlowRequestFilterSensitiveLog = exports.CreateChannelBanResponseFilterSensitiveLog = exports.CreateChannelRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var ChimeSDKMessagingServiceException_1 = require_ChimeSDKMessagingServiceException();
    exports.AllowNotifications = {
      ALL: "ALL",
      FILTERED: "FILTERED",
      NONE: "NONE"
    };
    exports.ChannelMembershipType = {
      DEFAULT: "DEFAULT",
      HIDDEN: "HIDDEN"
    };
    exports.ErrorCode = {
      AccessDenied: "AccessDenied",
      BadRequest: "BadRequest",
      Conflict: "Conflict",
      Forbidden: "Forbidden",
      NotFound: "NotFound",
      PhoneNumberAssociationsExist: "PhoneNumberAssociationsExist",
      PreconditionFailed: "PreconditionFailed",
      ResourceLimitExceeded: "ResourceLimitExceeded",
      ServiceFailure: "ServiceFailure",
      ServiceUnavailable: "ServiceUnavailable",
      Throttled: "Throttled",
      Throttling: "Throttling",
      Unauthorized: "Unauthorized",
      Unprocessable: "Unprocessable",
      VoiceConnectorGroupAssociationsExist: "VoiceConnectorGroupAssociationsExist"
    };
    var BadRequestException = class _BadRequestException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "BadRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BadRequestException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.BadRequestException = BadRequestException;
    var ConflictException = class _ConflictException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "ConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConflictException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ConflictException = ConflictException;
    var ForbiddenException = class _ForbiddenException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "ForbiddenException",
          $fault: "client",
          ...opts
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ForbiddenException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ForbiddenException = ForbiddenException;
    var NotFoundException = class _NotFoundException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "NotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotFoundException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.NotFoundException = NotFoundException;
    var ServiceFailureException = class _ServiceFailureException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "ServiceFailureException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceFailureException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ServiceFailureException = ServiceFailureException;
    var ServiceUnavailableException = class _ServiceUnavailableException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "ServiceUnavailableException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ServiceUnavailableException = ServiceUnavailableException;
    var ThrottledClientException = class _ThrottledClientException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "ThrottledClientException",
          $fault: "client",
          ...opts
        });
        this.name = "ThrottledClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ThrottledClientException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ThrottledClientException = ThrottledClientException;
    var UnauthorizedClientException = class _UnauthorizedClientException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var ResourceLimitExceededException = class _ResourceLimitExceededException extends ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException {
      constructor(opts) {
        super({
          name: "ResourceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceLimitExceededException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ResourceLimitExceededException = ResourceLimitExceededException;
    exports.ExpirationCriterion = {
      CREATED_TIMESTAMP: "CREATED_TIMESTAMP",
      LAST_MESSAGE_TIMESTAMP: "LAST_MESSAGE_TIMESTAMP"
    };
    exports.ChannelMode = {
      RESTRICTED: "RESTRICTED",
      UNRESTRICTED: "UNRESTRICTED"
    };
    exports.ChannelPrivacy = {
      PRIVATE: "PRIVATE",
      PUBLIC: "PUBLIC"
    };
    exports.InvocationType = {
      ASYNC: "ASYNC"
    };
    exports.FallbackAction = {
      ABORT: "ABORT",
      CONTINUE: "CONTINUE"
    };
    exports.PushNotificationType = {
      DEFAULT: "DEFAULT",
      VOIP: "VOIP"
    };
    exports.ChannelMessagePersistenceType = {
      NON_PERSISTENT: "NON_PERSISTENT",
      PERSISTENT: "PERSISTENT"
    };
    exports.ChannelMessageStatus = {
      DENIED: "DENIED",
      FAILED: "FAILED",
      PENDING: "PENDING",
      SENT: "SENT"
    };
    exports.ChannelMessageType = {
      CONTROL: "CONTROL",
      STANDARD: "STANDARD"
    };
    exports.MessagingDataType = {
      Channel: "Channel",
      ChannelMessage: "ChannelMessage"
    };
    exports.SortOrder = {
      ASCENDING: "ASCENDING",
      DESCENDING: "DESCENDING"
    };
    exports.SearchFieldKey = {
      MEMBERS: "MEMBERS"
    };
    exports.SearchFieldOperator = {
      EQUALS: "EQUALS",
      INCLUDES: "INCLUDES"
    };
    var IdentityFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.IdentityFilterSensitiveLog = IdentityFilterSensitiveLog;
    var BatchChannelMembershipsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InvitedBy && { InvitedBy: (0, exports.IdentityFilterSensitiveLog)(obj.InvitedBy) },
      ...obj.Members && { Members: obj.Members.map((item) => (0, exports.IdentityFilterSensitiveLog)(item)) }
    });
    exports.BatchChannelMembershipsFilterSensitiveLog = BatchChannelMembershipsFilterSensitiveLog;
    var BatchCreateChannelMembershipResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.BatchChannelMemberships && {
        BatchChannelMemberships: (0, exports.BatchChannelMembershipsFilterSensitiveLog)(obj.BatchChannelMemberships)
      }
    });
    exports.BatchCreateChannelMembershipResponseFilterSensitiveLog = BatchCreateChannelMembershipResponseFilterSensitiveLog;
    var ChannelFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.CreatedBy && { CreatedBy: (0, exports.IdentityFilterSensitiveLog)(obj.CreatedBy) }
    });
    exports.ChannelFilterSensitiveLog = ChannelFilterSensitiveLog;
    var ChannelAssociatedWithFlowSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ChannelAssociatedWithFlowSummaryFilterSensitiveLog = ChannelAssociatedWithFlowSummaryFilterSensitiveLog;
    var ChannelBanFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) },
      ...obj.CreatedBy && { CreatedBy: (0, exports.IdentityFilterSensitiveLog)(obj.CreatedBy) }
    });
    exports.ChannelBanFilterSensitiveLog = ChannelBanFilterSensitiveLog;
    var ChannelBanSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.ChannelBanSummaryFilterSensitiveLog = ChannelBanSummaryFilterSensitiveLog;
    var ProcessorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ProcessorFilterSensitiveLog = ProcessorFilterSensitiveLog;
    var ChannelFlowFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Processors && { Processors: obj.Processors.map((item) => (0, exports.ProcessorFilterSensitiveLog)(item)) },
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ChannelFlowFilterSensitiveLog = ChannelFlowFilterSensitiveLog;
    var MessageAttributeValueFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.StringValues && { StringValues: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MessageAttributeValueFilterSensitiveLog = MessageAttributeValueFilterSensitiveLog;
    var PushNotificationConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Title && { Title: smithy_client_1.SENSITIVE_STRING },
      ...obj.Body && { Body: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PushNotificationConfigurationFilterSensitiveLog = PushNotificationConfigurationFilterSensitiveLog;
    var ChannelMessageCallbackFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.PushNotification && {
        PushNotification: (0, exports.PushNotificationConfigurationFilterSensitiveLog)(obj.PushNotification)
      },
      ...obj.MessageAttributes && {
        MessageAttributes: Object.entries(obj.MessageAttributes).reduce((acc, [key, value]) => (acc[key] = (0, exports.MessageAttributeValueFilterSensitiveLog)(value), acc), {})
      },
      ...obj.ContentType && { ContentType: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ChannelMessageCallbackFilterSensitiveLog = ChannelMessageCallbackFilterSensitiveLog;
    var ChannelFlowCallbackRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMessage && { ChannelMessage: (0, exports.ChannelMessageCallbackFilterSensitiveLog)(obj.ChannelMessage) }
    });
    exports.ChannelFlowCallbackRequestFilterSensitiveLog = ChannelFlowCallbackRequestFilterSensitiveLog;
    var ChannelFlowSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Processors && { Processors: obj.Processors.map((item) => (0, exports.ProcessorFilterSensitiveLog)(item)) }
    });
    exports.ChannelFlowSummaryFilterSensitiveLog = ChannelFlowSummaryFilterSensitiveLog;
    var ChannelMembershipFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InvitedBy && { InvitedBy: (0, exports.IdentityFilterSensitiveLog)(obj.InvitedBy) },
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.ChannelMembershipFilterSensitiveLog = ChannelMembershipFilterSensitiveLog;
    var ChannelSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ChannelSummaryFilterSensitiveLog = ChannelSummaryFilterSensitiveLog;
    var ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelSummary && { ChannelSummary: (0, exports.ChannelSummaryFilterSensitiveLog)(obj.ChannelSummary) }
    });
    exports.ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog = ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog;
    var PushNotificationPreferencesFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.FilterRule && { FilterRule: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PushNotificationPreferencesFilterSensitiveLog = PushNotificationPreferencesFilterSensitiveLog;
    var ChannelMembershipPreferencesFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PushNotifications && {
        PushNotifications: (0, exports.PushNotificationPreferencesFilterSensitiveLog)(obj.PushNotifications)
      }
    });
    exports.ChannelMembershipPreferencesFilterSensitiveLog = ChannelMembershipPreferencesFilterSensitiveLog;
    var ChannelMembershipSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.ChannelMembershipSummaryFilterSensitiveLog = ChannelMembershipSummaryFilterSensitiveLog;
    var ChannelMessageFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.Sender && { Sender: (0, exports.IdentityFilterSensitiveLog)(obj.Sender) },
      ...obj.MessageAttributes && {
        MessageAttributes: Object.entries(obj.MessageAttributes).reduce((acc, [key, value]) => (acc[key] = (0, exports.MessageAttributeValueFilterSensitiveLog)(value), acc), {})
      },
      ...obj.ContentType && { ContentType: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ChannelMessageFilterSensitiveLog = ChannelMessageFilterSensitiveLog;
    var ChannelMessageSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.Sender && { Sender: (0, exports.IdentityFilterSensitiveLog)(obj.Sender) },
      ...obj.MessageAttributes && {
        MessageAttributes: Object.entries(obj.MessageAttributes).reduce((acc, [key, value]) => (acc[key] = (0, exports.MessageAttributeValueFilterSensitiveLog)(value), acc), {})
      },
      ...obj.ContentType && { ContentType: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ChannelMessageSummaryFilterSensitiveLog = ChannelMessageSummaryFilterSensitiveLog;
    var ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelSummary && { ChannelSummary: (0, exports.ChannelSummaryFilterSensitiveLog)(obj.ChannelSummary) }
    });
    exports.ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog = ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog;
    var ChannelModeratorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Moderator && { Moderator: (0, exports.IdentityFilterSensitiveLog)(obj.Moderator) },
      ...obj.CreatedBy && { CreatedBy: (0, exports.IdentityFilterSensitiveLog)(obj.CreatedBy) }
    });
    exports.ChannelModeratorFilterSensitiveLog = ChannelModeratorFilterSensitiveLog;
    var ChannelModeratorSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Moderator && { Moderator: (0, exports.IdentityFilterSensitiveLog)(obj.Moderator) }
    });
    exports.ChannelModeratorSummaryFilterSensitiveLog = ChannelModeratorSummaryFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && { Key: smithy_client_1.SENSITIVE_STRING },
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var CreateChannelRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) },
      ...obj.ChannelId && { ChannelId: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateChannelRequestFilterSensitiveLog = CreateChannelRequestFilterSensitiveLog;
    var CreateChannelBanResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.CreateChannelBanResponseFilterSensitiveLog = CreateChannelBanResponseFilterSensitiveLog;
    var CreateChannelFlowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Processors && { Processors: obj.Processors.map((item) => (0, exports.ProcessorFilterSensitiveLog)(item)) },
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateChannelFlowRequestFilterSensitiveLog = CreateChannelFlowRequestFilterSensitiveLog;
    var CreateChannelMembershipResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) }
    });
    exports.CreateChannelMembershipResponseFilterSensitiveLog = CreateChannelMembershipResponseFilterSensitiveLog;
    var CreateChannelModeratorResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelModerator && { ChannelModerator: (0, exports.IdentityFilterSensitiveLog)(obj.ChannelModerator) }
    });
    exports.CreateChannelModeratorResponseFilterSensitiveLog = CreateChannelModeratorResponseFilterSensitiveLog;
    var DescribeChannelResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channel && { Channel: (0, exports.ChannelFilterSensitiveLog)(obj.Channel) }
    });
    exports.DescribeChannelResponseFilterSensitiveLog = DescribeChannelResponseFilterSensitiveLog;
    var DescribeChannelBanResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelBan && { ChannelBan: (0, exports.ChannelBanFilterSensitiveLog)(obj.ChannelBan) }
    });
    exports.DescribeChannelBanResponseFilterSensitiveLog = DescribeChannelBanResponseFilterSensitiveLog;
    var DescribeChannelFlowResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelFlow && { ChannelFlow: (0, exports.ChannelFlowFilterSensitiveLog)(obj.ChannelFlow) }
    });
    exports.DescribeChannelFlowResponseFilterSensitiveLog = DescribeChannelFlowResponseFilterSensitiveLog;
    var DescribeChannelMembershipResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMembership && { ChannelMembership: (0, exports.ChannelMembershipFilterSensitiveLog)(obj.ChannelMembership) }
    });
    exports.DescribeChannelMembershipResponseFilterSensitiveLog = DescribeChannelMembershipResponseFilterSensitiveLog;
    var DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMembership && {
        ChannelMembership: (0, exports.ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog)(obj.ChannelMembership)
      }
    });
    exports.DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog = DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog;
    var DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channel && { Channel: (0, exports.ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog)(obj.Channel) }
    });
    exports.DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog = DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog;
    var DescribeChannelModeratorResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelModerator && { ChannelModerator: (0, exports.ChannelModeratorFilterSensitiveLog)(obj.ChannelModerator) }
    });
    exports.DescribeChannelModeratorResponseFilterSensitiveLog = DescribeChannelModeratorResponseFilterSensitiveLog;
    var GetChannelMembershipPreferencesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) },
      ...obj.Preferences && { Preferences: (0, exports.ChannelMembershipPreferencesFilterSensitiveLog)(obj.Preferences) }
    });
    exports.GetChannelMembershipPreferencesResponseFilterSensitiveLog = GetChannelMembershipPreferencesResponseFilterSensitiveLog;
    var GetChannelMessageResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMessage && { ChannelMessage: (0, exports.ChannelMessageFilterSensitiveLog)(obj.ChannelMessage) }
    });
    exports.GetChannelMessageResponseFilterSensitiveLog = GetChannelMessageResponseFilterSensitiveLog;
    var ListChannelBansRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelBansRequestFilterSensitiveLog = ListChannelBansRequestFilterSensitiveLog;
    var ListChannelBansResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ChannelBans && { ChannelBans: obj.ChannelBans.map((item) => (0, exports.ChannelBanSummaryFilterSensitiveLog)(item)) }
    });
    exports.ListChannelBansResponseFilterSensitiveLog = ListChannelBansResponseFilterSensitiveLog;
    var ListChannelFlowsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelFlowsRequestFilterSensitiveLog = ListChannelFlowsRequestFilterSensitiveLog;
    var ListChannelFlowsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelFlows && { ChannelFlows: obj.ChannelFlows.map((item) => (0, exports.ChannelFlowSummaryFilterSensitiveLog)(item)) },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelFlowsResponseFilterSensitiveLog = ListChannelFlowsResponseFilterSensitiveLog;
    var ListChannelMembershipsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMembershipsRequestFilterSensitiveLog = ListChannelMembershipsRequestFilterSensitiveLog;
    var ListChannelMembershipsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMemberships && {
        ChannelMemberships: obj.ChannelMemberships.map((item) => (0, exports.ChannelMembershipSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMembershipsResponseFilterSensitiveLog = ListChannelMembershipsResponseFilterSensitiveLog;
    var ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog = ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog;
    var ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ChannelMemberships && {
        ChannelMemberships: obj.ChannelMemberships.map((item) => (0, exports.ChannelMembershipForAppInstanceUserSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog = ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog;
    var ListChannelMessagesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelMessagesRequestFilterSensitiveLog = ListChannelMessagesRequestFilterSensitiveLog;
    var ListChannelMessagesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ChannelMessages && {
        ChannelMessages: obj.ChannelMessages.map((item) => (0, exports.ChannelMessageSummaryFilterSensitiveLog)(item))
      }
    });
    exports.ListChannelMessagesResponseFilterSensitiveLog = ListChannelMessagesResponseFilterSensitiveLog;
    var ListChannelModeratorsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelModeratorsRequestFilterSensitiveLog = ListChannelModeratorsRequestFilterSensitiveLog;
    var ListChannelModeratorsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.ChannelModerators && {
        ChannelModerators: obj.ChannelModerators.map((item) => (0, exports.ChannelModeratorSummaryFilterSensitiveLog)(item))
      }
    });
    exports.ListChannelModeratorsResponseFilterSensitiveLog = ListChannelModeratorsResponseFilterSensitiveLog;
    var ListChannelsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsRequestFilterSensitiveLog = ListChannelsRequestFilterSensitiveLog;
    var ListChannelsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channels && { Channels: obj.Channels.map((item) => (0, exports.ChannelSummaryFilterSensitiveLog)(item)) },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsResponseFilterSensitiveLog = ListChannelsResponseFilterSensitiveLog;
    var ListChannelsAssociatedWithChannelFlowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsAssociatedWithChannelFlowRequestFilterSensitiveLog = ListChannelsAssociatedWithChannelFlowRequestFilterSensitiveLog;
    var ListChannelsAssociatedWithChannelFlowResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channels && {
        Channels: obj.Channels.map((item) => (0, exports.ChannelAssociatedWithFlowSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsAssociatedWithChannelFlowResponseFilterSensitiveLog = ListChannelsAssociatedWithChannelFlowResponseFilterSensitiveLog;
    var ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog = ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog;
    var ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channels && {
        Channels: obj.Channels.map((item) => (0, exports.ChannelModeratedByAppInstanceUserSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog = ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog;
    var ListSubChannelsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListSubChannelsRequestFilterSensitiveLog = ListSubChannelsRequestFilterSensitiveLog;
    var ListSubChannelsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListSubChannelsResponseFilterSensitiveLog = ListSubChannelsResponseFilterSensitiveLog;
    var ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.ListTagsForResourceResponseFilterSensitiveLog = ListTagsForResourceResponseFilterSensitiveLog;
    var PutChannelMembershipPreferencesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Preferences && { Preferences: (0, exports.ChannelMembershipPreferencesFilterSensitiveLog)(obj.Preferences) }
    });
    exports.PutChannelMembershipPreferencesRequestFilterSensitiveLog = PutChannelMembershipPreferencesRequestFilterSensitiveLog;
    var PutChannelMembershipPreferencesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Member && { Member: (0, exports.IdentityFilterSensitiveLog)(obj.Member) },
      ...obj.Preferences && { Preferences: (0, exports.ChannelMembershipPreferencesFilterSensitiveLog)(obj.Preferences) }
    });
    exports.PutChannelMembershipPreferencesResponseFilterSensitiveLog = PutChannelMembershipPreferencesResponseFilterSensitiveLog;
    var SearchChannelsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SearchChannelsRequestFilterSensitiveLog = SearchChannelsRequestFilterSensitiveLog;
    var SearchChannelsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Channels && { Channels: obj.Channels.map((item) => (0, exports.ChannelSummaryFilterSensitiveLog)(item)) },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SearchChannelsResponseFilterSensitiveLog = SearchChannelsResponseFilterSensitiveLog;
    var SendChannelMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.ClientRequestToken && { ClientRequestToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.PushNotification && {
        PushNotification: (0, exports.PushNotificationConfigurationFilterSensitiveLog)(obj.PushNotification)
      },
      ...obj.MessageAttributes && {
        MessageAttributes: Object.entries(obj.MessageAttributes).reduce((acc, [key, value]) => (acc[key] = (0, exports.MessageAttributeValueFilterSensitiveLog)(value), acc), {})
      },
      ...obj.ContentType && { ContentType: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SendChannelMessageRequestFilterSensitiveLog = SendChannelMessageRequestFilterSensitiveLog;
    var TagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.TagResourceRequestFilterSensitiveLog = TagResourceRequestFilterSensitiveLog;
    var UntagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TagKeys && { TagKeys: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UntagResourceRequestFilterSensitiveLog = UntagResourceRequestFilterSensitiveLog;
    var UpdateChannelRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateChannelRequestFilterSensitiveLog = UpdateChannelRequestFilterSensitiveLog;
    var UpdateChannelFlowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Processors && { Processors: obj.Processors.map((item) => (0, exports.ProcessorFilterSensitiveLog)(item)) },
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateChannelFlowRequestFilterSensitiveLog = UpdateChannelFlowRequestFilterSensitiveLog;
    var UpdateChannelMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.ContentType && { ContentType: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateChannelMessageRequestFilterSensitiveLog = UpdateChannelMessageRequestFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson14 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.se_UpdateChannelMessageCommand = exports.se_UpdateChannelFlowCommand = exports.se_UpdateChannelCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_SendChannelMessageCommand = exports.se_SearchChannelsCommand = exports.se_RedactChannelMessageCommand = exports.se_PutMessagingStreamingConfigurationsCommand = exports.se_PutChannelMembershipPreferencesCommand = exports.se_PutChannelExpirationSettingsCommand = exports.se_ListTagsForResourceCommand = exports.se_ListSubChannelsCommand = exports.se_ListChannelsModeratedByAppInstanceUserCommand = exports.se_ListChannelsAssociatedWithChannelFlowCommand = exports.se_ListChannelsCommand = exports.se_ListChannelModeratorsCommand = exports.se_ListChannelMessagesCommand = exports.se_ListChannelMembershipsForAppInstanceUserCommand = exports.se_ListChannelMembershipsCommand = exports.se_ListChannelFlowsCommand = exports.se_ListChannelBansCommand = exports.se_GetMessagingStreamingConfigurationsCommand = exports.se_GetMessagingSessionEndpointCommand = exports.se_GetChannelMessageStatusCommand = exports.se_GetChannelMessageCommand = exports.se_GetChannelMembershipPreferencesCommand = exports.se_DisassociateChannelFlowCommand = exports.se_DescribeChannelModeratorCommand = exports.se_DescribeChannelModeratedByAppInstanceUserCommand = exports.se_DescribeChannelMembershipForAppInstanceUserCommand = exports.se_DescribeChannelMembershipCommand = exports.se_DescribeChannelFlowCommand = exports.se_DescribeChannelBanCommand = exports.se_DescribeChannelCommand = exports.se_DeleteMessagingStreamingConfigurationsCommand = exports.se_DeleteChannelModeratorCommand = exports.se_DeleteChannelMessageCommand = exports.se_DeleteChannelMembershipCommand = exports.se_DeleteChannelFlowCommand = exports.se_DeleteChannelBanCommand = exports.se_DeleteChannelCommand = exports.se_CreateChannelModeratorCommand = exports.se_CreateChannelMembershipCommand = exports.se_CreateChannelFlowCommand = exports.se_CreateChannelBanCommand = exports.se_CreateChannelCommand = exports.se_ChannelFlowCallbackCommand = exports.se_BatchCreateChannelMembershipCommand = exports.se_AssociateChannelFlowCommand = void 0;
    exports.de_UpdateChannelFlowCommand = exports.de_UpdateChannelCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_SendChannelMessageCommand = exports.de_SearchChannelsCommand = exports.de_RedactChannelMessageCommand = exports.de_PutMessagingStreamingConfigurationsCommand = exports.de_PutChannelMembershipPreferencesCommand = exports.de_PutChannelExpirationSettingsCommand = exports.de_ListTagsForResourceCommand = exports.de_ListSubChannelsCommand = exports.de_ListChannelsModeratedByAppInstanceUserCommand = exports.de_ListChannelsAssociatedWithChannelFlowCommand = exports.de_ListChannelsCommand = exports.de_ListChannelModeratorsCommand = exports.de_ListChannelMessagesCommand = exports.de_ListChannelMembershipsForAppInstanceUserCommand = exports.de_ListChannelMembershipsCommand = exports.de_ListChannelFlowsCommand = exports.de_ListChannelBansCommand = exports.de_GetMessagingStreamingConfigurationsCommand = exports.de_GetMessagingSessionEndpointCommand = exports.de_GetChannelMessageStatusCommand = exports.de_GetChannelMessageCommand = exports.de_GetChannelMembershipPreferencesCommand = exports.de_DisassociateChannelFlowCommand = exports.de_DescribeChannelModeratorCommand = exports.de_DescribeChannelModeratedByAppInstanceUserCommand = exports.de_DescribeChannelMembershipForAppInstanceUserCommand = exports.de_DescribeChannelMembershipCommand = exports.de_DescribeChannelFlowCommand = exports.de_DescribeChannelBanCommand = exports.de_DescribeChannelCommand = exports.de_DeleteMessagingStreamingConfigurationsCommand = exports.de_DeleteChannelModeratorCommand = exports.de_DeleteChannelMessageCommand = exports.de_DeleteChannelMembershipCommand = exports.de_DeleteChannelFlowCommand = exports.de_DeleteChannelBanCommand = exports.de_DeleteChannelCommand = exports.de_CreateChannelModeratorCommand = exports.de_CreateChannelMembershipCommand = exports.de_CreateChannelFlowCommand = exports.de_CreateChannelBanCommand = exports.de_CreateChannelCommand = exports.de_ChannelFlowCallbackCommand = exports.de_BatchCreateChannelMembershipCommand = exports.de_AssociateChannelFlowCommand = exports.se_UpdateChannelReadMarkerCommand = void 0;
    exports.de_UpdateChannelReadMarkerCommand = exports.de_UpdateChannelMessageCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var ChimeSDKMessagingServiceException_1 = require_ChimeSDKMessagingServiceException();
    var models_0_1 = require_models_06();
    var se_AssociateChannelFlowCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/channel-flow`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ChannelFlowArn: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_AssociateChannelFlowCommand = se_AssociateChannelFlowCommand;
    var se_BatchCreateChannelMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "batch-create"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        MemberArns: (_) => (0, smithy_client_1._json)(_),
        SubChannelId: [],
        Type: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_BatchCreateChannelMembershipCommand = se_BatchCreateChannelMembershipCommand;
    var se_ChannelFlowCallbackCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "channel-flow-callback"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        CallbackId: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ChannelMessage: (_) => (0, smithy_client_1._json)(_),
        DeleteResource: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ChannelFlowCallbackCommand = se_ChannelFlowCallbackCommand;
    var se_CreateChannelCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceArn: [],
        ChannelId: [],
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ElasticChannelConfiguration: (_) => (0, smithy_client_1._json)(_),
        ExpirationSettings: (_) => (0, smithy_client_1._json)(_),
        MemberArns: (_) => (0, smithy_client_1._json)(_),
        Metadata: [],
        Mode: [],
        ModeratorArns: (_) => (0, smithy_client_1._json)(_),
        Name: [],
        Privacy: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelCommand = se_CreateChannelCommand;
    var se_CreateChannelBanCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/bans`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        MemberArn: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelBanCommand = se_CreateChannelBanCommand;
    var se_CreateChannelFlowCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channel-flows`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceArn: [],
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Name: [],
        Processors: (_) => (0, smithy_client_1._json)(_),
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelFlowCommand = se_CreateChannelFlowCommand;
    var se_CreateChannelMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        MemberArn: [],
        SubChannelId: [],
        Type: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelMembershipCommand = se_CreateChannelMembershipCommand;
    var se_CreateChannelModeratorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/moderators`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ChannelModeratorArn: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateChannelModeratorCommand = se_CreateChannelModeratorCommand;
    var se_DeleteChannelCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelCommand = se_DeleteChannelCommand;
    var se_DeleteChannelBanCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/bans/{MemberArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelBanCommand = se_DeleteChannelBanCommand;
    var se_DeleteChannelFlowCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channel-flows/{ChannelFlowArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelFlowArn", () => input.ChannelFlowArn, "{ChannelFlowArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelFlowCommand = se_DeleteChannelFlowCommand;
    var se_DeleteChannelMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships/{MemberArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      const query = (0, smithy_client_1.map)({
        "sub-channel-id": [, input.SubChannelId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DeleteChannelMembershipCommand = se_DeleteChannelMembershipCommand;
    var se_DeleteChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      const query = (0, smithy_client_1.map)({
        "sub-channel-id": [, input.SubChannelId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DeleteChannelMessageCommand = se_DeleteChannelMessageCommand;
    var se_DeleteChannelModeratorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/moderators/{ChannelModeratorArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelModeratorArn", () => input.ChannelModeratorArn, "{ChannelModeratorArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteChannelModeratorCommand = se_DeleteChannelModeratorCommand;
    var se_DeleteMessagingStreamingConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/streaming-configurations`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteMessagingStreamingConfigurationsCommand = se_DeleteMessagingStreamingConfigurationsCommand;
    var se_DescribeChannelCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeChannelCommand = se_DescribeChannelCommand;
    var se_DescribeChannelBanCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/bans/{MemberArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeChannelBanCommand = se_DescribeChannelBanCommand;
    var se_DescribeChannelFlowCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channel-flows/{ChannelFlowArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelFlowArn", () => input.ChannelFlowArn, "{ChannelFlowArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeChannelFlowCommand = se_DescribeChannelFlowCommand;
    var se_DescribeChannelMembershipCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships/{MemberArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      const query = (0, smithy_client_1.map)({
        "sub-channel-id": [, input.SubChannelId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DescribeChannelMembershipCommand = se_DescribeChannelMembershipCommand;
    var se_DescribeChannelMembershipForAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        scope: [, "app-instance-user-membership"],
        "app-instance-user-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceUserArn, `AppInstanceUserArn`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DescribeChannelMembershipForAppInstanceUserCommand = se_DescribeChannelMembershipForAppInstanceUserCommand;
    var se_DescribeChannelModeratedByAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        scope: [, "app-instance-user-moderated-channel"],
        "app-instance-user-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceUserArn, `AppInstanceUserArn`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_DescribeChannelModeratedByAppInstanceUserCommand = se_DescribeChannelModeratedByAppInstanceUserCommand;
    var se_DescribeChannelModeratorCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/moderators/{ChannelModeratorArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelModeratorArn", () => input.ChannelModeratorArn, "{ChannelModeratorArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeChannelModeratorCommand = se_DescribeChannelModeratorCommand;
    var se_DisassociateChannelFlowCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/channel-flow/{ChannelFlowArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelFlowArn", () => input.ChannelFlowArn, "{ChannelFlowArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DisassociateChannelFlowCommand = se_DisassociateChannelFlowCommand;
    var se_GetChannelMembershipPreferencesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships/{MemberArn}/preferences`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetChannelMembershipPreferencesCommand = se_GetChannelMembershipPreferencesCommand;
    var se_GetChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      const query = (0, smithy_client_1.map)({
        "sub-channel-id": [, input.SubChannelId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_GetChannelMessageCommand = se_GetChannelMessageCommand;
    var se_GetChannelMessageStatusCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      const query = (0, smithy_client_1.map)({
        scope: [, "message-status"],
        "sub-channel-id": [, input.SubChannelId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_GetChannelMessageStatusCommand = se_GetChannelMessageStatusCommand;
    var se_GetMessagingSessionEndpointCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/endpoints/messaging-session`;
      let body;
      body = "";
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetMessagingSessionEndpointCommand = se_GetMessagingSessionEndpointCommand;
    var se_GetMessagingStreamingConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/streaming-configurations`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetMessagingStreamingConfigurationsCommand = se_GetMessagingStreamingConfigurationsCommand;
    var se_ListChannelBansCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/bans`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelBansCommand = se_ListChannelBansCommand;
    var se_ListChannelFlowsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channel-flows`;
      const query = (0, smithy_client_1.map)({
        "app-instance-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceArn, `AppInstanceArn`)],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelFlowsCommand = se_ListChannelFlowsCommand;
    var se_ListChannelMembershipsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        type: [, input.Type],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken],
        "sub-channel-id": [, input.SubChannelId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelMembershipsCommand = se_ListChannelMembershipsCommand;
    var se_ListChannelMembershipsForAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      const query = (0, smithy_client_1.map)({
        scope: [, "app-instance-user-memberships"],
        "app-instance-user-arn": [, input.AppInstanceUserArn],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelMembershipsForAppInstanceUserCommand = se_ListChannelMembershipsForAppInstanceUserCommand;
    var se_ListChannelMessagesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        "sort-order": [, input.SortOrder],
        "not-before": [
          () => input.NotBefore !== void 0,
          () => (input.NotBefore.toISOString().split(".")[0] + "Z").toString()
        ],
        "not-after": [
          () => input.NotAfter !== void 0,
          () => (input.NotAfter.toISOString().split(".")[0] + "Z").toString()
        ],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken],
        "sub-channel-id": [, input.SubChannelId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelMessagesCommand = se_ListChannelMessagesCommand;
    var se_ListChannelModeratorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/moderators`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelModeratorsCommand = se_ListChannelModeratorsCommand;
    var se_ListChannelsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      const query = (0, smithy_client_1.map)({
        "app-instance-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceArn, `AppInstanceArn`)],
        privacy: [, input.Privacy],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelsCommand = se_ListChannelsCommand;
    var se_ListChannelsAssociatedWithChannelFlowCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      const query = (0, smithy_client_1.map)({
        scope: [, "channel-flow-associations"],
        "channel-flow-arn": [, (0, smithy_client_1.expectNonNull)(input.ChannelFlowArn, `ChannelFlowArn`)],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelsAssociatedWithChannelFlowCommand = se_ListChannelsAssociatedWithChannelFlowCommand;
    var se_ListChannelsModeratedByAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      const query = (0, smithy_client_1.map)({
        scope: [, "app-instance-user-moderated-channels"],
        "app-instance-user-arn": [, input.AppInstanceUserArn],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListChannelsModeratedByAppInstanceUserCommand = se_ListChannelsModeratedByAppInstanceUserCommand;
    var se_ListSubChannelsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/subchannels`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListSubChannelsCommand = se_ListSubChannelsCommand;
    var se_ListTagsForResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        arn: [, (0, smithy_client_1.expectNonNull)(input.ResourceARN, `ResourceARN`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
    var se_PutChannelExpirationSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/expiration-settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ExpirationSettings: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutChannelExpirationSettingsCommand = se_PutChannelExpirationSettingsCommand;
    var se_PutChannelMembershipPreferencesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/memberships/{MemberArn}/preferences`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MemberArn", () => input.MemberArn, "{MemberArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Preferences: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutChannelMembershipPreferencesCommand = se_PutChannelMembershipPreferencesCommand;
    var se_PutMessagingStreamingConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/streaming-configurations`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        StreamingConfigurations: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutMessagingStreamingConfigurationsCommand = se_PutMessagingStreamingConfigurationsCommand;
    var se_RedactChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      const query = (0, smithy_client_1.map)({
        operation: [, "redact"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        SubChannelId: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_RedactChannelMessageCommand = se_RedactChannelMessageCommand;
    var se_SearchChannelsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels`;
      const query = (0, smithy_client_1.map)({
        operation: [, "search"],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Fields: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_SearchChannelsCommand = se_SearchChannelsCommand;
    var se_SendChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Content: [],
        ContentType: [],
        MessageAttributes: (_) => (0, smithy_client_1._json)(_),
        Metadata: [],
        Persistence: [],
        PushNotification: (_) => (0, smithy_client_1._json)(_),
        SubChannelId: [],
        Target: (_) => (0, smithy_client_1._json)(_),
        Type: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_SendChannelMessageCommand = se_SendChannelMessageCommand;
    var se_TagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        operation: [, "tag-resource"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ResourceARN: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_TagResourceCommand = se_TagResourceCommand;
    var se_UntagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        operation: [, "untag-resource"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ResourceARN: [],
        TagKeys: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_UntagResourceCommand = se_UntagResourceCommand;
    var se_UpdateChannelCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Metadata: [],
        Mode: [],
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateChannelCommand = se_UpdateChannelCommand;
    var se_UpdateChannelFlowCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channel-flows/{ChannelFlowArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelFlowArn", () => input.ChannelFlowArn, "{ChannelFlowArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Name: [],
        Processors: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateChannelFlowCommand = se_UpdateChannelFlowCommand;
    var se_UpdateChannelMessageCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/messages/{MessageId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "MessageId", () => input.MessageId, "{MessageId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Content: [],
        ContentType: [],
        Metadata: [],
        SubChannelId: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateChannelMessageCommand = se_UpdateChannelMessageCommand;
    var se_UpdateChannelReadMarkerCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        "x-amz-chime-bearer": input.ChimeBearer
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/channels/{ChannelArn}/readMarker`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ChannelArn", () => input.ChannelArn, "{ChannelArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateChannelReadMarkerCommand = se_UpdateChannelReadMarkerCommand;
    var de_AssociateChannelFlowCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_AssociateChannelFlowCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_AssociateChannelFlowCommand = de_AssociateChannelFlowCommand;
    var de_AssociateChannelFlowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_BatchCreateChannelMembershipCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchCreateChannelMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        BatchChannelMemberships: smithy_client_1._json,
        Errors: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_BatchCreateChannelMembershipCommand = de_BatchCreateChannelMembershipCommand;
    var de_BatchCreateChannelMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ChannelFlowCallbackCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ChannelFlowCallbackCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        CallbackId: smithy_client_1.expectString,
        ChannelArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ChannelFlowCallbackCommand = de_ChannelFlowCallbackCommand;
    var de_ChannelFlowCallbackCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelCommand = de_CreateChannelCommand;
    var de_CreateChannelCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelBanCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelBanCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        Member: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelBanCommand = de_CreateChannelBanCommand;
    var de_CreateChannelBanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelFlowCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelFlowCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelFlowArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelFlowCommand = de_CreateChannelFlowCommand;
    var de_CreateChannelFlowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelMembershipCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        Member: smithy_client_1._json,
        SubChannelId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelMembershipCommand = de_CreateChannelMembershipCommand;
    var de_CreateChannelMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateChannelModeratorCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateChannelModeratorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelModerator: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateChannelModeratorCommand = de_CreateChannelModeratorCommand;
    var de_CreateChannelModeratorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelCommand = de_DeleteChannelCommand;
    var de_DeleteChannelCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelBanCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelBanCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelBanCommand = de_DeleteChannelBanCommand;
    var de_DeleteChannelBanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelFlowCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelFlowCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelFlowCommand = de_DeleteChannelFlowCommand;
    var de_DeleteChannelFlowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelMembershipCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelMembershipCommand = de_DeleteChannelMembershipCommand;
    var de_DeleteChannelMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelMessageCommand = de_DeleteChannelMessageCommand;
    var de_DeleteChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteChannelModeratorCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteChannelModeratorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteChannelModeratorCommand = de_DeleteChannelModeratorCommand;
    var de_DeleteChannelModeratorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteMessagingStreamingConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteMessagingStreamingConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteMessagingStreamingConfigurationsCommand = de_DeleteMessagingStreamingConfigurationsCommand;
    var de_DeleteMessagingStreamingConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channel: (_) => de_Channel(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelCommand = de_DescribeChannelCommand;
    var de_DescribeChannelCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelBanCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelBanCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelBan: (_) => de_ChannelBan(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelBanCommand = de_DescribeChannelBanCommand;
    var de_DescribeChannelBanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelFlowCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelFlowCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelFlow: (_) => de_ChannelFlow(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelFlowCommand = de_DescribeChannelFlowCommand;
    var de_DescribeChannelFlowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelMembershipCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelMembershipCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelMembership: (_) => de_ChannelMembership(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelMembershipCommand = de_DescribeChannelMembershipCommand;
    var de_DescribeChannelMembershipCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelMembershipForAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelMembershipForAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelMembership: (_) => de_ChannelMembershipForAppInstanceUserSummary(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelMembershipForAppInstanceUserCommand = de_DescribeChannelMembershipForAppInstanceUserCommand;
    var de_DescribeChannelMembershipForAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelModeratedByAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelModeratedByAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channel: (_) => de_ChannelModeratedByAppInstanceUserSummary(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelModeratedByAppInstanceUserCommand = de_DescribeChannelModeratedByAppInstanceUserCommand;
    var de_DescribeChannelModeratedByAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeChannelModeratorCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeChannelModeratorCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelModerator: (_) => de_ChannelModerator(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeChannelModeratorCommand = de_DescribeChannelModeratorCommand;
    var de_DescribeChannelModeratorCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DisassociateChannelFlowCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DisassociateChannelFlowCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DisassociateChannelFlowCommand = de_DisassociateChannelFlowCommand;
    var de_DisassociateChannelFlowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetChannelMembershipPreferencesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetChannelMembershipPreferencesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        Member: smithy_client_1._json,
        Preferences: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetChannelMembershipPreferencesCommand = de_GetChannelMembershipPreferencesCommand;
    var de_GetChannelMembershipPreferencesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelMessage: (_) => de_ChannelMessage(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetChannelMessageCommand = de_GetChannelMessageCommand;
    var de_GetChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetChannelMessageStatusCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetChannelMessageStatusCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Status: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetChannelMessageStatusCommand = de_GetChannelMessageStatusCommand;
    var de_GetChannelMessageStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMessagingSessionEndpointCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetMessagingSessionEndpointCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Endpoint: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetMessagingSessionEndpointCommand = de_GetMessagingSessionEndpointCommand;
    var de_GetMessagingSessionEndpointCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetMessagingStreamingConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetMessagingStreamingConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        StreamingConfigurations: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetMessagingStreamingConfigurationsCommand = de_GetMessagingStreamingConfigurationsCommand;
    var de_GetMessagingStreamingConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelBansCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelBansCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelBans: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelBansCommand = de_ListChannelBansCommand;
    var de_ListChannelBansCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelFlowsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelFlowsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelFlows: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelFlowsCommand = de_ListChannelFlowsCommand;
    var de_ListChannelFlowsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelMembershipsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelMembershipsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelMemberships: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelMembershipsCommand = de_ListChannelMembershipsCommand;
    var de_ListChannelMembershipsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelMembershipsForAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelMembershipsForAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelMemberships: (_) => de_ChannelMembershipForAppInstanceUserSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelMembershipsForAppInstanceUserCommand = de_ListChannelMembershipsForAppInstanceUserCommand;
    var de_ListChannelMembershipsForAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelMessagesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelMessagesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelMessages: (_) => de_ChannelMessageSummaryList(_, context),
        NextToken: smithy_client_1.expectString,
        SubChannelId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelMessagesCommand = de_ListChannelMessagesCommand;
    var de_ListChannelMessagesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelModeratorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelModeratorsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ChannelModerators: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelModeratorsCommand = de_ListChannelModeratorsCommand;
    var de_ListChannelModeratorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channels: (_) => de_ChannelSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelsCommand = de_ListChannelsCommand;
    var de_ListChannelsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelsAssociatedWithChannelFlowCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelsAssociatedWithChannelFlowCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channels: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelsAssociatedWithChannelFlowCommand = de_ListChannelsAssociatedWithChannelFlowCommand;
    var de_ListChannelsAssociatedWithChannelFlowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListChannelsModeratedByAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListChannelsModeratedByAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channels: (_) => de_ChannelModeratedByAppInstanceUserSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListChannelsModeratedByAppInstanceUserCommand = de_ListChannelsModeratedByAppInstanceUserCommand;
    var de_ListChannelsModeratedByAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListSubChannelsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListSubChannelsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        NextToken: smithy_client_1.expectString,
        SubChannels: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListSubChannelsCommand = de_ListSubChannelsCommand;
    var de_ListSubChannelsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Tags: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
    var de_ListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutChannelExpirationSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutChannelExpirationSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        ExpirationSettings: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutChannelExpirationSettingsCommand = de_PutChannelExpirationSettingsCommand;
    var de_PutChannelExpirationSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutChannelMembershipPreferencesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutChannelMembershipPreferencesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        Member: smithy_client_1._json,
        Preferences: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutChannelMembershipPreferencesCommand = de_PutChannelMembershipPreferencesCommand;
    var de_PutChannelMembershipPreferencesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutMessagingStreamingConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutMessagingStreamingConfigurationsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        StreamingConfigurations: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutMessagingStreamingConfigurationsCommand = de_PutMessagingStreamingConfigurationsCommand;
    var de_PutMessagingStreamingConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkmessaging#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RedactChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RedactChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        MessageId: smithy_client_1.expectString,
        SubChannelId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_RedactChannelMessageCommand = de_RedactChannelMessageCommand;
    var de_RedactChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_SearchChannelsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_SearchChannelsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Channels: (_) => de_ChannelSummaryList(_, context),
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_SearchChannelsCommand = de_SearchChannelsCommand;
    var de_SearchChannelsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_SendChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_SendChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        MessageId: smithy_client_1.expectString,
        Status: smithy_client_1._json,
        SubChannelId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_SendChannelMessageCommand = de_SendChannelMessageCommand;
    var de_SendChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_TagResourceCommand = de_TagResourceCommand;
    var de_TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UntagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UntagResourceCommand = de_UntagResourceCommand;
    var de_UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateChannelCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateChannelCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateChannelCommand = de_UpdateChannelCommand;
    var de_UpdateChannelCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateChannelFlowCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateChannelFlowCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelFlowArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateChannelFlowCommand = de_UpdateChannelFlowCommand;
    var de_UpdateChannelFlowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateChannelMessageCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateChannelMessageCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString,
        MessageId: smithy_client_1.expectString,
        Status: smithy_client_1._json,
        SubChannelId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateChannelMessageCommand = de_UpdateChannelMessageCommand;
    var de_UpdateChannelMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateChannelReadMarkerCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateChannelReadMarkerCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        ChannelArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateChannelReadMarkerCommand = de_UpdateChannelReadMarkerCommand;
    var de_UpdateChannelReadMarkerCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkmessaging#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkmessaging#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkmessaging#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkmessaging#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkmessaging#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException);
    var de_BadRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ConflictExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ForbiddenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_NotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ServiceFailureExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ServiceFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ThrottledClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ThrottledClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_AppInstanceUserMembershipSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ReadMarkerTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        SubChannelId: smithy_client_1.expectString,
        Type: smithy_client_1.expectString
      });
    };
    var de_Channel = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        ChannelFlowArn: smithy_client_1.expectString,
        CreatedBy: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ElasticChannelConfiguration: smithy_client_1._json,
        ExpirationSettings: smithy_client_1._json,
        LastMessageTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Mode: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Privacy: smithy_client_1.expectString
      });
    };
    var de_ChannelBan = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        CreatedBy: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Member: smithy_client_1._json
      });
    };
    var de_ChannelFlow = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelFlowArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        Processors: smithy_client_1._json
      });
    };
    var de_ChannelMembership = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        InvitedBy: smithy_client_1._json,
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Member: smithy_client_1._json,
        SubChannelId: smithy_client_1.expectString,
        Type: smithy_client_1.expectString
      });
    };
    var de_ChannelMembershipForAppInstanceUserSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AppInstanceUserMembershipSummary: (_) => de_AppInstanceUserMembershipSummary(_, context),
        ChannelSummary: (_) => de_ChannelSummary(_, context)
      });
    };
    var de_ChannelMembershipForAppInstanceUserSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ChannelMembershipForAppInstanceUserSummary(entry, context);
      });
      return retVal;
    };
    var de_ChannelMessage = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        Content: smithy_client_1.expectString,
        ContentType: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastEditedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MessageAttributes: smithy_client_1._json,
        MessageId: smithy_client_1.expectString,
        Metadata: smithy_client_1.expectString,
        Persistence: smithy_client_1.expectString,
        Redacted: smithy_client_1.expectBoolean,
        Sender: smithy_client_1._json,
        Status: smithy_client_1._json,
        SubChannelId: smithy_client_1.expectString,
        Target: smithy_client_1._json,
        Type: smithy_client_1.expectString
      });
    };
    var de_ChannelMessageSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Content: smithy_client_1.expectString,
        ContentType: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastEditedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MessageAttributes: smithy_client_1._json,
        MessageId: smithy_client_1.expectString,
        Metadata: smithy_client_1.expectString,
        Redacted: smithy_client_1.expectBoolean,
        Sender: smithy_client_1._json,
        Status: smithy_client_1._json,
        Target: smithy_client_1._json,
        Type: smithy_client_1.expectString
      });
    };
    var de_ChannelMessageSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ChannelMessageSummary(entry, context);
      });
      return retVal;
    };
    var de_ChannelModeratedByAppInstanceUserSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelSummary: (_) => de_ChannelSummary(_, context)
      });
    };
    var de_ChannelModeratedByAppInstanceUserSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ChannelModeratedByAppInstanceUserSummary(entry, context);
      });
      return retVal;
    };
    var de_ChannelModerator = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        CreatedBy: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Moderator: smithy_client_1._json
      });
    };
    var de_ChannelSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ChannelArn: smithy_client_1.expectString,
        LastMessageTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Mode: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Privacy: smithy_client_1.expectString
      });
    };
    var de_ChannelSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        return de_ChannelSummary(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/AssociateChannelFlowCommand.js
var require_AssociateChannelFlowCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/AssociateChannelFlowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociateChannelFlowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var AssociateChannelFlowCommand = class _AssociateChannelFlowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssociateChannelFlowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "AssociateChannelFlowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_AssociateChannelFlowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_AssociateChannelFlowCommand)(output, context);
      }
    };
    exports.AssociateChannelFlowCommand = AssociateChannelFlowCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/BatchCreateChannelMembershipCommand.js
var require_BatchCreateChannelMembershipCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/BatchCreateChannelMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchCreateChannelMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var BatchCreateChannelMembershipCommand = class _BatchCreateChannelMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchCreateChannelMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "BatchCreateChannelMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.BatchCreateChannelMembershipResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_BatchCreateChannelMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_BatchCreateChannelMembershipCommand)(output, context);
      }
    };
    exports.BatchCreateChannelMembershipCommand = BatchCreateChannelMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ChannelFlowCallbackCommand.js
var require_ChannelFlowCallbackCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ChannelFlowCallbackCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChannelFlowCallbackCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ChannelFlowCallbackCommand = class _ChannelFlowCallbackCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ChannelFlowCallbackCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ChannelFlowCallbackCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ChannelFlowCallbackRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ChannelFlowCallbackCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ChannelFlowCallbackCommand)(output, context);
      }
    };
    exports.ChannelFlowCallbackCommand = ChannelFlowCallbackCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelBanCommand.js
var require_CreateChannelBanCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelBanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelBanCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var CreateChannelBanCommand = class _CreateChannelBanCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelBanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "CreateChannelBanCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateChannelBanResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelBanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelBanCommand)(output, context);
      }
    };
    exports.CreateChannelBanCommand = CreateChannelBanCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelCommand.js
var require_CreateChannelCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var CreateChannelCommand = class _CreateChannelCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "CreateChannelCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateChannelRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelCommand)(output, context);
      }
    };
    exports.CreateChannelCommand = CreateChannelCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelFlowCommand.js
var require_CreateChannelFlowCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelFlowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelFlowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var CreateChannelFlowCommand2 = class _CreateChannelFlowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelFlowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "CreateChannelFlowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateChannelFlowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelFlowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelFlowCommand)(output, context);
      }
    };
    exports.CreateChannelFlowCommand = CreateChannelFlowCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelMembershipCommand.js
var require_CreateChannelMembershipCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var CreateChannelMembershipCommand = class _CreateChannelMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "CreateChannelMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateChannelMembershipResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelMembershipCommand)(output, context);
      }
    };
    exports.CreateChannelMembershipCommand = CreateChannelMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelModeratorCommand.js
var require_CreateChannelModeratorCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/CreateChannelModeratorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChannelModeratorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var CreateChannelModeratorCommand = class _CreateChannelModeratorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChannelModeratorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "CreateChannelModeratorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateChannelModeratorResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateChannelModeratorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateChannelModeratorCommand)(output, context);
      }
    };
    exports.CreateChannelModeratorCommand = CreateChannelModeratorCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelBanCommand.js
var require_DeleteChannelBanCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelBanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelBanCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DeleteChannelBanCommand = class _DeleteChannelBanCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelBanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DeleteChannelBanCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelBanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelBanCommand)(output, context);
      }
    };
    exports.DeleteChannelBanCommand = DeleteChannelBanCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelCommand.js
var require_DeleteChannelCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DeleteChannelCommand = class _DeleteChannelCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DeleteChannelCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelCommand)(output, context);
      }
    };
    exports.DeleteChannelCommand = DeleteChannelCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelFlowCommand.js
var require_DeleteChannelFlowCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelFlowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelFlowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DeleteChannelFlowCommand2 = class _DeleteChannelFlowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelFlowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DeleteChannelFlowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelFlowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelFlowCommand)(output, context);
      }
    };
    exports.DeleteChannelFlowCommand = DeleteChannelFlowCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelMembershipCommand.js
var require_DeleteChannelMembershipCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DeleteChannelMembershipCommand = class _DeleteChannelMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DeleteChannelMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelMembershipCommand)(output, context);
      }
    };
    exports.DeleteChannelMembershipCommand = DeleteChannelMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelMessageCommand.js
var require_DeleteChannelMessageCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DeleteChannelMessageCommand = class _DeleteChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DeleteChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelMessageCommand)(output, context);
      }
    };
    exports.DeleteChannelMessageCommand = DeleteChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelModeratorCommand.js
var require_DeleteChannelModeratorCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteChannelModeratorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChannelModeratorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DeleteChannelModeratorCommand = class _DeleteChannelModeratorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChannelModeratorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DeleteChannelModeratorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteChannelModeratorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteChannelModeratorCommand)(output, context);
      }
    };
    exports.DeleteChannelModeratorCommand = DeleteChannelModeratorCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteMessagingStreamingConfigurationsCommand.js
var require_DeleteMessagingStreamingConfigurationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DeleteMessagingStreamingConfigurationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteMessagingStreamingConfigurationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DeleteMessagingStreamingConfigurationsCommand = class _DeleteMessagingStreamingConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteMessagingStreamingConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DeleteMessagingStreamingConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteMessagingStreamingConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteMessagingStreamingConfigurationsCommand)(output, context);
      }
    };
    exports.DeleteMessagingStreamingConfigurationsCommand = DeleteMessagingStreamingConfigurationsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelBanCommand.js
var require_DescribeChannelBanCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelBanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelBanCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DescribeChannelBanCommand = class _DescribeChannelBanCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelBanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DescribeChannelBanCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelBanResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelBanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelBanCommand)(output, context);
      }
    };
    exports.DescribeChannelBanCommand = DescribeChannelBanCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelCommand.js
var require_DescribeChannelCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DescribeChannelCommand = class _DescribeChannelCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DescribeChannelCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelCommand)(output, context);
      }
    };
    exports.DescribeChannelCommand = DescribeChannelCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelFlowCommand.js
var require_DescribeChannelFlowCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelFlowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelFlowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DescribeChannelFlowCommand = class _DescribeChannelFlowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelFlowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DescribeChannelFlowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelFlowResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelFlowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelFlowCommand)(output, context);
      }
    };
    exports.DescribeChannelFlowCommand = DescribeChannelFlowCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelMembershipCommand.js
var require_DescribeChannelMembershipCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelMembershipCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelMembershipCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DescribeChannelMembershipCommand = class _DescribeChannelMembershipCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelMembershipCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DescribeChannelMembershipCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelMembershipResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelMembershipCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelMembershipCommand)(output, context);
      }
    };
    exports.DescribeChannelMembershipCommand = DescribeChannelMembershipCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelMembershipForAppInstanceUserCommand.js
var require_DescribeChannelMembershipForAppInstanceUserCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelMembershipForAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelMembershipForAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DescribeChannelMembershipForAppInstanceUserCommand = class _DescribeChannelMembershipForAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelMembershipForAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DescribeChannelMembershipForAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelMembershipForAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelMembershipForAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelMembershipForAppInstanceUserCommand)(output, context);
      }
    };
    exports.DescribeChannelMembershipForAppInstanceUserCommand = DescribeChannelMembershipForAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelModeratedByAppInstanceUserCommand.js
var require_DescribeChannelModeratedByAppInstanceUserCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelModeratedByAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelModeratedByAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DescribeChannelModeratedByAppInstanceUserCommand = class _DescribeChannelModeratedByAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelModeratedByAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DescribeChannelModeratedByAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelModeratedByAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelModeratedByAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelModeratedByAppInstanceUserCommand)(output, context);
      }
    };
    exports.DescribeChannelModeratedByAppInstanceUserCommand = DescribeChannelModeratedByAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelModeratorCommand.js
var require_DescribeChannelModeratorCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DescribeChannelModeratorCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChannelModeratorCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DescribeChannelModeratorCommand = class _DescribeChannelModeratorCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChannelModeratorCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DescribeChannelModeratorCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeChannelModeratorResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeChannelModeratorCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeChannelModeratorCommand)(output, context);
      }
    };
    exports.DescribeChannelModeratorCommand = DescribeChannelModeratorCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DisassociateChannelFlowCommand.js
var require_DisassociateChannelFlowCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/DisassociateChannelFlowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociateChannelFlowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var DisassociateChannelFlowCommand = class _DisassociateChannelFlowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DisassociateChannelFlowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "DisassociateChannelFlowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DisassociateChannelFlowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DisassociateChannelFlowCommand)(output, context);
      }
    };
    exports.DisassociateChannelFlowCommand = DisassociateChannelFlowCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetChannelMembershipPreferencesCommand.js
var require_GetChannelMembershipPreferencesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetChannelMembershipPreferencesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetChannelMembershipPreferencesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var GetChannelMembershipPreferencesCommand = class _GetChannelMembershipPreferencesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetChannelMembershipPreferencesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "GetChannelMembershipPreferencesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetChannelMembershipPreferencesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetChannelMembershipPreferencesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetChannelMembershipPreferencesCommand)(output, context);
      }
    };
    exports.GetChannelMembershipPreferencesCommand = GetChannelMembershipPreferencesCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetChannelMessageCommand.js
var require_GetChannelMessageCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var GetChannelMessageCommand = class _GetChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "GetChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.GetChannelMessageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetChannelMessageCommand)(output, context);
      }
    };
    exports.GetChannelMessageCommand = GetChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetChannelMessageStatusCommand.js
var require_GetChannelMessageStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetChannelMessageStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetChannelMessageStatusCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var GetChannelMessageStatusCommand = class _GetChannelMessageStatusCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetChannelMessageStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "GetChannelMessageStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetChannelMessageStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetChannelMessageStatusCommand)(output, context);
      }
    };
    exports.GetChannelMessageStatusCommand = GetChannelMessageStatusCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetMessagingSessionEndpointCommand.js
var require_GetMessagingSessionEndpointCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetMessagingSessionEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMessagingSessionEndpointCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var GetMessagingSessionEndpointCommand = class _GetMessagingSessionEndpointCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMessagingSessionEndpointCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "GetMessagingSessionEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetMessagingSessionEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetMessagingSessionEndpointCommand)(output, context);
      }
    };
    exports.GetMessagingSessionEndpointCommand = GetMessagingSessionEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetMessagingStreamingConfigurationsCommand.js
var require_GetMessagingStreamingConfigurationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/GetMessagingStreamingConfigurationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMessagingStreamingConfigurationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var GetMessagingStreamingConfigurationsCommand = class _GetMessagingStreamingConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetMessagingStreamingConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "GetMessagingStreamingConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetMessagingStreamingConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetMessagingStreamingConfigurationsCommand)(output, context);
      }
    };
    exports.GetMessagingStreamingConfigurationsCommand = GetMessagingStreamingConfigurationsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelBansCommand.js
var require_ListChannelBansCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelBansCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelBansCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelBansCommand = class _ListChannelBansCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelBansCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelBansCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelBansRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelBansResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelBansCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelBansCommand)(output, context);
      }
    };
    exports.ListChannelBansCommand = ListChannelBansCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelFlowsCommand.js
var require_ListChannelFlowsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelFlowsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelFlowsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelFlowsCommand = class _ListChannelFlowsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelFlowsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelFlowsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelFlowsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelFlowsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelFlowsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelFlowsCommand)(output, context);
      }
    };
    exports.ListChannelFlowsCommand = ListChannelFlowsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelMembershipsCommand.js
var require_ListChannelMembershipsCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelMembershipsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelMembershipsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelMembershipsCommand = class _ListChannelMembershipsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelMembershipsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelMembershipsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelMembershipsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelMembershipsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelMembershipsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelMembershipsCommand)(output, context);
      }
    };
    exports.ListChannelMembershipsCommand = ListChannelMembershipsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelMembershipsForAppInstanceUserCommand.js
var require_ListChannelMembershipsForAppInstanceUserCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelMembershipsForAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelMembershipsForAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelMembershipsForAppInstanceUserCommand = class _ListChannelMembershipsForAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelMembershipsForAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelMembershipsForAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelMembershipsForAppInstanceUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelMembershipsForAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelMembershipsForAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelMembershipsForAppInstanceUserCommand)(output, context);
      }
    };
    exports.ListChannelMembershipsForAppInstanceUserCommand = ListChannelMembershipsForAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelMessagesCommand.js
var require_ListChannelMessagesCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelMessagesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelMessagesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelMessagesCommand = class _ListChannelMessagesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelMessagesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelMessagesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelMessagesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelMessagesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelMessagesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelMessagesCommand)(output, context);
      }
    };
    exports.ListChannelMessagesCommand = ListChannelMessagesCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelModeratorsCommand.js
var require_ListChannelModeratorsCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelModeratorsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelModeratorsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelModeratorsCommand = class _ListChannelModeratorsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelModeratorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelModeratorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelModeratorsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelModeratorsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelModeratorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelModeratorsCommand)(output, context);
      }
    };
    exports.ListChannelModeratorsCommand = ListChannelModeratorsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelsAssociatedWithChannelFlowCommand.js
var require_ListChannelsAssociatedWithChannelFlowCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelsAssociatedWithChannelFlowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelsAssociatedWithChannelFlowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelsAssociatedWithChannelFlowCommand = class _ListChannelsAssociatedWithChannelFlowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelsAssociatedWithChannelFlowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelsAssociatedWithChannelFlowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelsAssociatedWithChannelFlowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelsAssociatedWithChannelFlowResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelsAssociatedWithChannelFlowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelsAssociatedWithChannelFlowCommand)(output, context);
      }
    };
    exports.ListChannelsAssociatedWithChannelFlowCommand = ListChannelsAssociatedWithChannelFlowCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelsCommand.js
var require_ListChannelsCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelsCommand = class _ListChannelsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelsCommand)(output, context);
      }
    };
    exports.ListChannelsCommand = ListChannelsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelsModeratedByAppInstanceUserCommand.js
var require_ListChannelsModeratedByAppInstanceUserCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListChannelsModeratedByAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChannelsModeratedByAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListChannelsModeratedByAppInstanceUserCommand = class _ListChannelsModeratedByAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChannelsModeratedByAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListChannelsModeratedByAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChannelsModeratedByAppInstanceUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChannelsModeratedByAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListChannelsModeratedByAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListChannelsModeratedByAppInstanceUserCommand)(output, context);
      }
    };
    exports.ListChannelsModeratedByAppInstanceUserCommand = ListChannelsModeratedByAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListSubChannelsCommand.js
var require_ListSubChannelsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListSubChannelsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSubChannelsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListSubChannelsCommand = class _ListSubChannelsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListSubChannelsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListSubChannelsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListSubChannelsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListSubChannelsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListSubChannelsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListSubChannelsCommand)(output, context);
      }
    };
    exports.ListSubChannelsCommand = ListSubChannelsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand3 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/ListTagsForResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsForResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var ListTagsForResourceCommand = class _ListTagsForResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.ListTagsForResourceResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListTagsForResourceCommand)(output, context);
      }
    };
    exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/PutChannelExpirationSettingsCommand.js
var require_PutChannelExpirationSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/PutChannelExpirationSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutChannelExpirationSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var PutChannelExpirationSettingsCommand = class _PutChannelExpirationSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutChannelExpirationSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "PutChannelExpirationSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutChannelExpirationSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutChannelExpirationSettingsCommand)(output, context);
      }
    };
    exports.PutChannelExpirationSettingsCommand = PutChannelExpirationSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/PutChannelMembershipPreferencesCommand.js
var require_PutChannelMembershipPreferencesCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/PutChannelMembershipPreferencesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutChannelMembershipPreferencesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var PutChannelMembershipPreferencesCommand = class _PutChannelMembershipPreferencesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutChannelMembershipPreferencesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "PutChannelMembershipPreferencesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutChannelMembershipPreferencesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutChannelMembershipPreferencesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutChannelMembershipPreferencesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutChannelMembershipPreferencesCommand)(output, context);
      }
    };
    exports.PutChannelMembershipPreferencesCommand = PutChannelMembershipPreferencesCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/PutMessagingStreamingConfigurationsCommand.js
var require_PutMessagingStreamingConfigurationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/PutMessagingStreamingConfigurationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutMessagingStreamingConfigurationsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var PutMessagingStreamingConfigurationsCommand = class _PutMessagingStreamingConfigurationsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutMessagingStreamingConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "PutMessagingStreamingConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutMessagingStreamingConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutMessagingStreamingConfigurationsCommand)(output, context);
      }
    };
    exports.PutMessagingStreamingConfigurationsCommand = PutMessagingStreamingConfigurationsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/RedactChannelMessageCommand.js
var require_RedactChannelMessageCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/RedactChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RedactChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var RedactChannelMessageCommand = class _RedactChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RedactChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "RedactChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RedactChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RedactChannelMessageCommand)(output, context);
      }
    };
    exports.RedactChannelMessageCommand = RedactChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/SearchChannelsCommand.js
var require_SearchChannelsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/SearchChannelsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SearchChannelsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var SearchChannelsCommand = class _SearchChannelsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SearchChannelsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "SearchChannelsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SearchChannelsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SearchChannelsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_SearchChannelsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_SearchChannelsCommand)(output, context);
      }
    };
    exports.SearchChannelsCommand = SearchChannelsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/SendChannelMessageCommand.js
var require_SendChannelMessageCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/SendChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var SendChannelMessageCommand = class _SendChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SendChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "SendChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SendChannelMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_SendChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_SendChannelMessageCommand)(output, context);
      }
    };
    exports.SendChannelMessageCommand = SendChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/TagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var TagResourceCommand = class _TagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UntagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var UntagResourceCommand = class _UntagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UpdateChannelCommand.js
var require_UpdateChannelCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UpdateChannelCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateChannelCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var UpdateChannelCommand = class _UpdateChannelCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateChannelCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "UpdateChannelCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateChannelRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateChannelCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateChannelCommand)(output, context);
      }
    };
    exports.UpdateChannelCommand = UpdateChannelCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UpdateChannelFlowCommand.js
var require_UpdateChannelFlowCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UpdateChannelFlowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateChannelFlowCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var UpdateChannelFlowCommand2 = class _UpdateChannelFlowCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateChannelFlowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "UpdateChannelFlowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateChannelFlowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateChannelFlowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateChannelFlowCommand)(output, context);
      }
    };
    exports.UpdateChannelFlowCommand = UpdateChannelFlowCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UpdateChannelMessageCommand.js
var require_UpdateChannelMessageCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UpdateChannelMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateChannelMessageCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_06();
    var Aws_restJson1_1 = require_Aws_restJson14();
    var UpdateChannelMessageCommand = class _UpdateChannelMessageCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateChannelMessageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "UpdateChannelMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateChannelMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateChannelMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateChannelMessageCommand)(output, context);
      }
    };
    exports.UpdateChannelMessageCommand = UpdateChannelMessageCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UpdateChannelReadMarkerCommand.js
var require_UpdateChannelReadMarkerCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/UpdateChannelReadMarkerCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateChannelReadMarkerCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson14();
    var UpdateChannelReadMarkerCommand = class _UpdateChannelReadMarkerCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateChannelReadMarkerCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKMessagingClient";
        const commandName = "UpdateChannelReadMarkerCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateChannelReadMarkerCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateChannelReadMarkerCommand)(output, context);
      }
    };
    exports.UpdateChannelReadMarkerCommand = UpdateChannelReadMarkerCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/ChimeSDKMessaging.js
var require_ChimeSDKMessaging = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/ChimeSDKMessaging.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeSDKMessaging = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var AssociateChannelFlowCommand_1 = require_AssociateChannelFlowCommand();
    var BatchCreateChannelMembershipCommand_1 = require_BatchCreateChannelMembershipCommand2();
    var ChannelFlowCallbackCommand_1 = require_ChannelFlowCallbackCommand();
    var CreateChannelBanCommand_1 = require_CreateChannelBanCommand2();
    var CreateChannelCommand_1 = require_CreateChannelCommand2();
    var CreateChannelFlowCommand_1 = require_CreateChannelFlowCommand();
    var CreateChannelMembershipCommand_1 = require_CreateChannelMembershipCommand2();
    var CreateChannelModeratorCommand_1 = require_CreateChannelModeratorCommand2();
    var DeleteChannelBanCommand_1 = require_DeleteChannelBanCommand2();
    var DeleteChannelCommand_1 = require_DeleteChannelCommand2();
    var DeleteChannelFlowCommand_1 = require_DeleteChannelFlowCommand();
    var DeleteChannelMembershipCommand_1 = require_DeleteChannelMembershipCommand2();
    var DeleteChannelMessageCommand_1 = require_DeleteChannelMessageCommand2();
    var DeleteChannelModeratorCommand_1 = require_DeleteChannelModeratorCommand2();
    var DeleteMessagingStreamingConfigurationsCommand_1 = require_DeleteMessagingStreamingConfigurationsCommand();
    var DescribeChannelBanCommand_1 = require_DescribeChannelBanCommand2();
    var DescribeChannelCommand_1 = require_DescribeChannelCommand2();
    var DescribeChannelFlowCommand_1 = require_DescribeChannelFlowCommand();
    var DescribeChannelMembershipCommand_1 = require_DescribeChannelMembershipCommand2();
    var DescribeChannelMembershipForAppInstanceUserCommand_1 = require_DescribeChannelMembershipForAppInstanceUserCommand2();
    var DescribeChannelModeratedByAppInstanceUserCommand_1 = require_DescribeChannelModeratedByAppInstanceUserCommand2();
    var DescribeChannelModeratorCommand_1 = require_DescribeChannelModeratorCommand2();
    var DisassociateChannelFlowCommand_1 = require_DisassociateChannelFlowCommand();
    var GetChannelMembershipPreferencesCommand_1 = require_GetChannelMembershipPreferencesCommand();
    var GetChannelMessageCommand_1 = require_GetChannelMessageCommand2();
    var GetChannelMessageStatusCommand_1 = require_GetChannelMessageStatusCommand();
    var GetMessagingSessionEndpointCommand_1 = require_GetMessagingSessionEndpointCommand2();
    var GetMessagingStreamingConfigurationsCommand_1 = require_GetMessagingStreamingConfigurationsCommand();
    var ListChannelBansCommand_1 = require_ListChannelBansCommand2();
    var ListChannelFlowsCommand_1 = require_ListChannelFlowsCommand();
    var ListChannelMembershipsCommand_1 = require_ListChannelMembershipsCommand2();
    var ListChannelMembershipsForAppInstanceUserCommand_1 = require_ListChannelMembershipsForAppInstanceUserCommand2();
    var ListChannelMessagesCommand_1 = require_ListChannelMessagesCommand2();
    var ListChannelModeratorsCommand_1 = require_ListChannelModeratorsCommand2();
    var ListChannelsAssociatedWithChannelFlowCommand_1 = require_ListChannelsAssociatedWithChannelFlowCommand();
    var ListChannelsCommand_1 = require_ListChannelsCommand2();
    var ListChannelsModeratedByAppInstanceUserCommand_1 = require_ListChannelsModeratedByAppInstanceUserCommand2();
    var ListSubChannelsCommand_1 = require_ListSubChannelsCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand3();
    var PutChannelExpirationSettingsCommand_1 = require_PutChannelExpirationSettingsCommand();
    var PutChannelMembershipPreferencesCommand_1 = require_PutChannelMembershipPreferencesCommand();
    var PutMessagingStreamingConfigurationsCommand_1 = require_PutMessagingStreamingConfigurationsCommand();
    var RedactChannelMessageCommand_1 = require_RedactChannelMessageCommand2();
    var SearchChannelsCommand_1 = require_SearchChannelsCommand();
    var SendChannelMessageCommand_1 = require_SendChannelMessageCommand2();
    var TagResourceCommand_1 = require_TagResourceCommand2();
    var UntagResourceCommand_1 = require_UntagResourceCommand2();
    var UpdateChannelCommand_1 = require_UpdateChannelCommand2();
    var UpdateChannelFlowCommand_1 = require_UpdateChannelFlowCommand();
    var UpdateChannelMessageCommand_1 = require_UpdateChannelMessageCommand2();
    var UpdateChannelReadMarkerCommand_1 = require_UpdateChannelReadMarkerCommand2();
    var commands = {
      AssociateChannelFlowCommand: AssociateChannelFlowCommand_1.AssociateChannelFlowCommand,
      BatchCreateChannelMembershipCommand: BatchCreateChannelMembershipCommand_1.BatchCreateChannelMembershipCommand,
      ChannelFlowCallbackCommand: ChannelFlowCallbackCommand_1.ChannelFlowCallbackCommand,
      CreateChannelCommand: CreateChannelCommand_1.CreateChannelCommand,
      CreateChannelBanCommand: CreateChannelBanCommand_1.CreateChannelBanCommand,
      CreateChannelFlowCommand: CreateChannelFlowCommand_1.CreateChannelFlowCommand,
      CreateChannelMembershipCommand: CreateChannelMembershipCommand_1.CreateChannelMembershipCommand,
      CreateChannelModeratorCommand: CreateChannelModeratorCommand_1.CreateChannelModeratorCommand,
      DeleteChannelCommand: DeleteChannelCommand_1.DeleteChannelCommand,
      DeleteChannelBanCommand: DeleteChannelBanCommand_1.DeleteChannelBanCommand,
      DeleteChannelFlowCommand: DeleteChannelFlowCommand_1.DeleteChannelFlowCommand,
      DeleteChannelMembershipCommand: DeleteChannelMembershipCommand_1.DeleteChannelMembershipCommand,
      DeleteChannelMessageCommand: DeleteChannelMessageCommand_1.DeleteChannelMessageCommand,
      DeleteChannelModeratorCommand: DeleteChannelModeratorCommand_1.DeleteChannelModeratorCommand,
      DeleteMessagingStreamingConfigurationsCommand: DeleteMessagingStreamingConfigurationsCommand_1.DeleteMessagingStreamingConfigurationsCommand,
      DescribeChannelCommand: DescribeChannelCommand_1.DescribeChannelCommand,
      DescribeChannelBanCommand: DescribeChannelBanCommand_1.DescribeChannelBanCommand,
      DescribeChannelFlowCommand: DescribeChannelFlowCommand_1.DescribeChannelFlowCommand,
      DescribeChannelMembershipCommand: DescribeChannelMembershipCommand_1.DescribeChannelMembershipCommand,
      DescribeChannelMembershipForAppInstanceUserCommand: DescribeChannelMembershipForAppInstanceUserCommand_1.DescribeChannelMembershipForAppInstanceUserCommand,
      DescribeChannelModeratedByAppInstanceUserCommand: DescribeChannelModeratedByAppInstanceUserCommand_1.DescribeChannelModeratedByAppInstanceUserCommand,
      DescribeChannelModeratorCommand: DescribeChannelModeratorCommand_1.DescribeChannelModeratorCommand,
      DisassociateChannelFlowCommand: DisassociateChannelFlowCommand_1.DisassociateChannelFlowCommand,
      GetChannelMembershipPreferencesCommand: GetChannelMembershipPreferencesCommand_1.GetChannelMembershipPreferencesCommand,
      GetChannelMessageCommand: GetChannelMessageCommand_1.GetChannelMessageCommand,
      GetChannelMessageStatusCommand: GetChannelMessageStatusCommand_1.GetChannelMessageStatusCommand,
      GetMessagingSessionEndpointCommand: GetMessagingSessionEndpointCommand_1.GetMessagingSessionEndpointCommand,
      GetMessagingStreamingConfigurationsCommand: GetMessagingStreamingConfigurationsCommand_1.GetMessagingStreamingConfigurationsCommand,
      ListChannelBansCommand: ListChannelBansCommand_1.ListChannelBansCommand,
      ListChannelFlowsCommand: ListChannelFlowsCommand_1.ListChannelFlowsCommand,
      ListChannelMembershipsCommand: ListChannelMembershipsCommand_1.ListChannelMembershipsCommand,
      ListChannelMembershipsForAppInstanceUserCommand: ListChannelMembershipsForAppInstanceUserCommand_1.ListChannelMembershipsForAppInstanceUserCommand,
      ListChannelMessagesCommand: ListChannelMessagesCommand_1.ListChannelMessagesCommand,
      ListChannelModeratorsCommand: ListChannelModeratorsCommand_1.ListChannelModeratorsCommand,
      ListChannelsCommand: ListChannelsCommand_1.ListChannelsCommand,
      ListChannelsAssociatedWithChannelFlowCommand: ListChannelsAssociatedWithChannelFlowCommand_1.ListChannelsAssociatedWithChannelFlowCommand,
      ListChannelsModeratedByAppInstanceUserCommand: ListChannelsModeratedByAppInstanceUserCommand_1.ListChannelsModeratedByAppInstanceUserCommand,
      ListSubChannelsCommand: ListSubChannelsCommand_1.ListSubChannelsCommand,
      ListTagsForResourceCommand: ListTagsForResourceCommand_1.ListTagsForResourceCommand,
      PutChannelExpirationSettingsCommand: PutChannelExpirationSettingsCommand_1.PutChannelExpirationSettingsCommand,
      PutChannelMembershipPreferencesCommand: PutChannelMembershipPreferencesCommand_1.PutChannelMembershipPreferencesCommand,
      PutMessagingStreamingConfigurationsCommand: PutMessagingStreamingConfigurationsCommand_1.PutMessagingStreamingConfigurationsCommand,
      RedactChannelMessageCommand: RedactChannelMessageCommand_1.RedactChannelMessageCommand,
      SearchChannelsCommand: SearchChannelsCommand_1.SearchChannelsCommand,
      SendChannelMessageCommand: SendChannelMessageCommand_1.SendChannelMessageCommand,
      TagResourceCommand: TagResourceCommand_1.TagResourceCommand,
      UntagResourceCommand: UntagResourceCommand_1.UntagResourceCommand,
      UpdateChannelCommand: UpdateChannelCommand_1.UpdateChannelCommand,
      UpdateChannelFlowCommand: UpdateChannelFlowCommand_1.UpdateChannelFlowCommand,
      UpdateChannelMessageCommand: UpdateChannelMessageCommand_1.UpdateChannelMessageCommand,
      UpdateChannelReadMarkerCommand: UpdateChannelReadMarkerCommand_1.UpdateChannelReadMarkerCommand
    };
    var ChimeSDKMessaging = class extends ChimeSDKMessagingClient_1.ChimeSDKMessagingClient {
    };
    exports.ChimeSDKMessaging = ChimeSDKMessaging;
    (0, smithy_client_1.createAggregatedClient)(commands, ChimeSDKMessaging);
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/index.js
var require_commands6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssociateChannelFlowCommand(), exports);
    tslib_1.__exportStar(require_BatchCreateChannelMembershipCommand2(), exports);
    tslib_1.__exportStar(require_ChannelFlowCallbackCommand(), exports);
    tslib_1.__exportStar(require_CreateChannelBanCommand2(), exports);
    tslib_1.__exportStar(require_CreateChannelCommand2(), exports);
    tslib_1.__exportStar(require_CreateChannelFlowCommand(), exports);
    tslib_1.__exportStar(require_CreateChannelMembershipCommand2(), exports);
    tslib_1.__exportStar(require_CreateChannelModeratorCommand2(), exports);
    tslib_1.__exportStar(require_DeleteChannelBanCommand2(), exports);
    tslib_1.__exportStar(require_DeleteChannelCommand2(), exports);
    tslib_1.__exportStar(require_DeleteChannelFlowCommand(), exports);
    tslib_1.__exportStar(require_DeleteChannelMembershipCommand2(), exports);
    tslib_1.__exportStar(require_DeleteChannelMessageCommand2(), exports);
    tslib_1.__exportStar(require_DeleteChannelModeratorCommand2(), exports);
    tslib_1.__exportStar(require_DeleteMessagingStreamingConfigurationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeChannelBanCommand2(), exports);
    tslib_1.__exportStar(require_DescribeChannelCommand2(), exports);
    tslib_1.__exportStar(require_DescribeChannelFlowCommand(), exports);
    tslib_1.__exportStar(require_DescribeChannelMembershipCommand2(), exports);
    tslib_1.__exportStar(require_DescribeChannelMembershipForAppInstanceUserCommand2(), exports);
    tslib_1.__exportStar(require_DescribeChannelModeratedByAppInstanceUserCommand2(), exports);
    tslib_1.__exportStar(require_DescribeChannelModeratorCommand2(), exports);
    tslib_1.__exportStar(require_DisassociateChannelFlowCommand(), exports);
    tslib_1.__exportStar(require_GetChannelMembershipPreferencesCommand(), exports);
    tslib_1.__exportStar(require_GetChannelMessageCommand2(), exports);
    tslib_1.__exportStar(require_GetChannelMessageStatusCommand(), exports);
    tslib_1.__exportStar(require_GetMessagingSessionEndpointCommand2(), exports);
    tslib_1.__exportStar(require_GetMessagingStreamingConfigurationsCommand(), exports);
    tslib_1.__exportStar(require_ListChannelBansCommand2(), exports);
    tslib_1.__exportStar(require_ListChannelFlowsCommand(), exports);
    tslib_1.__exportStar(require_ListChannelMembershipsCommand2(), exports);
    tslib_1.__exportStar(require_ListChannelMembershipsForAppInstanceUserCommand2(), exports);
    tslib_1.__exportStar(require_ListChannelMessagesCommand2(), exports);
    tslib_1.__exportStar(require_ListChannelModeratorsCommand2(), exports);
    tslib_1.__exportStar(require_ListChannelsAssociatedWithChannelFlowCommand(), exports);
    tslib_1.__exportStar(require_ListChannelsCommand2(), exports);
    tslib_1.__exportStar(require_ListChannelsModeratedByAppInstanceUserCommand2(), exports);
    tslib_1.__exportStar(require_ListSubChannelsCommand(), exports);
    tslib_1.__exportStar(require_ListTagsForResourceCommand3(), exports);
    tslib_1.__exportStar(require_PutChannelExpirationSettingsCommand(), exports);
    tslib_1.__exportStar(require_PutChannelMembershipPreferencesCommand(), exports);
    tslib_1.__exportStar(require_PutMessagingStreamingConfigurationsCommand(), exports);
    tslib_1.__exportStar(require_RedactChannelMessageCommand2(), exports);
    tslib_1.__exportStar(require_SearchChannelsCommand(), exports);
    tslib_1.__exportStar(require_SendChannelMessageCommand2(), exports);
    tslib_1.__exportStar(require_TagResourceCommand2(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand2(), exports);
    tslib_1.__exportStar(require_UpdateChannelCommand2(), exports);
    tslib_1.__exportStar(require_UpdateChannelFlowCommand(), exports);
    tslib_1.__exportStar(require_UpdateChannelMessageCommand2(), exports);
    tslib_1.__exportStar(require_UpdateChannelReadMarkerCommand2(), exports);
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/Interfaces.js
var require_Interfaces4 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelBansPaginator.js
var require_ListChannelBansPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelBansPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelBans = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelBansCommand_1 = require_ListChannelBansCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelBansCommand_1.ListChannelBansCommand(input), ...args);
    };
    async function* paginateListChannelBans(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelBans = paginateListChannelBans;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelFlowsPaginator.js
var require_ListChannelFlowsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelFlowsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelFlows = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelFlowsCommand_1 = require_ListChannelFlowsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelFlowsCommand_1.ListChannelFlowsCommand(input), ...args);
    };
    async function* paginateListChannelFlows(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelFlows = paginateListChannelFlows;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelMembershipsForAppInstanceUserPaginator.js
var require_ListChannelMembershipsForAppInstanceUserPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelMembershipsForAppInstanceUserPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelMembershipsForAppInstanceUser = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelMembershipsForAppInstanceUserCommand_1 = require_ListChannelMembershipsForAppInstanceUserCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelMembershipsForAppInstanceUserCommand_1.ListChannelMembershipsForAppInstanceUserCommand(input), ...args);
    };
    async function* paginateListChannelMembershipsForAppInstanceUser(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelMembershipsForAppInstanceUser = paginateListChannelMembershipsForAppInstanceUser;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelMembershipsPaginator.js
var require_ListChannelMembershipsPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelMembershipsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelMemberships = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelMembershipsCommand_1 = require_ListChannelMembershipsCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelMembershipsCommand_1.ListChannelMembershipsCommand(input), ...args);
    };
    async function* paginateListChannelMemberships(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelMemberships = paginateListChannelMemberships;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelMessagesPaginator.js
var require_ListChannelMessagesPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelMessagesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelMessages = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelMessagesCommand_1 = require_ListChannelMessagesCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelMessagesCommand_1.ListChannelMessagesCommand(input), ...args);
    };
    async function* paginateListChannelMessages(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelMessages = paginateListChannelMessages;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelModeratorsPaginator.js
var require_ListChannelModeratorsPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelModeratorsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelModerators = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelModeratorsCommand_1 = require_ListChannelModeratorsCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelModeratorsCommand_1.ListChannelModeratorsCommand(input), ...args);
    };
    async function* paginateListChannelModerators(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelModerators = paginateListChannelModerators;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelsAssociatedWithChannelFlowPaginator.js
var require_ListChannelsAssociatedWithChannelFlowPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelsAssociatedWithChannelFlowPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelsAssociatedWithChannelFlow = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelsAssociatedWithChannelFlowCommand_1 = require_ListChannelsAssociatedWithChannelFlowCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelsAssociatedWithChannelFlowCommand_1.ListChannelsAssociatedWithChannelFlowCommand(input), ...args);
    };
    async function* paginateListChannelsAssociatedWithChannelFlow(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelsAssociatedWithChannelFlow = paginateListChannelsAssociatedWithChannelFlow;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelsModeratedByAppInstanceUserPaginator.js
var require_ListChannelsModeratedByAppInstanceUserPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelsModeratedByAppInstanceUserPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannelsModeratedByAppInstanceUser = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelsModeratedByAppInstanceUserCommand_1 = require_ListChannelsModeratedByAppInstanceUserCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelsModeratedByAppInstanceUserCommand_1.ListChannelsModeratedByAppInstanceUserCommand(input), ...args);
    };
    async function* paginateListChannelsModeratedByAppInstanceUser(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannelsModeratedByAppInstanceUser = paginateListChannelsModeratedByAppInstanceUser;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelsPaginator.js
var require_ListChannelsPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListChannelsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChannels = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListChannelsCommand_1 = require_ListChannelsCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChannelsCommand_1.ListChannelsCommand(input), ...args);
    };
    async function* paginateListChannels(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChannels = paginateListChannels;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListSubChannelsPaginator.js
var require_ListSubChannelsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/ListSubChannelsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListSubChannels = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var ListSubChannelsCommand_1 = require_ListSubChannelsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListSubChannelsCommand_1.ListSubChannelsCommand(input), ...args);
    };
    async function* paginateListSubChannels(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListSubChannels = paginateListSubChannels;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/SearchChannelsPaginator.js
var require_SearchChannelsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/SearchChannelsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateSearchChannels = void 0;
    var ChimeSDKMessagingClient_1 = require_ChimeSDKMessagingClient();
    var SearchChannelsCommand_1 = require_SearchChannelsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new SearchChannelsCommand_1.SearchChannelsCommand(input), ...args);
    };
    async function* paginateSearchChannels(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKMessagingClient_1.ChimeSDKMessagingClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKMessaging | ChimeSDKMessagingClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateSearchChannels = paginateSearchChannels;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/index.js
var require_pagination6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces4(), exports);
    tslib_1.__exportStar(require_ListChannelBansPaginator2(), exports);
    tslib_1.__exportStar(require_ListChannelFlowsPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelMembershipsForAppInstanceUserPaginator2(), exports);
    tslib_1.__exportStar(require_ListChannelMembershipsPaginator2(), exports);
    tslib_1.__exportStar(require_ListChannelMessagesPaginator2(), exports);
    tslib_1.__exportStar(require_ListChannelModeratorsPaginator2(), exports);
    tslib_1.__exportStar(require_ListChannelsAssociatedWithChannelFlowPaginator(), exports);
    tslib_1.__exportStar(require_ListChannelsModeratedByAppInstanceUserPaginator2(), exports);
    tslib_1.__exportStar(require_ListChannelsPaginator2(), exports);
    tslib_1.__exportStar(require_ListSubChannelsPaginator(), exports);
    tslib_1.__exportStar(require_SearchChannelsPaginator(), exports);
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/models/index.js
var require_models6 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_06(), exports);
  }
});

// node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/index.js
var require_dist_cjs57 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-messaging/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeSDKMessagingServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_ChimeSDKMessagingClient(), exports);
    tslib_1.__exportStar(require_ChimeSDKMessaging(), exports);
    tslib_1.__exportStar(require_commands6(), exports);
    tslib_1.__exportStar(require_pagination6(), exports);
    tslib_1.__exportStar(require_models6(), exports);
    var ChimeSDKMessagingServiceException_1 = require_ChimeSDKMessagingServiceException();
    Object.defineProperty(exports, "ChimeSDKMessagingServiceException", { enumerable: true, get: function() {
      return ChimeSDKMessagingServiceException_1.ChimeSDKMessagingServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "chime"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/package.json
var require_package7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-chime-sdk-identity",
      description: "AWS SDK for JavaScript Chime Sdk Identity Client for Node.js, Browser and React Native",
      version: "3.370.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo chime-sdk-identity"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.370.0",
        "@aws-sdk/credential-provider-node": "3.370.0",
        "@aws-sdk/middleware-host-header": "3.370.0",
        "@aws-sdk/middleware-logger": "3.370.0",
        "@aws-sdk/middleware-recursion-detection": "3.370.0",
        "@aws-sdk/middleware-signing": "3.370.0",
        "@aws-sdk/middleware-user-agent": "3.370.0",
        "@aws-sdk/types": "3.370.0",
        "@aws-sdk/util-endpoints": "3.370.0",
        "@aws-sdk/util-user-agent-browser": "3.370.0",
        "@aws-sdk/util-user-agent-node": "3.370.0",
        "@smithy/config-resolver": "^1.0.1",
        "@smithy/fetch-http-handler": "^1.0.1",
        "@smithy/hash-node": "^1.0.1",
        "@smithy/invalid-dependency": "^1.0.1",
        "@smithy/middleware-content-length": "^1.0.1",
        "@smithy/middleware-endpoint": "^1.0.2",
        "@smithy/middleware-retry": "^1.0.3",
        "@smithy/middleware-serde": "^1.0.1",
        "@smithy/middleware-stack": "^1.0.1",
        "@smithy/node-config-provider": "^1.0.1",
        "@smithy/node-http-handler": "^1.0.2",
        "@smithy/protocol-http": "^1.1.0",
        "@smithy/smithy-client": "^1.0.3",
        "@smithy/types": "^1.1.0",
        "@smithy/url-parser": "^1.0.1",
        "@smithy/util-base64": "^1.0.1",
        "@smithy/util-body-length-browser": "^1.0.1",
        "@smithy/util-body-length-node": "^1.0.1",
        "@smithy/util-defaults-mode-browser": "^1.0.1",
        "@smithy/util-defaults-mode-node": "^1.0.1",
        "@smithy/util-retry": "^1.0.3",
        "@smithy/util-utf8": "^1.0.1",
        tslib: "^2.5.0",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@smithy/service-client-documentation-generator": "^1.0.1",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.23.23",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-chime-sdk-identity",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-chime-sdk-identity"
      }
    };
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/endpoint/ruleset.js
var require_ruleset7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var q = "required";
    var r = "fn";
    var s = "argv";
    var t = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = { [q]: false, "type": "String" };
    var g = { [q]: true, "default": false, "type": "Boolean" };
    var h = { [t]: "Endpoint" };
    var i = { [r]: "booleanEquals", [s]: [{ [t]: "UseFIPS" }, true] };
    var j = { [r]: "booleanEquals", [s]: [{ [t]: "UseDualStack" }, true] };
    var k = {};
    var l = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsFIPS"] }] };
    var m = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsDualStack"] }] };
    var n = [i];
    var o = [j];
    var p = [{ [t]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: f, UseDualStack: g, UseFIPS: g, Endpoint: f }, rules: [{ conditions: [{ [r]: a, [s]: [h] }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: h, properties: k, headers: k }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [r]: a, [s]: p }], type: b, rules: [{ conditions: [{ [r]: "aws.partition", [s]: p, assign: e }], type: b, rules: [{ conditions: [i, j], type: b, rules: [{ conditions: [l, m], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://identity-chime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [l], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://identity-chime-fips.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://identity-chime.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { type: b, rules: [{ endpoint: { url: "https://identity-chime.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] }] };
    exports.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs18();
    var ruleset_1 = require_ruleset7();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var url_parser_1 = require_dist_cjs24();
    var util_base64_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs13();
    var endpointResolver_1 = require_endpointResolver7();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2021-04-20",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "Chime SDK Identity",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/runtimeConfig.js
var require_runtimeConfig7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package7());
    var client_sts_1 = require_dist_cjs53();
    var credential_provider_node_1 = require_dist_cjs52();
    var util_user_agent_node_1 = require_dist_cjs42();
    var config_resolver_1 = require_dist_cjs21();
    var hash_node_1 = require_dist_cjs43();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs44();
    var util_retry_1 = require_dist_cjs28();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared7();
    var smithy_client_1 = require_dist_cjs35();
    var util_defaults_mode_node_1 = require_dist_cjs45();
    var smithy_client_2 = require_dist_cjs35();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/ChimeSDKIdentityClient.js
var require_ChimeSDKIdentityClient = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/ChimeSDKIdentityClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeSDKIdentityClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs16();
    var middleware_user_agent_1 = require_dist_cjs19();
    var config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var EndpointParameters_1 = require_EndpointParameters7();
    var runtimeConfig_1 = require_runtimeConfig7();
    var ChimeSDKIdentityClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.ChimeSDKIdentityClient = ChimeSDKIdentityClient2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/models/ChimeSDKIdentityServiceException.js
var require_ChimeSDKIdentityServiceException = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/models/ChimeSDKIdentityServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeSDKIdentityServiceException = exports.__ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
      return smithy_client_1.ServiceException;
    } });
    var ChimeSDKIdentityServiceException = class _ChimeSDKIdentityServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _ChimeSDKIdentityServiceException.prototype);
      }
    };
    exports.ChimeSDKIdentityServiceException = ChimeSDKIdentityServiceException;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/models/models_0.js
var require_models_07 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstanceUsersResponseFilterSensitiveLog = exports.ListAppInstanceUsersRequestFilterSensitiveLog = exports.ListAppInstanceUserEndpointsResponseFilterSensitiveLog = exports.ListAppInstanceUserEndpointsRequestFilterSensitiveLog = exports.ListAppInstancesResponseFilterSensitiveLog = exports.ListAppInstancesRequestFilterSensitiveLog = exports.ListAppInstanceBotsResponseFilterSensitiveLog = exports.ListAppInstanceBotsRequestFilterSensitiveLog = exports.ListAppInstanceAdminsResponseFilterSensitiveLog = exports.ListAppInstanceAdminsRequestFilterSensitiveLog = exports.DescribeAppInstanceUserEndpointResponseFilterSensitiveLog = exports.DescribeAppInstanceUserResponseFilterSensitiveLog = exports.DescribeAppInstanceBotResponseFilterSensitiveLog = exports.DescribeAppInstanceAdminResponseFilterSensitiveLog = exports.DescribeAppInstanceResponseFilterSensitiveLog = exports.CreateAppInstanceUserRequestFilterSensitiveLog = exports.CreateAppInstanceBotRequestFilterSensitiveLog = exports.CreateAppInstanceAdminResponseFilterSensitiveLog = exports.CreateAppInstanceRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.AppInstanceUserSummaryFilterSensitiveLog = exports.AppInstanceUserEndpointSummaryFilterSensitiveLog = exports.AppInstanceUserEndpointFilterSensitiveLog = exports.EndpointAttributesFilterSensitiveLog = exports.AppInstanceUserFilterSensitiveLog = exports.AppInstanceSummaryFilterSensitiveLog = exports.AppInstanceBotSummaryFilterSensitiveLog = exports.AppInstanceBotFilterSensitiveLog = exports.AppInstanceAdminSummaryFilterSensitiveLog = exports.AppInstanceAdminFilterSensitiveLog = exports.IdentityFilterSensitiveLog = exports.AppInstanceFilterSensitiveLog = exports.NotFoundException = exports.UnauthorizedClientException = exports.ThrottledClientException = exports.ServiceUnavailableException = exports.ServiceFailureException = exports.ResourceLimitExceededException = exports.ForbiddenException = exports.ConflictException = exports.BadRequestException = exports.ErrorCode = exports.AppInstanceUserEndpointType = exports.EndpointStatusReason = exports.EndpointStatus = exports.ExpirationCriterion = exports.RespondsTo = exports.TargetedMessages = exports.StandardMessages = exports.AllowMessages = void 0;
    exports.UpdateAppInstanceUserEndpointRequestFilterSensitiveLog = exports.UpdateAppInstanceUserRequestFilterSensitiveLog = exports.UpdateAppInstanceBotRequestFilterSensitiveLog = exports.UpdateAppInstanceRequestFilterSensitiveLog = exports.UntagResourceRequestFilterSensitiveLog = exports.TagResourceRequestFilterSensitiveLog = exports.RegisterAppInstanceUserEndpointRequestFilterSensitiveLog = exports.ListTagsForResourceResponseFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var ChimeSDKIdentityServiceException_1 = require_ChimeSDKIdentityServiceException();
    exports.AllowMessages = {
      ALL: "ALL",
      NONE: "NONE"
    };
    exports.StandardMessages = {
      ALL: "ALL",
      AUTO: "AUTO",
      MENTIONS: "MENTIONS",
      NONE: "NONE"
    };
    exports.TargetedMessages = {
      ALL: "ALL",
      NONE: "NONE"
    };
    exports.RespondsTo = {
      STANDARD_MESSAGES: "STANDARD_MESSAGES"
    };
    exports.ExpirationCriterion = {
      CREATED_TIMESTAMP: "CREATED_TIMESTAMP"
    };
    exports.EndpointStatus = {
      ACTIVE: "ACTIVE",
      INACTIVE: "INACTIVE"
    };
    exports.EndpointStatusReason = {
      INVALID_DEVICE_TOKEN: "INVALID_DEVICE_TOKEN",
      INVALID_PINPOINT_ARN: "INVALID_PINPOINT_ARN"
    };
    exports.AppInstanceUserEndpointType = {
      APNS: "APNS",
      APNS_SANDBOX: "APNS_SANDBOX",
      GCM: "GCM"
    };
    exports.ErrorCode = {
      AccessDenied: "AccessDenied",
      BadRequest: "BadRequest",
      Conflict: "Conflict",
      Forbidden: "Forbidden",
      NotFound: "NotFound",
      PhoneNumberAssociationsExist: "PhoneNumberAssociationsExist",
      PreconditionFailed: "PreconditionFailed",
      ResourceLimitExceeded: "ResourceLimitExceeded",
      ServiceFailure: "ServiceFailure",
      ServiceUnavailable: "ServiceUnavailable",
      Throttled: "Throttled",
      Throttling: "Throttling",
      Unauthorized: "Unauthorized",
      Unprocessable: "Unprocessable",
      VoiceConnectorGroupAssociationsExist: "VoiceConnectorGroupAssociationsExist"
    };
    var BadRequestException = class _BadRequestException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "BadRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BadRequestException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.BadRequestException = BadRequestException;
    var ConflictException = class _ConflictException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "ConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConflictException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ConflictException = ConflictException;
    var ForbiddenException = class _ForbiddenException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "ForbiddenException",
          $fault: "client",
          ...opts
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ForbiddenException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ForbiddenException = ForbiddenException;
    var ResourceLimitExceededException = class _ResourceLimitExceededException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "ResourceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceLimitExceededException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ResourceLimitExceededException = ResourceLimitExceededException;
    var ServiceFailureException = class _ServiceFailureException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "ServiceFailureException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceFailureException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ServiceFailureException = ServiceFailureException;
    var ServiceUnavailableException = class _ServiceUnavailableException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "ServiceUnavailableException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ServiceUnavailableException = ServiceUnavailableException;
    var ThrottledClientException = class _ThrottledClientException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "ThrottledClientException",
          $fault: "client",
          ...opts
        });
        this.name = "ThrottledClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ThrottledClientException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.ThrottledClientException = ThrottledClientException;
    var UnauthorizedClientException = class _UnauthorizedClientException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var NotFoundException = class _NotFoundException extends ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException {
      constructor(opts) {
        super({
          name: "NotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotFoundException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
      }
    };
    exports.NotFoundException = NotFoundException;
    var AppInstanceFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceFilterSensitiveLog = AppInstanceFilterSensitiveLog;
    var IdentityFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.IdentityFilterSensitiveLog = IdentityFilterSensitiveLog;
    var AppInstanceAdminFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Admin && { Admin: (0, exports.IdentityFilterSensitiveLog)(obj.Admin) }
    });
    exports.AppInstanceAdminFilterSensitiveLog = AppInstanceAdminFilterSensitiveLog;
    var AppInstanceAdminSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Admin && { Admin: (0, exports.IdentityFilterSensitiveLog)(obj.Admin) }
    });
    exports.AppInstanceAdminSummaryFilterSensitiveLog = AppInstanceAdminSummaryFilterSensitiveLog;
    var AppInstanceBotFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceBotFilterSensitiveLog = AppInstanceBotFilterSensitiveLog;
    var AppInstanceBotSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceBotSummaryFilterSensitiveLog = AppInstanceBotSummaryFilterSensitiveLog;
    var AppInstanceSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceSummaryFilterSensitiveLog = AppInstanceSummaryFilterSensitiveLog;
    var AppInstanceUserFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceUserFilterSensitiveLog = AppInstanceUserFilterSensitiveLog;
    var EndpointAttributesFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.DeviceToken && { DeviceToken: smithy_client_1.SENSITIVE_STRING },
      ...obj.VoipDeviceToken && { VoipDeviceToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.EndpointAttributesFilterSensitiveLog = EndpointAttributesFilterSensitiveLog;
    var AppInstanceUserEndpointFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.EndpointAttributes && { EndpointAttributes: (0, exports.EndpointAttributesFilterSensitiveLog)(obj.EndpointAttributes) }
    });
    exports.AppInstanceUserEndpointFilterSensitiveLog = AppInstanceUserEndpointFilterSensitiveLog;
    var AppInstanceUserEndpointSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceUserEndpointSummaryFilterSensitiveLog = AppInstanceUserEndpointSummaryFilterSensitiveLog;
    var AppInstanceUserSummaryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AppInstanceUserSummaryFilterSensitiveLog = AppInstanceUserSummaryFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && { Key: smithy_client_1.SENSITIVE_STRING },
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var CreateAppInstanceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.CreateAppInstanceRequestFilterSensitiveLog = CreateAppInstanceRequestFilterSensitiveLog;
    var CreateAppInstanceAdminResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceAdmin && { AppInstanceAdmin: (0, exports.IdentityFilterSensitiveLog)(obj.AppInstanceAdmin) }
    });
    exports.CreateAppInstanceAdminResponseFilterSensitiveLog = CreateAppInstanceAdminResponseFilterSensitiveLog;
    var CreateAppInstanceBotRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.CreateAppInstanceBotRequestFilterSensitiveLog = CreateAppInstanceBotRequestFilterSensitiveLog;
    var CreateAppInstanceUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUserId && { AppInstanceUserId: smithy_client_1.SENSITIVE_STRING },
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING },
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.CreateAppInstanceUserRequestFilterSensitiveLog = CreateAppInstanceUserRequestFilterSensitiveLog;
    var DescribeAppInstanceResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstance && { AppInstance: (0, exports.AppInstanceFilterSensitiveLog)(obj.AppInstance) }
    });
    exports.DescribeAppInstanceResponseFilterSensitiveLog = DescribeAppInstanceResponseFilterSensitiveLog;
    var DescribeAppInstanceAdminResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceAdmin && { AppInstanceAdmin: (0, exports.AppInstanceAdminFilterSensitiveLog)(obj.AppInstanceAdmin) }
    });
    exports.DescribeAppInstanceAdminResponseFilterSensitiveLog = DescribeAppInstanceAdminResponseFilterSensitiveLog;
    var DescribeAppInstanceBotResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceBot && { AppInstanceBot: (0, exports.AppInstanceBotFilterSensitiveLog)(obj.AppInstanceBot) }
    });
    exports.DescribeAppInstanceBotResponseFilterSensitiveLog = DescribeAppInstanceBotResponseFilterSensitiveLog;
    var DescribeAppInstanceUserResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUser && { AppInstanceUser: (0, exports.AppInstanceUserFilterSensitiveLog)(obj.AppInstanceUser) }
    });
    exports.DescribeAppInstanceUserResponseFilterSensitiveLog = DescribeAppInstanceUserResponseFilterSensitiveLog;
    var DescribeAppInstanceUserEndpointResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUserEndpoint && {
        AppInstanceUserEndpoint: (0, exports.AppInstanceUserEndpointFilterSensitiveLog)(obj.AppInstanceUserEndpoint)
      }
    });
    exports.DescribeAppInstanceUserEndpointResponseFilterSensitiveLog = DescribeAppInstanceUserEndpointResponseFilterSensitiveLog;
    var ListAppInstanceAdminsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceAdminsRequestFilterSensitiveLog = ListAppInstanceAdminsRequestFilterSensitiveLog;
    var ListAppInstanceAdminsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceAdmins && {
        AppInstanceAdmins: obj.AppInstanceAdmins.map((item) => (0, exports.AppInstanceAdminSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceAdminsResponseFilterSensitiveLog = ListAppInstanceAdminsResponseFilterSensitiveLog;
    var ListAppInstanceBotsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceBotsRequestFilterSensitiveLog = ListAppInstanceBotsRequestFilterSensitiveLog;
    var ListAppInstanceBotsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceBots && {
        AppInstanceBots: obj.AppInstanceBots.map((item) => (0, exports.AppInstanceBotSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceBotsResponseFilterSensitiveLog = ListAppInstanceBotsResponseFilterSensitiveLog;
    var ListAppInstancesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstancesRequestFilterSensitiveLog = ListAppInstancesRequestFilterSensitiveLog;
    var ListAppInstancesResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstances && { AppInstances: obj.AppInstances.map((item) => (0, exports.AppInstanceSummaryFilterSensitiveLog)(item)) },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstancesResponseFilterSensitiveLog = ListAppInstancesResponseFilterSensitiveLog;
    var ListAppInstanceUserEndpointsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUserArn && { AppInstanceUserArn: smithy_client_1.SENSITIVE_STRING },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceUserEndpointsRequestFilterSensitiveLog = ListAppInstanceUserEndpointsRequestFilterSensitiveLog;
    var ListAppInstanceUserEndpointsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUserEndpoints && {
        AppInstanceUserEndpoints: obj.AppInstanceUserEndpoints.map((item) => (0, exports.AppInstanceUserEndpointSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceUserEndpointsResponseFilterSensitiveLog = ListAppInstanceUserEndpointsResponseFilterSensitiveLog;
    var ListAppInstanceUsersRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceUsersRequestFilterSensitiveLog = ListAppInstanceUsersRequestFilterSensitiveLog;
    var ListAppInstanceUsersResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUsers && {
        AppInstanceUsers: obj.AppInstanceUsers.map((item) => (0, exports.AppInstanceUserSummaryFilterSensitiveLog)(item))
      },
      ...obj.NextToken && { NextToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAppInstanceUsersResponseFilterSensitiveLog = ListAppInstanceUsersResponseFilterSensitiveLog;
    var ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.ListTagsForResourceResponseFilterSensitiveLog = ListTagsForResourceResponseFilterSensitiveLog;
    var RegisterAppInstanceUserEndpointRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AppInstanceUserArn && { AppInstanceUserArn: smithy_client_1.SENSITIVE_STRING },
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.EndpointAttributes && { EndpointAttributes: (0, exports.EndpointAttributesFilterSensitiveLog)(obj.EndpointAttributes) }
    });
    exports.RegisterAppInstanceUserEndpointRequestFilterSensitiveLog = RegisterAppInstanceUserEndpointRequestFilterSensitiveLog;
    var TagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tags && { Tags: obj.Tags.map((item) => (0, exports.TagFilterSensitiveLog)(item)) }
    });
    exports.TagResourceRequestFilterSensitiveLog = TagResourceRequestFilterSensitiveLog;
    var UntagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TagKeys && { TagKeys: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UntagResourceRequestFilterSensitiveLog = UntagResourceRequestFilterSensitiveLog;
    var UpdateAppInstanceRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateAppInstanceRequestFilterSensitiveLog = UpdateAppInstanceRequestFilterSensitiveLog;
    var UpdateAppInstanceBotRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateAppInstanceBotRequestFilterSensitiveLog = UpdateAppInstanceBotRequestFilterSensitiveLog;
    var UpdateAppInstanceUserRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING },
      ...obj.Metadata && { Metadata: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateAppInstanceUserRequestFilterSensitiveLog = UpdateAppInstanceUserRequestFilterSensitiveLog;
    var UpdateAppInstanceUserEndpointRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Name && { Name: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateAppInstanceUserEndpointRequestFilterSensitiveLog = UpdateAppInstanceUserEndpointRequestFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson15 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.de_ListAppInstanceUsersCommand = exports.de_ListAppInstanceUserEndpointsCommand = exports.de_ListAppInstancesCommand = exports.de_ListAppInstanceBotsCommand = exports.de_ListAppInstanceAdminsCommand = exports.de_GetAppInstanceRetentionSettingsCommand = exports.de_DescribeAppInstanceUserEndpointCommand = exports.de_DescribeAppInstanceUserCommand = exports.de_DescribeAppInstanceBotCommand = exports.de_DescribeAppInstanceAdminCommand = exports.de_DescribeAppInstanceCommand = exports.de_DeregisterAppInstanceUserEndpointCommand = exports.de_DeleteAppInstanceUserCommand = exports.de_DeleteAppInstanceBotCommand = exports.de_DeleteAppInstanceAdminCommand = exports.de_DeleteAppInstanceCommand = exports.de_CreateAppInstanceUserCommand = exports.de_CreateAppInstanceBotCommand = exports.de_CreateAppInstanceAdminCommand = exports.de_CreateAppInstanceCommand = exports.se_UpdateAppInstanceUserEndpointCommand = exports.se_UpdateAppInstanceUserCommand = exports.se_UpdateAppInstanceBotCommand = exports.se_UpdateAppInstanceCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_RegisterAppInstanceUserEndpointCommand = exports.se_PutAppInstanceUserExpirationSettingsCommand = exports.se_PutAppInstanceRetentionSettingsCommand = exports.se_ListTagsForResourceCommand = exports.se_ListAppInstanceUsersCommand = exports.se_ListAppInstanceUserEndpointsCommand = exports.se_ListAppInstancesCommand = exports.se_ListAppInstanceBotsCommand = exports.se_ListAppInstanceAdminsCommand = exports.se_GetAppInstanceRetentionSettingsCommand = exports.se_DescribeAppInstanceUserEndpointCommand = exports.se_DescribeAppInstanceUserCommand = exports.se_DescribeAppInstanceBotCommand = exports.se_DescribeAppInstanceAdminCommand = exports.se_DescribeAppInstanceCommand = exports.se_DeregisterAppInstanceUserEndpointCommand = exports.se_DeleteAppInstanceUserCommand = exports.se_DeleteAppInstanceBotCommand = exports.se_DeleteAppInstanceAdminCommand = exports.se_DeleteAppInstanceCommand = exports.se_CreateAppInstanceUserCommand = exports.se_CreateAppInstanceBotCommand = exports.se_CreateAppInstanceAdminCommand = exports.se_CreateAppInstanceCommand = void 0;
    exports.de_UpdateAppInstanceUserEndpointCommand = exports.de_UpdateAppInstanceUserCommand = exports.de_UpdateAppInstanceBotCommand = exports.de_UpdateAppInstanceCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_RegisterAppInstanceUserEndpointCommand = exports.de_PutAppInstanceUserExpirationSettingsCommand = exports.de_PutAppInstanceRetentionSettingsCommand = exports.de_ListTagsForResourceCommand = void 0;
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs35();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var ChimeSDKIdentityServiceException_1 = require_ChimeSDKIdentityServiceException();
    var models_0_1 = require_models_07();
    var se_CreateAppInstanceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Metadata: [],
        Name: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAppInstanceCommand = se_CreateAppInstanceCommand;
    var se_CreateAppInstanceAdminCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/admins`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceAdminArn: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAppInstanceAdminCommand = se_CreateAppInstanceAdminCommand;
    var se_CreateAppInstanceBotCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-bots`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceArn: [],
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Configuration: (_) => (0, smithy_client_1._json)(_),
        Metadata: [],
        Name: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAppInstanceBotCommand = se_CreateAppInstanceBotCommand;
    var se_CreateAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users`;
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceArn: [],
        AppInstanceUserId: [],
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        ExpirationSettings: (_) => (0, smithy_client_1._json)(_),
        Metadata: [],
        Name: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_CreateAppInstanceUserCommand = se_CreateAppInstanceUserCommand;
    var se_DeleteAppInstanceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAppInstanceCommand = se_DeleteAppInstanceCommand;
    var se_DeleteAppInstanceAdminCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/admins/{AppInstanceAdminArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceAdminArn", () => input.AppInstanceAdminArn, "{AppInstanceAdminArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAppInstanceAdminCommand = se_DeleteAppInstanceAdminCommand;
    var se_DeleteAppInstanceBotCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-bots/{AppInstanceBotArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceBotArn", () => input.AppInstanceBotArn, "{AppInstanceBotArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAppInstanceBotCommand = se_DeleteAppInstanceBotCommand;
    var se_DeleteAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeleteAppInstanceUserCommand = se_DeleteAppInstanceUserCommand;
    var se_DeregisterAppInstanceUserEndpointCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}/endpoints/{EndpointId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EndpointId", () => input.EndpointId, "{EndpointId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DeregisterAppInstanceUserEndpointCommand = se_DeregisterAppInstanceUserEndpointCommand;
    var se_DescribeAppInstanceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeAppInstanceCommand = se_DescribeAppInstanceCommand;
    var se_DescribeAppInstanceAdminCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/admins/{AppInstanceAdminArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceAdminArn", () => input.AppInstanceAdminArn, "{AppInstanceAdminArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeAppInstanceAdminCommand = se_DescribeAppInstanceAdminCommand;
    var se_DescribeAppInstanceBotCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-bots/{AppInstanceBotArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceBotArn", () => input.AppInstanceBotArn, "{AppInstanceBotArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeAppInstanceBotCommand = se_DescribeAppInstanceBotCommand;
    var se_DescribeAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeAppInstanceUserCommand = se_DescribeAppInstanceUserCommand;
    var se_DescribeAppInstanceUserEndpointCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}/endpoints/{EndpointId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EndpointId", () => input.EndpointId, "{EndpointId}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_DescribeAppInstanceUserEndpointCommand = se_DescribeAppInstanceUserEndpointCommand;
    var se_GetAppInstanceRetentionSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/retention-settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_GetAppInstanceRetentionSettingsCommand = se_GetAppInstanceRetentionSettingsCommand;
    var se_ListAppInstanceAdminsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/admins`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAppInstanceAdminsCommand = se_ListAppInstanceAdminsCommand;
    var se_ListAppInstanceBotsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-bots`;
      const query = (0, smithy_client_1.map)({
        "app-instance-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceArn, `AppInstanceArn`)],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAppInstanceBotsCommand = se_ListAppInstanceBotsCommand;
    var se_ListAppInstancesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances`;
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAppInstancesCommand = se_ListAppInstancesCommand;
    var se_ListAppInstanceUserEndpointsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}/endpoints`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      const query = (0, smithy_client_1.map)({
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAppInstanceUserEndpointsCommand = se_ListAppInstanceUserEndpointsCommand;
    var se_ListAppInstanceUsersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users`;
      const query = (0, smithy_client_1.map)({
        "app-instance-arn": [, (0, smithy_client_1.expectNonNull)(input.AppInstanceArn, `AppInstanceArn`)],
        "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
        "next-token": [, input.NextToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListAppInstanceUsersCommand = se_ListAppInstanceUsersCommand;
    var se_ListTagsForResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        arn: [, (0, smithy_client_1.expectNonNull)(input.ResourceARN, `ResourceARN`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
    var se_PutAppInstanceRetentionSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}/retention-settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AppInstanceRetentionSettings: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutAppInstanceRetentionSettingsCommand = se_PutAppInstanceRetentionSettingsCommand;
    var se_PutAppInstanceUserExpirationSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}/expiration-settings`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ExpirationSettings: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_PutAppInstanceUserExpirationSettingsCommand = se_PutAppInstanceUserExpirationSettingsCommand;
    var se_RegisterAppInstanceUserEndpointCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}/endpoints`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AllowMessages: [],
        ClientRequestToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        EndpointAttributes: (_) => (0, smithy_client_1._json)(_),
        Name: [],
        ResourceArn: [],
        Type: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_RegisterAppInstanceUserEndpointCommand = se_RegisterAppInstanceUserEndpointCommand;
    var se_TagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        operation: [, "tag-resource"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ResourceARN: [],
        Tags: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_TagResourceCommand = se_TagResourceCommand;
    var se_UntagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/tags`;
      const query = (0, smithy_client_1.map)({
        operation: [, "untag-resource"]
      });
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        ResourceARN: [],
        TagKeys: (_) => (0, smithy_client_1._json)(_)
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.se_UntagResourceCommand = se_UntagResourceCommand;
    var se_UpdateAppInstanceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instances/{AppInstanceArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceArn", () => input.AppInstanceArn, "{AppInstanceArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Metadata: [],
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateAppInstanceCommand = se_UpdateAppInstanceCommand;
    var se_UpdateAppInstanceBotCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-bots/{AppInstanceBotArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceBotArn", () => input.AppInstanceBotArn, "{AppInstanceBotArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Configuration: (_) => (0, smithy_client_1._json)(_),
        Metadata: [],
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateAppInstanceBotCommand = se_UpdateAppInstanceBotCommand;
    var se_UpdateAppInstanceUserCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        Metadata: [],
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateAppInstanceUserCommand = se_UpdateAppInstanceUserCommand;
    var se_UpdateAppInstanceUserEndpointCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/app-instance-users/{AppInstanceUserArn}/endpoints/{EndpointId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "AppInstanceUserArn", () => input.AppInstanceUserArn, "{AppInstanceUserArn}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "EndpointId", () => input.EndpointId, "{EndpointId}", false);
      let body;
      body = JSON.stringify((0, smithy_client_1.take)(input, {
        AllowMessages: [],
        Name: []
      }));
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.se_UpdateAppInstanceUserEndpointCommand = se_UpdateAppInstanceUserEndpointCommand;
    var de_CreateAppInstanceCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAppInstanceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAppInstanceCommand = de_CreateAppInstanceCommand;
    var de_CreateAppInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAppInstanceAdminCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAppInstanceAdminCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceAdmin: smithy_client_1._json,
        AppInstanceArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAppInstanceAdminCommand = de_CreateAppInstanceAdminCommand;
    var de_CreateAppInstanceAdminCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAppInstanceBotCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAppInstanceBotCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceBotArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAppInstanceBotCommand = de_CreateAppInstanceBotCommand;
    var de_CreateAppInstanceBotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_CreateAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CreateAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateAppInstanceUserCommand = de_CreateAppInstanceUserCommand;
    var de_CreateAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAppInstanceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAppInstanceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAppInstanceCommand = de_DeleteAppInstanceCommand;
    var de_DeleteAppInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAppInstanceAdminCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAppInstanceAdminCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAppInstanceAdminCommand = de_DeleteAppInstanceAdminCommand;
    var de_DeleteAppInstanceAdminCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAppInstanceBotCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAppInstanceBotCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAppInstanceBotCommand = de_DeleteAppInstanceBotCommand;
    var de_DeleteAppInstanceBotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeleteAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeleteAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeleteAppInstanceUserCommand = de_DeleteAppInstanceUserCommand;
    var de_DeleteAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DeregisterAppInstanceUserEndpointCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_DeregisterAppInstanceUserEndpointCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_DeregisterAppInstanceUserEndpointCommand = de_DeregisterAppInstanceUserEndpointCommand;
    var de_DeregisterAppInstanceUserEndpointCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAppInstanceCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeAppInstanceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstance: (_) => de_AppInstance(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeAppInstanceCommand = de_DescribeAppInstanceCommand;
    var de_DescribeAppInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAppInstanceAdminCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeAppInstanceAdminCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceAdmin: (_) => de_AppInstanceAdmin(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeAppInstanceAdminCommand = de_DescribeAppInstanceAdminCommand;
    var de_DescribeAppInstanceAdminCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAppInstanceBotCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeAppInstanceBotCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceBot: (_) => de_AppInstanceBot(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeAppInstanceBotCommand = de_DescribeAppInstanceBotCommand;
    var de_DescribeAppInstanceBotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.chimesdkidentity#NotFoundException":
          throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUser: (_) => de_AppInstanceUser(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeAppInstanceUserCommand = de_DescribeAppInstanceUserCommand;
    var de_DescribeAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_DescribeAppInstanceUserEndpointCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeAppInstanceUserEndpointCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserEndpoint: (_) => de_AppInstanceUserEndpoint(_, context)
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_DescribeAppInstanceUserEndpointCommand = de_DescribeAppInstanceUserEndpointCommand;
    var de_DescribeAppInstanceUserEndpointCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_GetAppInstanceRetentionSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAppInstanceRetentionSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceRetentionSettings: smithy_client_1._json,
        InitiateDeletionTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetAppInstanceRetentionSettingsCommand = de_GetAppInstanceRetentionSettingsCommand;
    var de_GetAppInstanceRetentionSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAppInstanceAdminsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAppInstanceAdminsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceAdmins: smithy_client_1._json,
        AppInstanceArn: smithy_client_1.expectString,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAppInstanceAdminsCommand = de_ListAppInstanceAdminsCommand;
    var de_ListAppInstanceAdminsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAppInstanceBotsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAppInstanceBotsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceArn: smithy_client_1.expectString,
        AppInstanceBots: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAppInstanceBotsCommand = de_ListAppInstanceBotsCommand;
    var de_ListAppInstanceBotsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAppInstancesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAppInstancesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstances: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAppInstancesCommand = de_ListAppInstancesCommand;
    var de_ListAppInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAppInstanceUserEndpointsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAppInstanceUserEndpointsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserEndpoints: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAppInstanceUserEndpointsCommand = de_ListAppInstanceUserEndpointsCommand;
    var de_ListAppInstanceUserEndpointsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListAppInstanceUsersCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAppInstanceUsersCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceArn: smithy_client_1.expectString,
        AppInstanceUsers: smithy_client_1._json,
        NextToken: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAppInstanceUsersCommand = de_ListAppInstanceUsersCommand;
    var de_ListAppInstanceUsersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        Tags: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
    var de_ListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutAppInstanceRetentionSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutAppInstanceRetentionSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceRetentionSettings: smithy_client_1._json,
        InitiateDeletionTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutAppInstanceRetentionSettingsCommand = de_PutAppInstanceRetentionSettingsCommand;
    var de_PutAppInstanceRetentionSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_PutAppInstanceUserExpirationSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutAppInstanceUserExpirationSettingsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserArn: smithy_client_1.expectString,
        ExpirationSettings: smithy_client_1._json
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_PutAppInstanceUserExpirationSettingsCommand = de_PutAppInstanceUserExpirationSettingsCommand;
    var de_PutAppInstanceUserExpirationSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_RegisterAppInstanceUserEndpointCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_RegisterAppInstanceUserEndpointCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserArn: smithy_client_1.expectString,
        EndpointId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_RegisterAppInstanceUserEndpointCommand = de_RegisterAppInstanceUserEndpointCommand;
    var de_RegisterAppInstanceUserEndpointCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_TagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_TagResourceCommand = de_TagResourceCommand;
    var de_TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UntagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, smithy_client_1.collectBody)(output.body, context);
      return contents;
    };
    exports.de_UntagResourceCommand = de_UntagResourceCommand;
    var de_UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAppInstanceCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateAppInstanceCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateAppInstanceCommand = de_UpdateAppInstanceCommand;
    var de_UpdateAppInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAppInstanceBotCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateAppInstanceBotCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceBotArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateAppInstanceBotCommand = de_UpdateAppInstanceBotCommand;
    var de_UpdateAppInstanceBotCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAppInstanceUserCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateAppInstanceUserCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserArn: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateAppInstanceUserCommand = de_UpdateAppInstanceUserCommand;
    var de_UpdateAppInstanceUserCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.chimesdkidentity#ResourceLimitExceededException":
          throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var de_UpdateAppInstanceUserEndpointCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateAppInstanceUserEndpointCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      const doc = (0, smithy_client_1.take)(data, {
        AppInstanceUserArn: smithy_client_1.expectString,
        EndpointId: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_UpdateAppInstanceUserEndpointCommand = de_UpdateAppInstanceUserEndpointCommand;
    var de_UpdateAppInstanceUserEndpointCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.chimesdkidentity#BadRequestException":
          throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.chimesdkidentity#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.chimesdkidentity#ForbiddenException":
          throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "ServiceFailureException":
        case "com.amazonaws.chimesdkidentity#ServiceFailureException":
          throw await de_ServiceFailureExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.chimesdkidentity#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottledClientException":
        case "com.amazonaws.chimesdkidentity#ThrottledClientException":
          throw await de_ThrottledClientExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.chimesdkidentity#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException);
    var de_BadRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ConflictExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ForbiddenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_NotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ServiceFailureExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ServiceFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_ThrottledClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ThrottledClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var de_AppInstance = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AppInstanceArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Name: smithy_client_1.expectString
      });
    };
    var de_AppInstanceAdmin = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Admin: smithy_client_1._json,
        AppInstanceArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_)))
      });
    };
    var de_AppInstanceBot = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AppInstanceBotArn: smithy_client_1.expectString,
        Configuration: smithy_client_1._json,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Name: smithy_client_1.expectString
      });
    };
    var de_AppInstanceUser = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AppInstanceUserArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ExpirationSettings: smithy_client_1._json,
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Metadata: smithy_client_1.expectString,
        Name: smithy_client_1.expectString
      });
    };
    var de_AppInstanceUserEndpoint = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AllowMessages: smithy_client_1.expectString,
        AppInstanceUserArn: smithy_client_1.expectString,
        CreatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        EndpointAttributes: smithy_client_1._json,
        EndpointId: smithy_client_1.expectString,
        EndpointState: smithy_client_1._json,
        LastUpdatedTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Name: smithy_client_1.expectString,
        ResourceArn: smithy_client_1.expectString,
        Type: smithy_client_1.expectString
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/CreateAppInstanceAdminCommand.js
var require_CreateAppInstanceAdminCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/CreateAppInstanceAdminCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAppInstanceAdminCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var CreateAppInstanceAdminCommand2 = class _CreateAppInstanceAdminCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAppInstanceAdminCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "CreateAppInstanceAdminCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.CreateAppInstanceAdminResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAppInstanceAdminCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAppInstanceAdminCommand)(output, context);
      }
    };
    exports.CreateAppInstanceAdminCommand = CreateAppInstanceAdminCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/CreateAppInstanceBotCommand.js
var require_CreateAppInstanceBotCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/CreateAppInstanceBotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAppInstanceBotCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var CreateAppInstanceBotCommand2 = class _CreateAppInstanceBotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAppInstanceBotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "CreateAppInstanceBotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAppInstanceBotRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAppInstanceBotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAppInstanceBotCommand)(output, context);
      }
    };
    exports.CreateAppInstanceBotCommand = CreateAppInstanceBotCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/CreateAppInstanceCommand.js
var require_CreateAppInstanceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/CreateAppInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAppInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var CreateAppInstanceCommand2 = class _CreateAppInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAppInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "CreateAppInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAppInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAppInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAppInstanceCommand)(output, context);
      }
    };
    exports.CreateAppInstanceCommand = CreateAppInstanceCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/CreateAppInstanceUserCommand.js
var require_CreateAppInstanceUserCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/CreateAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var CreateAppInstanceUserCommand2 = class _CreateAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "CreateAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAppInstanceUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateAppInstanceUserCommand)(output, context);
      }
    };
    exports.CreateAppInstanceUserCommand = CreateAppInstanceUserCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeleteAppInstanceAdminCommand.js
var require_DeleteAppInstanceAdminCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeleteAppInstanceAdminCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAppInstanceAdminCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DeleteAppInstanceAdminCommand = class _DeleteAppInstanceAdminCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAppInstanceAdminCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DeleteAppInstanceAdminCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAppInstanceAdminCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAppInstanceAdminCommand)(output, context);
      }
    };
    exports.DeleteAppInstanceAdminCommand = DeleteAppInstanceAdminCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeleteAppInstanceBotCommand.js
var require_DeleteAppInstanceBotCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeleteAppInstanceBotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAppInstanceBotCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DeleteAppInstanceBotCommand = class _DeleteAppInstanceBotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAppInstanceBotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DeleteAppInstanceBotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAppInstanceBotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAppInstanceBotCommand)(output, context);
      }
    };
    exports.DeleteAppInstanceBotCommand = DeleteAppInstanceBotCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeleteAppInstanceCommand.js
var require_DeleteAppInstanceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeleteAppInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAppInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DeleteAppInstanceCommand2 = class _DeleteAppInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAppInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DeleteAppInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAppInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAppInstanceCommand)(output, context);
      }
    };
    exports.DeleteAppInstanceCommand = DeleteAppInstanceCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeleteAppInstanceUserCommand.js
var require_DeleteAppInstanceUserCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeleteAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DeleteAppInstanceUserCommand = class _DeleteAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DeleteAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeleteAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeleteAppInstanceUserCommand)(output, context);
      }
    };
    exports.DeleteAppInstanceUserCommand = DeleteAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeregisterAppInstanceUserEndpointCommand.js
var require_DeregisterAppInstanceUserEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DeregisterAppInstanceUserEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterAppInstanceUserEndpointCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DeregisterAppInstanceUserEndpointCommand = class _DeregisterAppInstanceUserEndpointCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeregisterAppInstanceUserEndpointCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DeregisterAppInstanceUserEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DeregisterAppInstanceUserEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DeregisterAppInstanceUserEndpointCommand)(output, context);
      }
    };
    exports.DeregisterAppInstanceUserEndpointCommand = DeregisterAppInstanceUserEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceAdminCommand.js
var require_DescribeAppInstanceAdminCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceAdminCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAppInstanceAdminCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DescribeAppInstanceAdminCommand = class _DescribeAppInstanceAdminCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAppInstanceAdminCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DescribeAppInstanceAdminCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAppInstanceAdminResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeAppInstanceAdminCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeAppInstanceAdminCommand)(output, context);
      }
    };
    exports.DescribeAppInstanceAdminCommand = DescribeAppInstanceAdminCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceBotCommand.js
var require_DescribeAppInstanceBotCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceBotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAppInstanceBotCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DescribeAppInstanceBotCommand = class _DescribeAppInstanceBotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAppInstanceBotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DescribeAppInstanceBotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAppInstanceBotResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeAppInstanceBotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeAppInstanceBotCommand)(output, context);
      }
    };
    exports.DescribeAppInstanceBotCommand = DescribeAppInstanceBotCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceCommand.js
var require_DescribeAppInstanceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAppInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DescribeAppInstanceCommand = class _DescribeAppInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAppInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DescribeAppInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAppInstanceResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeAppInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeAppInstanceCommand)(output, context);
      }
    };
    exports.DescribeAppInstanceCommand = DescribeAppInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceUserCommand.js
var require_DescribeAppInstanceUserCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DescribeAppInstanceUserCommand = class _DescribeAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DescribeAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAppInstanceUserResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeAppInstanceUserCommand)(output, context);
      }
    };
    exports.DescribeAppInstanceUserCommand = DescribeAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceUserEndpointCommand.js
var require_DescribeAppInstanceUserEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/DescribeAppInstanceUserEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAppInstanceUserEndpointCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var DescribeAppInstanceUserEndpointCommand = class _DescribeAppInstanceUserEndpointCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAppInstanceUserEndpointCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "DescribeAppInstanceUserEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.DescribeAppInstanceUserEndpointResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_DescribeAppInstanceUserEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_DescribeAppInstanceUserEndpointCommand)(output, context);
      }
    };
    exports.DescribeAppInstanceUserEndpointCommand = DescribeAppInstanceUserEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/GetAppInstanceRetentionSettingsCommand.js
var require_GetAppInstanceRetentionSettingsCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/GetAppInstanceRetentionSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAppInstanceRetentionSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson15();
    var GetAppInstanceRetentionSettingsCommand = class _GetAppInstanceRetentionSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAppInstanceRetentionSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "GetAppInstanceRetentionSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetAppInstanceRetentionSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetAppInstanceRetentionSettingsCommand)(output, context);
      }
    };
    exports.GetAppInstanceRetentionSettingsCommand = GetAppInstanceRetentionSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstanceAdminsCommand.js
var require_ListAppInstanceAdminsCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstanceAdminsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstanceAdminsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var ListAppInstanceAdminsCommand = class _ListAppInstanceAdminsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAppInstanceAdminsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "ListAppInstanceAdminsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAppInstanceAdminsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAppInstanceAdminsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAppInstanceAdminsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAppInstanceAdminsCommand)(output, context);
      }
    };
    exports.ListAppInstanceAdminsCommand = ListAppInstanceAdminsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstanceBotsCommand.js
var require_ListAppInstanceBotsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstanceBotsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstanceBotsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var ListAppInstanceBotsCommand = class _ListAppInstanceBotsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAppInstanceBotsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "ListAppInstanceBotsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAppInstanceBotsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAppInstanceBotsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAppInstanceBotsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAppInstanceBotsCommand)(output, context);
      }
    };
    exports.ListAppInstanceBotsCommand = ListAppInstanceBotsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstancesCommand.js
var require_ListAppInstancesCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstancesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstancesCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var ListAppInstancesCommand = class _ListAppInstancesCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAppInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "ListAppInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAppInstancesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAppInstancesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAppInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAppInstancesCommand)(output, context);
      }
    };
    exports.ListAppInstancesCommand = ListAppInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstanceUserEndpointsCommand.js
var require_ListAppInstanceUserEndpointsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstanceUserEndpointsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstanceUserEndpointsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var ListAppInstanceUserEndpointsCommand = class _ListAppInstanceUserEndpointsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAppInstanceUserEndpointsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "ListAppInstanceUserEndpointsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAppInstanceUserEndpointsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAppInstanceUserEndpointsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAppInstanceUserEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAppInstanceUserEndpointsCommand)(output, context);
      }
    };
    exports.ListAppInstanceUserEndpointsCommand = ListAppInstanceUserEndpointsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstanceUsersCommand.js
var require_ListAppInstanceUsersCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListAppInstanceUsersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAppInstanceUsersCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var ListAppInstanceUsersCommand = class _ListAppInstanceUsersCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAppInstanceUsersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "ListAppInstanceUsersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAppInstanceUsersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAppInstanceUsersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAppInstanceUsersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAppInstanceUsersCommand)(output, context);
      }
    };
    exports.ListAppInstanceUsersCommand = ListAppInstanceUsersCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand4 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/ListTagsForResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsForResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var ListTagsForResourceCommand = class _ListTagsForResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: models_0_1.ListTagsForResourceResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListTagsForResourceCommand)(output, context);
      }
    };
    exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/PutAppInstanceRetentionSettingsCommand.js
var require_PutAppInstanceRetentionSettingsCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/PutAppInstanceRetentionSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutAppInstanceRetentionSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson15();
    var PutAppInstanceRetentionSettingsCommand2 = class _PutAppInstanceRetentionSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutAppInstanceRetentionSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "PutAppInstanceRetentionSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutAppInstanceRetentionSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutAppInstanceRetentionSettingsCommand)(output, context);
      }
    };
    exports.PutAppInstanceRetentionSettingsCommand = PutAppInstanceRetentionSettingsCommand2;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/PutAppInstanceUserExpirationSettingsCommand.js
var require_PutAppInstanceUserExpirationSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/PutAppInstanceUserExpirationSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutAppInstanceUserExpirationSettingsCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var Aws_restJson1_1 = require_Aws_restJson15();
    var PutAppInstanceUserExpirationSettingsCommand = class _PutAppInstanceUserExpirationSettingsCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutAppInstanceUserExpirationSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "PutAppInstanceUserExpirationSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_) => _,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_PutAppInstanceUserExpirationSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_PutAppInstanceUserExpirationSettingsCommand)(output, context);
      }
    };
    exports.PutAppInstanceUserExpirationSettingsCommand = PutAppInstanceUserExpirationSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/RegisterAppInstanceUserEndpointCommand.js
var require_RegisterAppInstanceUserEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/RegisterAppInstanceUserEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterAppInstanceUserEndpointCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var RegisterAppInstanceUserEndpointCommand = class _RegisterAppInstanceUserEndpointCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterAppInstanceUserEndpointCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "RegisterAppInstanceUserEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterAppInstanceUserEndpointRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RegisterAppInstanceUserEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RegisterAppInstanceUserEndpointCommand)(output, context);
      }
    };
    exports.RegisterAppInstanceUserEndpointCommand = RegisterAppInstanceUserEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand3 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/TagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var TagResourceCommand = class _TagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand3 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UntagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagResourceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var UntagResourceCommand = class _UntagResourceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UpdateAppInstanceBotCommand.js
var require_UpdateAppInstanceBotCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UpdateAppInstanceBotCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAppInstanceBotCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var UpdateAppInstanceBotCommand = class _UpdateAppInstanceBotCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAppInstanceBotCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "UpdateAppInstanceBotCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateAppInstanceBotRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateAppInstanceBotCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateAppInstanceBotCommand)(output, context);
      }
    };
    exports.UpdateAppInstanceBotCommand = UpdateAppInstanceBotCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UpdateAppInstanceCommand.js
var require_UpdateAppInstanceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UpdateAppInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAppInstanceCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var UpdateAppInstanceCommand = class _UpdateAppInstanceCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAppInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "UpdateAppInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateAppInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateAppInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateAppInstanceCommand)(output, context);
      }
    };
    exports.UpdateAppInstanceCommand = UpdateAppInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UpdateAppInstanceUserCommand.js
var require_UpdateAppInstanceUserCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UpdateAppInstanceUserCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAppInstanceUserCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var UpdateAppInstanceUserCommand = class _UpdateAppInstanceUserCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAppInstanceUserCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "UpdateAppInstanceUserCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateAppInstanceUserRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateAppInstanceUserCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateAppInstanceUserCommand)(output, context);
      }
    };
    exports.UpdateAppInstanceUserCommand = UpdateAppInstanceUserCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UpdateAppInstanceUserEndpointCommand.js
var require_UpdateAppInstanceUserEndpointCommand = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/UpdateAppInstanceUserEndpointCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAppInstanceUserEndpointCommand = exports.$Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs26();
    var middleware_serde_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs35();
    Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
      return smithy_client_1.Command;
    } });
    var models_0_1 = require_models_07();
    var Aws_restJson1_1 = require_Aws_restJson15();
    var UpdateAppInstanceUserEndpointCommand = class _UpdateAppInstanceUserEndpointCommand extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAppInstanceUserEndpointCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "ChimeSDKIdentityClient";
        const commandName = "UpdateAppInstanceUserEndpointCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateAppInstanceUserEndpointRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_) => _
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_UpdateAppInstanceUserEndpointCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_UpdateAppInstanceUserEndpointCommand)(output, context);
      }
    };
    exports.UpdateAppInstanceUserEndpointCommand = UpdateAppInstanceUserEndpointCommand;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/ChimeSDKIdentity.js
var require_ChimeSDKIdentity = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/ChimeSDKIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeSDKIdentity = void 0;
    var smithy_client_1 = require_dist_cjs35();
    var ChimeSDKIdentityClient_1 = require_ChimeSDKIdentityClient();
    var CreateAppInstanceAdminCommand_1 = require_CreateAppInstanceAdminCommand2();
    var CreateAppInstanceBotCommand_1 = require_CreateAppInstanceBotCommand();
    var CreateAppInstanceCommand_1 = require_CreateAppInstanceCommand2();
    var CreateAppInstanceUserCommand_1 = require_CreateAppInstanceUserCommand2();
    var DeleteAppInstanceAdminCommand_1 = require_DeleteAppInstanceAdminCommand2();
    var DeleteAppInstanceBotCommand_1 = require_DeleteAppInstanceBotCommand();
    var DeleteAppInstanceCommand_1 = require_DeleteAppInstanceCommand2();
    var DeleteAppInstanceUserCommand_1 = require_DeleteAppInstanceUserCommand2();
    var DeregisterAppInstanceUserEndpointCommand_1 = require_DeregisterAppInstanceUserEndpointCommand();
    var DescribeAppInstanceAdminCommand_1 = require_DescribeAppInstanceAdminCommand2();
    var DescribeAppInstanceBotCommand_1 = require_DescribeAppInstanceBotCommand();
    var DescribeAppInstanceCommand_1 = require_DescribeAppInstanceCommand2();
    var DescribeAppInstanceUserCommand_1 = require_DescribeAppInstanceUserCommand2();
    var DescribeAppInstanceUserEndpointCommand_1 = require_DescribeAppInstanceUserEndpointCommand();
    var GetAppInstanceRetentionSettingsCommand_1 = require_GetAppInstanceRetentionSettingsCommand2();
    var ListAppInstanceAdminsCommand_1 = require_ListAppInstanceAdminsCommand2();
    var ListAppInstanceBotsCommand_1 = require_ListAppInstanceBotsCommand();
    var ListAppInstancesCommand_1 = require_ListAppInstancesCommand2();
    var ListAppInstanceUserEndpointsCommand_1 = require_ListAppInstanceUserEndpointsCommand();
    var ListAppInstanceUsersCommand_1 = require_ListAppInstanceUsersCommand2();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand4();
    var PutAppInstanceRetentionSettingsCommand_1 = require_PutAppInstanceRetentionSettingsCommand2();
    var PutAppInstanceUserExpirationSettingsCommand_1 = require_PutAppInstanceUserExpirationSettingsCommand();
    var RegisterAppInstanceUserEndpointCommand_1 = require_RegisterAppInstanceUserEndpointCommand();
    var TagResourceCommand_1 = require_TagResourceCommand3();
    var UntagResourceCommand_1 = require_UntagResourceCommand3();
    var UpdateAppInstanceBotCommand_1 = require_UpdateAppInstanceBotCommand();
    var UpdateAppInstanceCommand_1 = require_UpdateAppInstanceCommand2();
    var UpdateAppInstanceUserCommand_1 = require_UpdateAppInstanceUserCommand2();
    var UpdateAppInstanceUserEndpointCommand_1 = require_UpdateAppInstanceUserEndpointCommand();
    var commands = {
      CreateAppInstanceCommand: CreateAppInstanceCommand_1.CreateAppInstanceCommand,
      CreateAppInstanceAdminCommand: CreateAppInstanceAdminCommand_1.CreateAppInstanceAdminCommand,
      CreateAppInstanceBotCommand: CreateAppInstanceBotCommand_1.CreateAppInstanceBotCommand,
      CreateAppInstanceUserCommand: CreateAppInstanceUserCommand_1.CreateAppInstanceUserCommand,
      DeleteAppInstanceCommand: DeleteAppInstanceCommand_1.DeleteAppInstanceCommand,
      DeleteAppInstanceAdminCommand: DeleteAppInstanceAdminCommand_1.DeleteAppInstanceAdminCommand,
      DeleteAppInstanceBotCommand: DeleteAppInstanceBotCommand_1.DeleteAppInstanceBotCommand,
      DeleteAppInstanceUserCommand: DeleteAppInstanceUserCommand_1.DeleteAppInstanceUserCommand,
      DeregisterAppInstanceUserEndpointCommand: DeregisterAppInstanceUserEndpointCommand_1.DeregisterAppInstanceUserEndpointCommand,
      DescribeAppInstanceCommand: DescribeAppInstanceCommand_1.DescribeAppInstanceCommand,
      DescribeAppInstanceAdminCommand: DescribeAppInstanceAdminCommand_1.DescribeAppInstanceAdminCommand,
      DescribeAppInstanceBotCommand: DescribeAppInstanceBotCommand_1.DescribeAppInstanceBotCommand,
      DescribeAppInstanceUserCommand: DescribeAppInstanceUserCommand_1.DescribeAppInstanceUserCommand,
      DescribeAppInstanceUserEndpointCommand: DescribeAppInstanceUserEndpointCommand_1.DescribeAppInstanceUserEndpointCommand,
      GetAppInstanceRetentionSettingsCommand: GetAppInstanceRetentionSettingsCommand_1.GetAppInstanceRetentionSettingsCommand,
      ListAppInstanceAdminsCommand: ListAppInstanceAdminsCommand_1.ListAppInstanceAdminsCommand,
      ListAppInstanceBotsCommand: ListAppInstanceBotsCommand_1.ListAppInstanceBotsCommand,
      ListAppInstancesCommand: ListAppInstancesCommand_1.ListAppInstancesCommand,
      ListAppInstanceUserEndpointsCommand: ListAppInstanceUserEndpointsCommand_1.ListAppInstanceUserEndpointsCommand,
      ListAppInstanceUsersCommand: ListAppInstanceUsersCommand_1.ListAppInstanceUsersCommand,
      ListTagsForResourceCommand: ListTagsForResourceCommand_1.ListTagsForResourceCommand,
      PutAppInstanceRetentionSettingsCommand: PutAppInstanceRetentionSettingsCommand_1.PutAppInstanceRetentionSettingsCommand,
      PutAppInstanceUserExpirationSettingsCommand: PutAppInstanceUserExpirationSettingsCommand_1.PutAppInstanceUserExpirationSettingsCommand,
      RegisterAppInstanceUserEndpointCommand: RegisterAppInstanceUserEndpointCommand_1.RegisterAppInstanceUserEndpointCommand,
      TagResourceCommand: TagResourceCommand_1.TagResourceCommand,
      UntagResourceCommand: UntagResourceCommand_1.UntagResourceCommand,
      UpdateAppInstanceCommand: UpdateAppInstanceCommand_1.UpdateAppInstanceCommand,
      UpdateAppInstanceBotCommand: UpdateAppInstanceBotCommand_1.UpdateAppInstanceBotCommand,
      UpdateAppInstanceUserCommand: UpdateAppInstanceUserCommand_1.UpdateAppInstanceUserCommand,
      UpdateAppInstanceUserEndpointCommand: UpdateAppInstanceUserEndpointCommand_1.UpdateAppInstanceUserEndpointCommand
    };
    var ChimeSDKIdentity = class extends ChimeSDKIdentityClient_1.ChimeSDKIdentityClient {
    };
    exports.ChimeSDKIdentity = ChimeSDKIdentity;
    (0, smithy_client_1.createAggregatedClient)(commands, ChimeSDKIdentity);
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/index.js
var require_commands7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CreateAppInstanceAdminCommand2(), exports);
    tslib_1.__exportStar(require_CreateAppInstanceBotCommand(), exports);
    tslib_1.__exportStar(require_CreateAppInstanceCommand2(), exports);
    tslib_1.__exportStar(require_CreateAppInstanceUserCommand2(), exports);
    tslib_1.__exportStar(require_DeleteAppInstanceAdminCommand2(), exports);
    tslib_1.__exportStar(require_DeleteAppInstanceBotCommand(), exports);
    tslib_1.__exportStar(require_DeleteAppInstanceCommand2(), exports);
    tslib_1.__exportStar(require_DeleteAppInstanceUserCommand2(), exports);
    tslib_1.__exportStar(require_DeregisterAppInstanceUserEndpointCommand(), exports);
    tslib_1.__exportStar(require_DescribeAppInstanceAdminCommand2(), exports);
    tslib_1.__exportStar(require_DescribeAppInstanceBotCommand(), exports);
    tslib_1.__exportStar(require_DescribeAppInstanceCommand2(), exports);
    tslib_1.__exportStar(require_DescribeAppInstanceUserCommand2(), exports);
    tslib_1.__exportStar(require_DescribeAppInstanceUserEndpointCommand(), exports);
    tslib_1.__exportStar(require_GetAppInstanceRetentionSettingsCommand2(), exports);
    tslib_1.__exportStar(require_ListAppInstanceAdminsCommand2(), exports);
    tslib_1.__exportStar(require_ListAppInstanceBotsCommand(), exports);
    tslib_1.__exportStar(require_ListAppInstanceUserEndpointsCommand(), exports);
    tslib_1.__exportStar(require_ListAppInstanceUsersCommand2(), exports);
    tslib_1.__exportStar(require_ListAppInstancesCommand2(), exports);
    tslib_1.__exportStar(require_ListTagsForResourceCommand4(), exports);
    tslib_1.__exportStar(require_PutAppInstanceRetentionSettingsCommand2(), exports);
    tslib_1.__exportStar(require_PutAppInstanceUserExpirationSettingsCommand(), exports);
    tslib_1.__exportStar(require_RegisterAppInstanceUserEndpointCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand3(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand3(), exports);
    tslib_1.__exportStar(require_UpdateAppInstanceBotCommand(), exports);
    tslib_1.__exportStar(require_UpdateAppInstanceCommand2(), exports);
    tslib_1.__exportStar(require_UpdateAppInstanceUserCommand2(), exports);
    tslib_1.__exportStar(require_UpdateAppInstanceUserEndpointCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/Interfaces.js
var require_Interfaces5 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstanceAdminsPaginator.js
var require_ListAppInstanceAdminsPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstanceAdminsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAppInstanceAdmins = void 0;
    var ChimeSDKIdentityClient_1 = require_ChimeSDKIdentityClient();
    var ListAppInstanceAdminsCommand_1 = require_ListAppInstanceAdminsCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAppInstanceAdminsCommand_1.ListAppInstanceAdminsCommand(input), ...args);
    };
    async function* paginateListAppInstanceAdmins(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKIdentityClient_1.ChimeSDKIdentityClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKIdentity | ChimeSDKIdentityClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAppInstanceAdmins = paginateListAppInstanceAdmins;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstanceBotsPaginator.js
var require_ListAppInstanceBotsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstanceBotsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAppInstanceBots = void 0;
    var ChimeSDKIdentityClient_1 = require_ChimeSDKIdentityClient();
    var ListAppInstanceBotsCommand_1 = require_ListAppInstanceBotsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAppInstanceBotsCommand_1.ListAppInstanceBotsCommand(input), ...args);
    };
    async function* paginateListAppInstanceBots(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKIdentityClient_1.ChimeSDKIdentityClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKIdentity | ChimeSDKIdentityClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAppInstanceBots = paginateListAppInstanceBots;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstanceUserEndpointsPaginator.js
var require_ListAppInstanceUserEndpointsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstanceUserEndpointsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAppInstanceUserEndpoints = void 0;
    var ChimeSDKIdentityClient_1 = require_ChimeSDKIdentityClient();
    var ListAppInstanceUserEndpointsCommand_1 = require_ListAppInstanceUserEndpointsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAppInstanceUserEndpointsCommand_1.ListAppInstanceUserEndpointsCommand(input), ...args);
    };
    async function* paginateListAppInstanceUserEndpoints(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKIdentityClient_1.ChimeSDKIdentityClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKIdentity | ChimeSDKIdentityClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAppInstanceUserEndpoints = paginateListAppInstanceUserEndpoints;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstanceUsersPaginator.js
var require_ListAppInstanceUsersPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstanceUsersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAppInstanceUsers = void 0;
    var ChimeSDKIdentityClient_1 = require_ChimeSDKIdentityClient();
    var ListAppInstanceUsersCommand_1 = require_ListAppInstanceUsersCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAppInstanceUsersCommand_1.ListAppInstanceUsersCommand(input), ...args);
    };
    async function* paginateListAppInstanceUsers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKIdentityClient_1.ChimeSDKIdentityClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKIdentity | ChimeSDKIdentityClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAppInstanceUsers = paginateListAppInstanceUsers;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstancesPaginator.js
var require_ListAppInstancesPaginator2 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/ListAppInstancesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAppInstances = void 0;
    var ChimeSDKIdentityClient_1 = require_ChimeSDKIdentityClient();
    var ListAppInstancesCommand_1 = require_ListAppInstancesCommand2();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAppInstancesCommand_1.ListAppInstancesCommand(input), ...args);
    };
    async function* paginateListAppInstances(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof ChimeSDKIdentityClient_1.ChimeSDKIdentityClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected ChimeSDKIdentity | ChimeSDKIdentityClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAppInstances = paginateListAppInstances;
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/index.js
var require_pagination7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces5(), exports);
    tslib_1.__exportStar(require_ListAppInstanceAdminsPaginator2(), exports);
    tslib_1.__exportStar(require_ListAppInstanceBotsPaginator(), exports);
    tslib_1.__exportStar(require_ListAppInstanceUserEndpointsPaginator(), exports);
    tslib_1.__exportStar(require_ListAppInstanceUsersPaginator2(), exports);
    tslib_1.__exportStar(require_ListAppInstancesPaginator2(), exports);
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/models/index.js
var require_models7 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_07(), exports);
  }
});

// node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/index.js
var require_dist_cjs58 = __commonJS({
  "node_modules/@aws-sdk/client-chime-sdk-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChimeSDKIdentityServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_ChimeSDKIdentityClient(), exports);
    tslib_1.__exportStar(require_ChimeSDKIdentity(), exports);
    tslib_1.__exportStar(require_commands7(), exports);
    tslib_1.__exportStar(require_pagination7(), exports);
    tslib_1.__exportStar(require_models7(), exports);
    var ChimeSDKIdentityServiceException_1 = require_ChimeSDKIdentityServiceException();
    Object.defineProperty(exports, "ChimeSDKIdentityServiceException", { enumerable: true, get: function() {
      return ChimeSDKIdentityServiceException_1.ChimeSDKIdentityServiceException;
    } });
  }
});

// src/resources/messaging/messaging.lambda.ts
var messaging_lambda_exports = {};
__export(messaging_lambda_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(messaging_lambda_exports);

// src/resources/messaging/appInstance.ts
var import_client_chime = __toESM(require_dist_cjs54());
var import_client_ssm = __toESM(require_dist_cjs56());
var chimeClient = new import_client_chime.ChimeClient({
  region: process.env.AWS_REGION
});
var ssmClient = new import_client_ssm.SSMClient({ region: process.env.AWS_REGION });
var createAppInstanceCommandParams;
var createAppInstanceCommandResponse;
var getParameterCommandOutput;
var updatedTags;
var CreateAppInstance = async (uid, props) => {
  updatedTags = [];
  if (props.tags) {
    props.tags.forEach((tag) => {
      updatedTags.push({ Key: tag.key, Value: tag.value });
    });
  }
  createAppInstanceCommandParams = {
    Name: props.name,
    ...props.metadata && { Metadata: props.metadata },
    ...props.clientRequestToken && {
      ClientRequestToken: props.clientRequestToken
    },
    ...updatedTags.length > 0 && { Tags: updatedTags }
  };
  try {
    createAppInstanceCommandResponse = await chimeClient.send(
      new import_client_chime.CreateAppInstanceCommand(createAppInstanceCommandParams)
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  try {
    await ssmClient.send(
      new import_client_ssm.PutParameterCommand({
        Name: `/chime/appInstanceArn/${uid}`,
        Description: "App Instance Arn",
        Value: createAppInstanceCommandResponse.AppInstanceArn,
        Overwrite: true,
        Type: "String"
      })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  return {
    appInstanceArn: createAppInstanceCommandResponse.AppInstanceArn
  };
};
var DeleteAppInstance = async (uid) => {
  try {
    getParameterCommandOutput = await ssmClient.send(
      new import_client_ssm.GetParameterCommand({ Name: `/chime/appInstanceArn/${uid}` })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  try {
    await chimeClient.send(
      new import_client_chime.DeleteAppInstanceCommand({
        AppInstanceArn: getParameterCommandOutput.Parameter.Value
      })
    );
    await ssmClient.send(
      new import_client_ssm.DeleteParameterCommand({ Name: `/chime/appInstanceArn/${uid}` })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
};

// src/resources/messaging/channelFlow.ts
var import_client_chime_sdk_messaging = __toESM(require_dist_cjs57());
var import_client_ssm2 = __toESM(require_dist_cjs56());
var chimeSDKMessagingClient = new import_client_chime_sdk_messaging.ChimeSDKMessagingClient({
  region: process.env.AWS_REGION
});
var ssmClient2 = new import_client_ssm2.SSMClient({ region: process.env.AWS_REGION });
var CreateChannelFlow = async (uid, props) => {
  try {
    const createChannelFlowCommandOutput = await chimeSDKMessagingClient.send(
      new import_client_chime_sdk_messaging.CreateChannelFlowCommand({
        AppInstanceArn: props.appInstanceArn,
        Name: props.name,
        ClientRequestToken: props.clientRequestToken,
        Tags: getUpdatedTags(props.tags),
        Processors: getUpdatedProcessors(props.processors)
      })
    );
    await saveChannelFlowArnToSsm(uid, createChannelFlowCommandOutput.ChannelFlowArn);
    return {
      channelFlowArn: createChannelFlowCommandOutput.ChannelFlowArn
    };
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  return {};
};
var UpdateChannelFlow = async (uid, props) => {
  try {
    const channelFlowArn = await getExistingChannelFlowArnFromSsm(uid);
    const updateChannelFlowCommandOutput = await chimeSDKMessagingClient.send(
      new import_client_chime_sdk_messaging.UpdateChannelFlowCommand({
        ChannelFlowArn: channelFlowArn,
        Name: props.name,
        Processors: getUpdatedProcessors(props.processors)
      })
    );
    return {
      channelFlowArn: updateChannelFlowCommandOutput.ChannelFlowArn
    };
  } catch (error) {
    console.error(error);
    throw error;
  }
};
var DeleteChannelFlow = async (uid) => {
  try {
    const channelFlowArn = await getExistingChannelFlowArnFromSsm(uid);
    await chimeSDKMessagingClient.send(
      new import_client_chime_sdk_messaging.DeleteChannelFlowCommand({
        ChannelFlowArn: channelFlowArn
      })
    );
    await deleteChannelFlowArnFromSsm(uid);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
};
var saveChannelFlowArnToSsm = async (uid, channelFlowArn) => {
  return ssmClient2.send(
    new import_client_ssm2.PutParameterCommand({
      Name: `/chime/channelFlowArn/${uid}`,
      Description: "channelFlowArn",
      Value: channelFlowArn,
      Overwrite: true,
      Type: "String"
    })
  );
};
var getExistingChannelFlowArnFromSsm = async (uid) => {
  const getParameterCommandOutput2 = await ssmClient2.send(
    new import_client_ssm2.GetParameterCommand({ Name: `/chime/channelFlowArn/${uid}` })
  );
  return getParameterCommandOutput2.Parameter?.Value;
};
var deleteChannelFlowArnFromSsm = async (uid) => {
  return ssmClient2.send(
    new import_client_ssm2.DeleteParameterCommand({ Name: `/chime/channelFlowArn/${uid}` })
  );
};
var getUpdatedProcessors = (processors) => {
  return processors?.map(getUpdatedProcessor) || [];
};
var getUpdatedProcessor = (processor) => {
  return {
    Name: processor.name,
    ExecutionOrder: parseInt(processor.executionOrder),
    FallbackAction: processor.fallbackAction,
    Configuration: {
      Lambda: {
        ResourceArn: processor.configuration.lambda.resourceArn,
        InvocationType: processor.configuration.lambda.invocationType
      }
    }
  };
};
var getUpdatedTags = (tags) => {
  return tags?.map(getUpdatedTag);
};
var getUpdatedTag = (tag) => {
  return { Key: tag.key, Value: tag.value };
};

// src/resources/messaging/dataRetention.ts
var import_client_chime2 = __toESM(require_dist_cjs54());
var chimeClient2 = new import_client_chime2.ChimeClient({
  region: process.env.AWS_REGION
});
var putDataRetentionOutput;
var putDataRetentionInput;
var PutDataRetention = async (props) => {
  putDataRetentionInput = {
    AppInstanceArn: props.appInstanceArn,
    AppInstanceRetentionSettings: {
      ChannelRetentionSettings: {
        RetentionDays: parseInt(props.dataRetention)
      }
    }
  };
  try {
    putDataRetentionOutput = await chimeClient2.send(
      new import_client_chime2.PutAppInstanceRetentionSettingsCommand(putDataRetentionInput)
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  return {
    appInstanceRetentionSettings: putDataRetentionOutput.AppInstanceRetentionSettings
  };
};

// src/resources/messaging/instanceAdmin.ts
var import_client_chime3 = __toESM(require_dist_cjs54());
var import_client_ssm3 = __toESM(require_dist_cjs56());
var chimeClient3 = new import_client_chime3.ChimeClient({
  region: process.env.AWS_REGION
});
var ssmClient3 = new import_client_ssm3.SSMClient({ region: process.env.AWS_REGION });
var createAppInstanceAdminCommandInput;
var createAppInstanceAdminCommandOutput;
var CreateAppInstanceAdmin = async (uid, props) => {
  createAppInstanceAdminCommandInput = {
    AppInstanceArn: props.appInstanceArn,
    AppInstanceAdminArn: props.appInstanceAdminArn
  };
  try {
    createAppInstanceAdminCommandOutput = await chimeClient3.send(
      new import_client_chime3.CreateAppInstanceAdminCommand(createAppInstanceAdminCommandInput)
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  try {
    await ssmClient3.send(
      new import_client_ssm3.PutParameterCommand({
        Name: `/chime/appInstanceAdminArn/${uid}`,
        Description: "appInstanceAdminArn",
        Value: createAppInstanceAdminCommandOutput.AppInstanceAdmin?.Arn,
        Overwrite: true,
        Type: "String"
      })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  return {
    AppInstanceAdminArn: createAppInstanceAdminCommandOutput.AppInstanceAdmin?.Arn,
    AppInstanceAdminName: createAppInstanceAdminCommandOutput.AppInstanceAdmin?.Name
  };
};
var DeleteAppInstanceAdmin = async (uid) => {
  try {
    await ssmClient3.send(
      new import_client_ssm3.DeleteParameterCommand({ Name: `/chime/appInstanceAdminArn/${uid}` })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
};

// src/resources/messaging/instanceBot.ts
var import_client_chime_sdk_identity = __toESM(require_dist_cjs58());
var import_client_ssm4 = __toESM(require_dist_cjs56());
var chimeClient4 = new import_client_chime_sdk_identity.ChimeSDKIdentityClient({
  region: process.env.AWS_REGION
});
var ssmClient4 = new import_client_ssm4.SSMClient({ region: process.env.AWS_REGION });
var createAppInstanceBotCommandInput;
var createAppInstanceBotCommandOutput;
var updatedTags2;
var CreateAppInstanceBot = async (uid, props) => {
  updatedTags2 = [];
  if (props.tags) {
    props.tags.forEach((tag) => {
      updatedTags2.push({ Key: tag.key, Value: tag.value });
    });
  }
  createAppInstanceBotCommandInput = {
    Configuration: {
      Lex: {
        LexBotAliasArn: props.configuration?.lex?.lexBotAliasArn,
        LocaleId: props.configuration?.lex?.localeId,
        RespondsTo: "STANDARD_MESSAGES",
        // default for now since only option
        ...props.configuration?.lex?.welcomeIntent && {
          WelcomeIntent: props.configuration?.lex?.welcomeIntent
        }
      }
    },
    Name: props.name,
    AppInstanceArn: props.appInstanceArn,
    ...props.metadata && { Metadata: props.metadata },
    ...props.clientRequestToken && {
      ClientRequestToken: props.clientRequestToken
    },
    ...updatedTags2.length > 0 && { Tags: updatedTags2 }
  };
  try {
    createAppInstanceBotCommandOutput = await chimeClient4.send(
      new import_client_chime_sdk_identity.CreateAppInstanceBotCommand(createAppInstanceBotCommandInput)
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  try {
    await ssmClient4.send(
      new import_client_ssm4.PutParameterCommand({
        Name: `/chime/appInstanceBotId/${uid}`,
        Description: "appInstanceBotId",
        Value: createAppInstanceBotCommandOutput.AppInstanceBotArn,
        Overwrite: true,
        Type: "String"
      })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  return {
    appInstanceBot: createAppInstanceBotCommandOutput.AppInstanceBotArn
  };
};
var DeleteAppInstanceBot = async (uid) => {
  try {
    await ssmClient4.send(
      new import_client_ssm4.DeleteParameterCommand({ Name: `/chime/appInstanceBotId/${uid}` })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
};

// src/resources/messaging/instanceUser.ts
var import_client_chime4 = __toESM(require_dist_cjs54());
var import_client_ssm5 = __toESM(require_dist_cjs56());
var chimeClient5 = new import_client_chime4.ChimeClient({
  region: process.env.AWS_REGION
});
var ssmClient5 = new import_client_ssm5.SSMClient({ region: process.env.AWS_REGION });
var createAppInstanceUserCommandInput;
var createAppInstanceUserCommandOutput;
var updatedTags3;
var CreateAppInstanceUser = async (uid, props) => {
  updatedTags3 = [];
  if (props.tags) {
    props.tags.forEach((tag) => {
      updatedTags3.push({ Key: tag.key, Value: tag.value });
    });
  }
  createAppInstanceUserCommandInput = {
    Name: props.name,
    AppInstanceArn: props.appInstanceArn,
    AppInstanceUserId: props.appInstanceUserId,
    ...props.metadata && { Metadata: props.metadata },
    ...props.clientRequestToken && {
      ClientRequestToken: props.clientRequestToken
    },
    ...updatedTags3.length > 0 && { Tags: updatedTags3 }
  };
  try {
    createAppInstanceUserCommandOutput = await chimeClient5.send(
      new import_client_chime4.CreateAppInstanceUserCommand(createAppInstanceUserCommandInput)
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  try {
    await ssmClient5.send(
      new import_client_ssm5.PutParameterCommand({
        Name: `/chime/appInstanceUserId/${uid}`,
        Description: "appInstanceUserId",
        Value: createAppInstanceUserCommandOutput.AppInstanceUserArn,
        Overwrite: true,
        Type: "String"
      })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  return {
    appInstanceUser: createAppInstanceUserCommandOutput.AppInstanceUserArn
  };
};
var DeleteAppInstanceUser = async (uid) => {
  try {
    await ssmClient5.send(
      new import_client_ssm5.DeleteParameterCommand({ Name: `/chime/appInstanceUserId/${uid}` })
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
};

// src/resources/messaging/streamingConfig.ts
var import_client_chime5 = __toESM(require_dist_cjs54());
var chimeClient6 = new import_client_chime5.ChimeClient({
  region: process.env.AWS_REGION
});
var putStreamingConfigurationOutput;
var putStreamingConfigurationInput;
var updatedConfiguration;
var PutStreamingConfiguration = async (props) => {
  updatedConfiguration = [];
  props.streamingConfigs?.forEach((streamingConfig) => {
    updatedConfiguration.push({
      AppInstanceDataType: streamingConfig.appInstanceDataType,
      ResourceArn: streamingConfig.resourceArn
    });
  });
  putStreamingConfigurationInput = {
    AppInstanceArn: props.appInstanceArn,
    AppInstanceStreamingConfigurations: updatedConfiguration
  };
  try {
    putStreamingConfigurationOutput = await chimeClient6.send(
      new import_client_chime5.PutAppInstanceStreamingConfigurationsCommand(
        putStreamingConfigurationInput
      )
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error);
      throw error;
    }
  }
  return {
    appInstanceStreamingConfiguration: putStreamingConfigurationOutput.AppInstanceStreamingConfigurations
  };
};

// src/resources/messaging/messaging.lambda.ts
var response = {};
var resourcePropertiesUid;
var requestProperties;
var handler = async (event, context) => {
  console.info("event: ", event);
  const resourceType = event.ResourceProperties.resourceType;
  const requestType = event.RequestType;
  resourcePropertiesUid = event.ResourceProperties.uid;
  requestProperties = event.ResourceProperties.properties;
  response.StackId = event.StackId;
  response.RequestId = event.RequestId;
  response.LogicalResourceId = event.LogicalResourceId;
  response.PhysicalResourceId = context.logGroupName;
  switch (resourceType) {
    case "AppInstance":
      switch (requestType) {
        case "Create":
          response.Data = await CreateAppInstance(
            resourcePropertiesUid,
            requestProperties
          );
          response.Status = "SUCCESS";
          response.Reason = "CreateAppInstance successful";
          break;
        case "Update":
          response.Status = "SUCCESS";
          break;
        case "Delete":
          await DeleteAppInstance(resourcePropertiesUid);
          response.Status = "SUCCESS";
          response.Reason = "DeleteAppInstance successful";
          break;
      }
      break;
    case "ChannelFlow":
      switch (requestType) {
        case "Create":
          response.Data = await CreateChannelFlow(
            resourcePropertiesUid,
            requestProperties
          );
          response.Status = "SUCCESS";
          response.Reason = "CreateChannelFlow successful";
          break;
        case "Update":
          response.Data = await UpdateChannelFlow(
            resourcePropertiesUid,
            requestProperties
          );
          response.Status = "SUCCESS";
          response.Reason = "UpdateChannelFlow successful";
          break;
        case "Delete":
          await DeleteChannelFlow(resourcePropertiesUid);
          response.Status = "SUCCESS";
          response.Reason = "DeleteChannelFlow successful";
          break;
      }
      break;
    case "DataRetention":
      switch (requestType) {
        case "Create":
          response.Data = await PutDataRetention(requestProperties);
          response.Status = "SUCCESS";
          response.Reason = "PutDataRetention successful";
          break;
        case "Update":
          response.Data = await PutDataRetention(requestProperties);
          response.Status = "SUCCESS";
          response.Reason = "PutDataRetention successful";
          break;
      }
      break;
    case "AppInstanceAdmin":
      switch (requestType) {
        case "Create":
          response.Data = await CreateAppInstanceAdmin(
            resourcePropertiesUid,
            requestProperties
          );
          response.Status = "SUCCESS";
          response.Reason = "CreateAppInstanceAdmin successful";
          break;
        case "Update":
          response.Status = "SUCCESS";
          break;
        case "Delete":
          await DeleteAppInstanceAdmin(resourcePropertiesUid);
          response.Status = "SUCCESS";
          response.Reason = "DeleteAppInstanceAdmin successful";
          break;
      }
      break;
    case "AppInstanceUser":
      switch (requestType) {
        case "Create":
          response.Data = await CreateAppInstanceUser(
            resourcePropertiesUid,
            requestProperties
          );
          response.Status = "SUCCESS";
          response.Reason = "CreateAppInstanceUser successful";
          break;
        case "Update":
          response.Status = "SUCCESS";
          break;
        case "Delete":
          await DeleteAppInstanceUser(resourcePropertiesUid);
          response.Status = "SUCCESS";
          response.Reason = "DeleteAppInstanceUser successful";
          break;
      }
      break;
    case "AppInstanceBot":
      switch (requestType) {
        case "Create":
          response.Data = await CreateAppInstanceBot(
            resourcePropertiesUid,
            requestProperties
          );
          response.Status = "SUCCESS";
          response.Reason = "CreateAppInstanceBot successful";
          break;
        case "Update":
          response.Status = "SUCCESS";
          break;
        case "Delete":
          await DeleteAppInstanceBot(resourcePropertiesUid);
          response.Status = "SUCCESS";
          response.Reason = "DeleteAppInstanceUser successful";
          break;
      }
      break;
    case "StreamingConfig":
      switch (requestType) {
        case "Create":
          response.Data = await PutStreamingConfiguration(requestProperties);
          response.Status = "SUCCESS";
          response.Reason = "PutStreamingConfiguration successful";
          break;
        case "Update":
          response.Data = await PutStreamingConfiguration(requestProperties);
          response.Status = "SUCCESS";
          response.Reason = "PutStreamingConfiguration successful";
          break;
      }
      break;
  }
  console.log(`Response: ${JSON.stringify(response)}`);
  return response;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
